
Practicas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a9c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004d34  08004d34  00014d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d9c  08004d9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da4  08004da4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da4  08004da4  00014da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da8  08004da8  00014da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004dbc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004dbc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b003  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d4  00000000  00000000  0003b041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b18  00000000  00000000  0003d918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a70  00000000  00000000  0003e430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000411ef  00000000  00000000  0003eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0cb  00000000  00000000  0008008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001976b7  00000000  00000000  0008f15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00226811  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d40  00000000  00000000  00226864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d1c 	.word	0x08004d1c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004d1c 	.word	0x08004d1c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <_Z9Practica3v>:
	MEM_TO_PER = 1,

	MEM_TO_MEM = 2
};

void Practica3() {
 8000704:	b4b0      	push	{r4, r5, r7}
 8000706:	b091      	sub	sp, #68	; 0x44
 8000708:	af00      	add	r7, sp, #0
	// Ejercicio 3.1
	int16_t datosA[] = { 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D', 'A', 'B', 'C', 'D' };
 800070a:	4b24      	ldr	r3, [pc, #144]	; (800079c <_Z9Practica3v+0x98>)
 800070c:	f107 0420 	add.w	r4, r7, #32
 8000710:	461d      	mov	r5, r3
 8000712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000716:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800071a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int16_t datosB[16];

	RCC->AHB1ENR |= (1 << DMA_1_AHB1ENR_POS);    // Activate DMA 1 clk
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000720:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000724:	4a1e      	ldr	r2, [pc, #120]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA1RST;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000734:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000736:	f043 0301 	orr.w	r3, r3, #1
 800073a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	RCC->AHB1RSTR &= ~RCC_AHB1RSTR_DMA1RST;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000740:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000744:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <_Z9Practica3v+0x9c>)
 8000746:	f023 0301 	bic.w	r3, r3, #1
 800074a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	DMA1_Stream7->CR = 0;
 800074e:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
	DMA1->LISR = 0;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <_Z9Practica3v+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
	DMA1->HISR = 0;
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <_Z9Practica3v+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
	DMA1_Stream7->CR |= 0;    //DIR,PINC,MINC,PSIZE,MSIZE
 8000760:	4b10      	ldr	r3, [pc, #64]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6013      	str	r3, [r2, #0]
	DMA1_Stream7->M0AR = datosB[0];
 8000768:	f9b7 2000 	ldrsh.w	r2, [r7]
 800076c:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <_Z9Practica3v+0xa0>)
 800076e:	60da      	str	r2, [r3, #12]
	DMA1_Stream7->PAR = datosA[0];
 8000770:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8000774:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000776:	609a      	str	r2, [r3, #8]
	DMA1_Stream7->NDTR = sizeof(datosA);
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <_Z9Practica3v+0xa0>)
 800077a:	2220      	movs	r2, #32
 800077c:	605a      	str	r2, [r3, #4]
	DMA1_Stream7->FCR = 0;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
	DMA1_Stream7->CR |= (1 << 0);    //Inicio transferencia
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <_Z9Practica3v+0xa0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <_Z9Practica3v+0xa0>)
 800078a:	f043 0301 	orr.w	r3, r3, #1
 800078e:	6013      	str	r3, [r2, #0]

	// Ejercicio 3.2

	// Ejercicio 3.3
}
 8000790:	bf00      	nop
 8000792:	3744      	adds	r7, #68	; 0x44
 8000794:	46bd      	mov	sp, r7
 8000796:	bcb0      	pop	{r4, r5, r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	08004d44 	.word	0x08004d44
 80007a0:	58024400 	.word	0x58024400
 80007a4:	400200b8 	.word	0x400200b8
 80007a8:	40020000 	.word	0x40020000

080007ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <main+0xb0>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d006      	beq.n	80007d2 <main+0x26>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dd01      	ble.n	80007d2 <main+0x26>
 80007ce:	2301      	movs	r3, #1
 80007d0:	e000      	b.n	80007d4 <main+0x28>
 80007d2:	2300      	movs	r3, #0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d000      	beq.n	80007da <main+0x2e>
 80007d8:	e7ee      	b.n	80007b8 <main+0xc>
		;
	if (timeout < 0) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	da01      	bge.n	80007e4 <main+0x38>
		Error_Handler();
 80007e0:	f000 f9c0 	bl	8000b64 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007e4:	f000 fa98 	bl	8000d18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007e8:	f000 f83a 	bl	8000860 <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80007ec:	f000 f8d6 	bl	800099c <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <main+0xb0>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f6:	4a19      	ldr	r2, [pc, #100]	; (800085c <main+0xb0>)
 80007f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000800:	4b16      	ldr	r3, [pc, #88]	; (800085c <main+0xb0>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800080e:	2000      	movs	r0, #0
 8000810:	f000 fdb4 	bl	800137c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000814:	2100      	movs	r1, #0
 8000816:	2000      	movs	r0, #0
 8000818:	f000 fdca 	bl	80013b0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800081c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000820:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <main+0xb0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800082a:	2b00      	cmp	r3, #0
 800082c:	d106      	bne.n	800083c <main+0x90>
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	1e5a      	subs	r2, r3, #1
 8000832:	607a      	str	r2, [r7, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dd01      	ble.n	800083c <main+0x90>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <main+0x92>
 800083c:	2300      	movs	r3, #0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d000      	beq.n	8000844 <main+0x98>
 8000842:	e7ee      	b.n	8000822 <main+0x76>
		;
	if (timeout < 0) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	da01      	bge.n	800084e <main+0xa2>
		Error_Handler();
 800084a:	f000 f98b 	bl	8000b64 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800084e:	f000 f937 	bl	8000ac0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8000852:	f000 f8d5 	bl	8000a00 <_ZL19MX_USART1_UART_Initv>
	// ===================== CORREGIDA
//	Practica1();
	// ===================== NO CORREGIDA
//	Practica2();
	// ===================== NO CORREGIDA
	Practica3();
 8000856:	f7ff ff55 	bl	8000704 <_Z9Practica3v>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800085a:	e7fe      	b.n	800085a <main+0xae>
 800085c:	58024400 	.word	0x58024400

08000860 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b09c      	sub	sp, #112	; 0x70
 8000864:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000866:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086a:	224c      	movs	r2, #76	; 0x4c
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f004 fa4c 	bl	8004d0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2220      	movs	r2, #32
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f004 fa46 	bl	8004d0c <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000880:	2004      	movs	r0, #4
 8000882:	f000 fda9 	bl	80013d8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000886:	2300      	movs	r3, #0
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	4b41      	ldr	r3, [pc, #260]	; (8000990 <_Z18SystemClock_Configv+0x130>)
 800088c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088e:	4a40      	ldr	r2, [pc, #256]	; (8000990 <_Z18SystemClock_Configv+0x130>)
 8000890:	f023 0301 	bic.w	r3, r3, #1
 8000894:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000896:	4b3e      	ldr	r3, [pc, #248]	; (8000990 <_Z18SystemClock_Configv+0x130>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	603b      	str	r3, [r7, #0]
 80008a0:	4b3c      	ldr	r3, [pc, #240]	; (8000994 <_Z18SystemClock_Configv+0x134>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	4a3b      	ldr	r2, [pc, #236]	; (8000994 <_Z18SystemClock_Configv+0x134>)
 80008a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008aa:	6193      	str	r3, [r2, #24]
 80008ac:	4b39      	ldr	r3, [pc, #228]	; (8000994 <_Z18SystemClock_Configv+0x134>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80008b8:	4b36      	ldr	r3, [pc, #216]	; (8000994 <_Z18SystemClock_Configv+0x134>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80008c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c4:	bf14      	ite	ne
 80008c6:	2301      	movne	r3, #1
 80008c8:	2300      	moveq	r3, #0
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d000      	beq.n	80008d2 <_Z18SystemClock_Configv+0x72>
 80008d0:	e7f2      	b.n	80008b8 <_Z18SystemClock_Configv+0x58>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80008d2:	4b31      	ldr	r3, [pc, #196]	; (8000998 <_Z18SystemClock_Configv+0x138>)
 80008d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008d6:	f023 0303 	bic.w	r3, r3, #3
 80008da:	4a2f      	ldr	r2, [pc, #188]	; (8000998 <_Z18SystemClock_Configv+0x138>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80008e2:	230b      	movs	r3, #11
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008ea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ec:	2301      	movs	r3, #1
 80008ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008f0:	2340      	movs	r3, #64	; 0x40
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008f4:	2301      	movs	r3, #1
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008f8:	2302      	movs	r3, #2
 80008fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fc:	2302      	movs	r3, #2
 80008fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000900:	2305      	movs	r3, #5
 8000902:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 8000904:	2330      	movs	r3, #48	; 0x30
 8000906:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000908:	2302      	movs	r3, #2
 800090a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 800090c:	2305      	movs	r3, #5
 800090e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000910:	2302      	movs	r3, #2
 8000912:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000914:	2308      	movs	r3, #8
 8000916:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000918:	2300      	movs	r3, #0
 800091a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000920:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000924:	4618      	mov	r0, r3
 8000926:	f000 fdb1 	bl	800148c <HAL_RCC_OscConfig>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	bf14      	ite	ne
 8000930:	2301      	movne	r3, #1
 8000932:	2300      	moveq	r3, #0
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <_Z18SystemClock_Configv+0xde>
		Error_Handler();
 800093a:	f000 f913 	bl	8000b64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 800093e:	233f      	movs	r3, #63	; 0x3f
 8000940:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f001 f9be 	bl	8001ce4 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <_Z18SystemClock_Configv+0x11c>
		Error_Handler();
 8000978:	f000 f8f4 	bl	8000b64 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800097c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000980:	2100      	movs	r1, #0
 8000982:	2000      	movs	r0, #0
 8000984:	f001 fb64 	bl	8002050 <HAL_RCC_MCOConfig>
}
 8000988:	bf00      	nop
 800098a:	3770      	adds	r7, #112	; 0x70
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58000400 	.word	0x58000400
 8000994:	58024800 	.word	0x58024800
 8000998:	58024400 	.word	0x58024400

0800099c <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b0b0      	sub	sp, #192	; 0xc0
 80009a0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80009a2:	463b      	mov	r3, r7
 80009a4:	22c0      	movs	r2, #192	; 0xc0
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f004 f9af 	bl	8004d0c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80009b2:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009b8:	230c      	movs	r3, #12
 80009ba:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009bc:	2302      	movs	r3, #2
 80009be:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80009c8:	23c0      	movs	r3, #192	; 0xc0
 80009ca:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80009cc:	2320      	movs	r3, #32
 80009ce:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80009d4:	2300      	movs	r3, #0
 80009d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80009da:	463b      	mov	r3, r7
 80009dc:	4618      	mov	r0, r3
 80009de:	f001 fd77 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf14      	ite	ne
 80009e8:	2301      	movne	r3, #1
 80009ea:	2300      	moveq	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <_Z24PeriphCommonClock_Configv+0x5a>
		Error_Handler();
 80009f2:	f000 f8b7 	bl	8000b64 <Error_Handler>
	}
}
 80009f6:	bf00      	nop
 80009f8:	37c0      	adds	r7, #192	; 0xc0
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a04:	4b2c      	ldr	r3, [pc, #176]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000a08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a0a:	4b2b      	ldr	r3, [pc, #172]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b27      	ldr	r3, [pc, #156]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a3c:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a42:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a4a:	f003 f8d3 	bl	8003bf4 <HAL_UART_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 8000a5e:	f000 f881 	bl	8000b64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000a62:	2100      	movs	r1, #0
 8000a64:	4814      	ldr	r0, [pc, #80]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a66:	f004 f863 	bl	8004b30 <HAL_UARTEx_SetTxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	bf14      	ite	ne
 8000a70:	2301      	movne	r3, #1
 8000a72:	2300      	moveq	r3, #0
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 8000a7a:	f000 f873 	bl	8000b64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000a7e:	2100      	movs	r1, #0
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a82:	f004 f893 	bl	8004bac <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	bf14      	ite	ne
 8000a8c:	2301      	movne	r3, #1
 8000a8e:	2300      	moveq	r3, #0
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 8000a96:	f000 f865 	bl	8000b64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000a9a:	4807      	ldr	r0, [pc, #28]	; (8000ab8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a9c:	f004 f80f 	bl	8004abe <HAL_UARTEx_DisableFifoMode>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	bf14      	ite	ne
 8000aa6:	2301      	movne	r3, #1
 8000aa8:	2300      	moveq	r3, #0
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 8000ab0:	f000 f858 	bl	8000b64 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2400002c 	.word	0x2400002c
 8000abc:	40011000 	.word	0x40011000

08000ac0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b21      	ldr	r3, [pc, #132]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b19      	ldr	r3, [pc, #100]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a18      	ldr	r2, [pc, #96]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000b30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000b46:	f107 030c 	add.w	r3, r7, #12
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <_ZL12MX_GPIO_Initv+0xa0>)
 8000b4e:	f000 fa65 	bl	800101c <HAL_GPIO_Init>

}
 8000b52:	bf00      	nop
 8000b54:	3720      	adds	r7, #32
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020000 	.word	0x58020000

08000b64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b68:	b672      	cpsid	i
}
 8000b6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b6c:	e7fe      	b.n	8000b6c <Error_Handler+0x8>
	...

08000b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b7e:	f043 0302 	orr.w	r3, r3, #2
 8000b82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	f003 0302 	and.w	r3, r3, #2
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	58024400 	.word	0x58024400

08000ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ba      	sub	sp, #232	; 0xe8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	22c0      	movs	r2, #192	; 0xc0
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f004 f8a1 	bl	8004d0c <memset>
  if(huart->Instance==USART1)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a25      	ldr	r2, [pc, #148]	; (8000c64 <HAL_UART_MspInit+0xc0>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d142      	bne.n	8000c5a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fc74 	bl	80024d0 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bee:	f7ff ffb9 	bl	8000b64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000bf8:	4a1b      	ldr	r2, [pc, #108]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c10:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <HAL_UART_MspInit+0xc4>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000c2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c48:	2307      	movs	r3, #7
 8000c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_UART_MspInit+0xc8>)
 8000c56:	f000 f9e1 	bl	800101c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	37e8      	adds	r7, #232	; 0xe8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40011000 	.word	0x40011000
 8000c68:	58024400 	.word	0x58024400
 8000c6c:	58020000 	.word	0x58020000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f89e 	bl	8000dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cc8:	f7ff fc82 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	; (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	; (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	; (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	; (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	; (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f003 ffe7 	bl	8004cc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fd59 	bl	80007ac <main>
  bx  lr
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cfc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d04:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d08:	08004dac 	.word	0x08004dac
  ldr r2, =_sbss
 8000d0c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d10:	240000c0 	.word	0x240000c0

08000d14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC3_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1e:	2003      	movs	r0, #3
 8000d20:	f000 f94a 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d24:	f001 f9fe 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_Init+0x68>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	0a1b      	lsrs	r3, r3, #8
 8000d30:	f003 030f 	and.w	r3, r3, #15
 8000d34:	4913      	ldr	r1, [pc, #76]	; (8000d84 <HAL_Init+0x6c>)
 8000d36:	5ccb      	ldrb	r3, [r1, r3]
 8000d38:	f003 031f 	and.w	r3, r3, #31
 8000d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_Init+0x68>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <HAL_Init+0x6c>)
 8000d4c:	5cd3      	ldrb	r3, [r2, r3]
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <HAL_Init+0x70>)
 8000d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d5c:	4a0b      	ldr	r2, [pc, #44]	; (8000d8c <HAL_Init+0x74>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f814 	bl	8000d90 <HAL_InitTick>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e002      	b.n	8000d78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d72:	f7ff fefd 	bl	8000b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	58024400 	.word	0x58024400
 8000d84:	08004d64 	.word	0x08004d64
 8000d88:	24000004 	.word	0x24000004
 8000d8c:	24000000 	.word	0x24000000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d98:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_InitTick+0x60>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e021      	b.n	8000de8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_InitTick+0x64>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_InitTick+0x60>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	4619      	mov	r1, r3
 8000dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 f921 	bl	8001002 <HAL_SYSTICK_Config>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00e      	b.n	8000de8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d80a      	bhi.n	8000de6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f000 f8f9 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ddc:	4a06      	ldr	r2, [pc, #24]	; (8000df8 <HAL_InitTick+0x68>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	e000      	b.n	8000de8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2400000c 	.word	0x2400000c
 8000df4:	24000000 	.word	0x24000000
 8000df8:	24000008 	.word	0x24000008

08000dfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_IncTick+0x20>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <HAL_IncTick+0x24>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a04      	ldr	r2, [pc, #16]	; (8000e20 <HAL_IncTick+0x24>)
 8000e0e:	6013      	str	r3, [r2, #0]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	2400000c 	.word	0x2400000c
 8000e20:	240000bc 	.word	0x240000bc

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b03      	ldr	r3, [pc, #12]	; (8000e38 <HAL_GetTick+0x14>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	240000bc 	.word	0x240000bc

08000e3c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetREVID+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	0c1b      	lsrs	r3, r3, #16
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	5c001000 	.word	0x5c001000

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	05fa0000 	.word	0x05fa0000

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff47 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff90 	bl	8000f0c <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5f 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb2 	bl	8000f74 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800102a:	4b89      	ldr	r3, [pc, #548]	; (8001250 <HAL_GPIO_Init+0x234>)
 800102c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800102e:	e194      	b.n	800135a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	2b00      	cmp	r3, #0
 8001044:	f000 8186 	beq.w	8001354 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0303 	and.w	r3, r3, #3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d005      	beq.n	8001060 <HAL_GPIO_Init+0x44>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b02      	cmp	r3, #2
 800105e:	d130      	bne.n	80010c2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	68da      	ldr	r2, [r3, #12]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001096:	2201      	movs	r2, #1
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	091b      	lsrs	r3, r3, #4
 80010ac:	f003 0201 	and.w	r2, r3, #1
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	d017      	beq.n	80010fe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b02      	cmp	r3, #2
 8001108:	d123      	bne.n	8001152 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	08da      	lsrs	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	3208      	adds	r2, #8
 8001112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	220f      	movs	r2, #15
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4013      	ands	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691a      	ldr	r2, [r3, #16]
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	08da      	lsrs	r2, r3, #3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3208      	adds	r2, #8
 800114c:	69b9      	ldr	r1, [r7, #24]
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	2203      	movs	r2, #3
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4013      	ands	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0203 	and.w	r2, r3, #3
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 80e0 	beq.w	8001354 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <HAL_GPIO_Init+0x238>)
 8001196:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800119a:	4a2e      	ldr	r2, [pc, #184]	; (8001254 <HAL_GPIO_Init+0x238>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <HAL_GPIO_Init+0x238>)
 80011a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	60fb      	str	r3, [r7, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b2:	4a29      	ldr	r2, [pc, #164]	; (8001258 <HAL_GPIO_Init+0x23c>)
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	089b      	lsrs	r3, r3, #2
 80011b8:	3302      	adds	r3, #2
 80011ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	f003 0303 	and.w	r3, r3, #3
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	220f      	movs	r2, #15
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_GPIO_Init+0x240>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d052      	beq.n	8001284 <HAL_GPIO_Init+0x268>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_GPIO_Init+0x244>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d031      	beq.n	800124a <HAL_GPIO_Init+0x22e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <HAL_GPIO_Init+0x248>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d02b      	beq.n	8001246 <HAL_GPIO_Init+0x22a>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_GPIO_Init+0x24c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d025      	beq.n	8001242 <HAL_GPIO_Init+0x226>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_GPIO_Init+0x250>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d01f      	beq.n	800123e <HAL_GPIO_Init+0x222>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <HAL_GPIO_Init+0x254>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d019      	beq.n	800123a <HAL_GPIO_Init+0x21e>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_GPIO_Init+0x258>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d013      	beq.n	8001236 <HAL_GPIO_Init+0x21a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a19      	ldr	r2, [pc, #100]	; (8001278 <HAL_GPIO_Init+0x25c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d00d      	beq.n	8001232 <HAL_GPIO_Init+0x216>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	4a18      	ldr	r2, [pc, #96]	; (800127c <HAL_GPIO_Init+0x260>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d007      	beq.n	800122e <HAL_GPIO_Init+0x212>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_GPIO_Init+0x264>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_GPIO_Init+0x20e>
 8001226:	2309      	movs	r3, #9
 8001228:	e02d      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800122a:	230a      	movs	r3, #10
 800122c:	e02b      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800122e:	2308      	movs	r3, #8
 8001230:	e029      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001232:	2307      	movs	r3, #7
 8001234:	e027      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001236:	2306      	movs	r3, #6
 8001238:	e025      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800123a:	2305      	movs	r3, #5
 800123c:	e023      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800123e:	2304      	movs	r3, #4
 8001240:	e021      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001242:	2303      	movs	r3, #3
 8001244:	e01f      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 8001246:	2302      	movs	r3, #2
 8001248:	e01d      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800124a:	2301      	movs	r3, #1
 800124c:	e01b      	b.n	8001286 <HAL_GPIO_Init+0x26a>
 800124e:	bf00      	nop
 8001250:	58000080 	.word	0x58000080
 8001254:	58024400 	.word	0x58024400
 8001258:	58000400 	.word	0x58000400
 800125c:	58020000 	.word	0x58020000
 8001260:	58020400 	.word	0x58020400
 8001264:	58020800 	.word	0x58020800
 8001268:	58020c00 	.word	0x58020c00
 800126c:	58021000 	.word	0x58021000
 8001270:	58021400 	.word	0x58021400
 8001274:	58021800 	.word	0x58021800
 8001278:	58021c00 	.word	0x58021c00
 800127c:	58022000 	.word	0x58022000
 8001280:	58022400 	.word	0x58022400
 8001284:	2300      	movs	r3, #0
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	f002 0203 	and.w	r2, r2, #3
 800128c:	0092      	lsls	r2, r2, #2
 800128e:	4093      	lsls	r3, r2
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001296:	4938      	ldr	r1, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x35c>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	43db      	mvns	r3, r3
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	4013      	ands	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d003      	beq.n	80012ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	43db      	mvns	r3, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4013      	ands	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d003      	beq.n	8001324 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4313      	orrs	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	43db      	mvns	r3, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4013      	ands	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001346:	69ba      	ldr	r2, [r7, #24]
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa22 f303 	lsr.w	r3, r2, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	f47f ae63 	bne.w	8001030 <HAL_GPIO_Init+0x14>
  }
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3724      	adds	r7, #36	; 0x24
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	58000400 	.word	0x58000400

0800137c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001384:	4a08      	ldr	r2, [pc, #32]	; (80013a8 <HAL_HSEM_FastTake+0x2c>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3320      	adds	r3, #32
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_HSEM_FastTake+0x30>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d101      	bne.n	8001398 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001394:	2300      	movs	r3, #0
 8001396:	e000      	b.n	800139a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	58026400 	.word	0x58026400
 80013ac:	80000300 	.word	0x80000300

080013b0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80013ba:	4906      	ldr	r1, [pc, #24]	; (80013d4 <HAL_HSEM_Release+0x24>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	58026400 	.word	0x58026400

080013d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d00a      	beq.n	8001402 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d001      	beq.n	80013fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e040      	b.n	8001480 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e03e      	b.n	8001480 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001402:	4b21      	ldr	r3, [pc, #132]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800140a:	491f      	ldr	r1, [pc, #124]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4313      	orrs	r3, r2
 8001410:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001412:	f7ff fd07 	bl	8000e24 <HAL_GetTick>
 8001416:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001418:	e009      	b.n	800142e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800141a:	f7ff fd03 	bl	8000e24 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001428:	d901      	bls.n	800142e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e028      	b.n	8001480 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800142e:	4b16      	ldr	r3, [pc, #88]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800143a:	d1ee      	bne.n	800141a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b1e      	cmp	r3, #30
 8001440:	d008      	beq.n	8001454 <HAL_PWREx_ConfigSupply+0x7c>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b2e      	cmp	r3, #46	; 0x2e
 8001446:	d005      	beq.n	8001454 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b1d      	cmp	r3, #29
 800144c:	d002      	beq.n	8001454 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b2d      	cmp	r3, #45	; 0x2d
 8001452:	d114      	bne.n	800147e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001454:	f7ff fce6 	bl	8000e24 <HAL_GetTick>
 8001458:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800145a:	e009      	b.n	8001470 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800145c:	f7ff fce2 	bl	8000e24 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800146a:	d901      	bls.n	8001470 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e007      	b.n	8001480 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_PWREx_ConfigSupply+0xb0>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d1ee      	bne.n	800145c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800147e:	2300      	movs	r3, #0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	58024800 	.word	0x58024800

0800148c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08c      	sub	sp, #48	; 0x30
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 bc1c 	b.w	8001cd8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 8087 	beq.w	80015bc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ae:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014b8:	4b9b      	ldr	r3, [pc, #620]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80014ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014bc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d007      	beq.n	80014d4 <HAL_RCC_OscConfig+0x48>
 80014c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c6:	2b18      	cmp	r3, #24
 80014c8:	d110      	bne.n	80014ec <HAL_RCC_OscConfig+0x60>
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b94      	ldr	r3, [pc, #592]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d06c      	beq.n	80015ba <HAL_RCC_OscConfig+0x12e>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d168      	bne.n	80015ba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e3f5      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x78>
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a8b      	ldr	r2, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e02e      	b.n	8001562 <HAL_RCC_OscConfig+0xd6>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x9a>
 800150c:	4b86      	ldr	r3, [pc, #536]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a85      	ldr	r2, [pc, #532]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a82      	ldr	r2, [pc, #520]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e01d      	b.n	8001562 <HAL_RCC_OscConfig+0xd6>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0xbe>
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a7c      	ldr	r2, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001536:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a79      	ldr	r2, [pc, #484]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e00b      	b.n	8001562 <HAL_RCC_OscConfig+0xd6>
 800154a:	4b77      	ldr	r3, [pc, #476]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a76      	ldr	r2, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	4b74      	ldr	r3, [pc, #464]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a73      	ldr	r2, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800155c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001560:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d013      	beq.n	8001592 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156a:	f7ff fc5b 	bl	8000e24 <HAL_GetTick>
 800156e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001572:	f7ff fc57 	bl	8000e24 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b64      	cmp	r3, #100	; 0x64
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e3a9      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001584:	4b68      	ldr	r3, [pc, #416]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0xe6>
 8001590:	e014      	b.n	80015bc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001592:	f7ff fc47 	bl	8000e24 <HAL_GetTick>
 8001596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159a:	f7ff fc43 	bl	8000e24 <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b64      	cmp	r3, #100	; 0x64
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e395      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ac:	4b5e      	ldr	r3, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1f0      	bne.n	800159a <HAL_RCC_OscConfig+0x10e>
 80015b8:	e000      	b.n	80015bc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 80ca 	beq.w	800175e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4b57      	ldr	r3, [pc, #348]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015d2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015d4:	4b54      	ldr	r3, [pc, #336]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015da:	6a3b      	ldr	r3, [r7, #32]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d007      	beq.n	80015f0 <HAL_RCC_OscConfig+0x164>
 80015e0:	6a3b      	ldr	r3, [r7, #32]
 80015e2:	2b18      	cmp	r3, #24
 80015e4:	d156      	bne.n	8001694 <HAL_RCC_OscConfig+0x208>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d151      	bne.n	8001694 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015f0:	4b4d      	ldr	r3, [pc, #308]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x17c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e367      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f023 0219 	bic.w	r2, r3, #25
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	4944      	ldr	r1, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001616:	4313      	orrs	r3, r2
 8001618:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800161a:	f7ff fc03 	bl	8000e24 <HAL_GetTick>
 800161e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fbff 	bl	8000e24 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e351      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001634:	4b3c      	ldr	r3, [pc, #240]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001640:	f7ff fbfc 	bl	8000e3c <HAL_GetREVID>
 8001644:	4603      	mov	r3, r0
 8001646:	f241 0203 	movw	r2, #4099	; 0x1003
 800164a:	4293      	cmp	r3, r2
 800164c:	d817      	bhi.n	800167e <HAL_RCC_OscConfig+0x1f2>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b40      	cmp	r3, #64	; 0x40
 8001654:	d108      	bne.n	8001668 <HAL_RCC_OscConfig+0x1dc>
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800165e:	4a32      	ldr	r2, [pc, #200]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001664:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001666:	e07a      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	031b      	lsls	r3, r3, #12
 8001676:	492c      	ldr	r1, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800167c:	e06f      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	061b      	lsls	r3, r3, #24
 800168c:	4926      	ldr	r1, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001692:	e064      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d047      	beq.n	800172c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0219 	bic.w	r2, r3, #25
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	491f      	ldr	r1, [pc, #124]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fbb9 	bl	8000e24 <HAL_GetTick>
 80016b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016b4:	e008      	b.n	80016c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016b6:	f7ff fbb5 	bl	8000e24 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d901      	bls.n	80016c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80016c4:	2303      	movs	r3, #3
 80016c6:	e307      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016c8:	4b17      	ldr	r3, [pc, #92]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d0f0      	beq.n	80016b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d4:	f7ff fbb2 	bl	8000e3c <HAL_GetREVID>
 80016d8:	4603      	mov	r3, r0
 80016da:	f241 0203 	movw	r2, #4099	; 0x1003
 80016de:	4293      	cmp	r3, r2
 80016e0:	d817      	bhi.n	8001712 <HAL_RCC_OscConfig+0x286>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	d108      	bne.n	80016fc <HAL_RCC_OscConfig+0x270>
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80016f2:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	6053      	str	r3, [r2, #4]
 80016fa:	e030      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	031b      	lsls	r3, r3, #12
 800170a:	4907      	ldr	r1, [pc, #28]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e025      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	691b      	ldr	r3, [r3, #16]
 800171e:	061b      	lsls	r3, r3, #24
 8001720:	4901      	ldr	r1, [pc, #4]	; (8001728 <HAL_RCC_OscConfig+0x29c>)
 8001722:	4313      	orrs	r3, r2
 8001724:	604b      	str	r3, [r1, #4]
 8001726:	e01a      	b.n	800175e <HAL_RCC_OscConfig+0x2d2>
 8001728:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800172c:	4b9e      	ldr	r3, [pc, #632]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a9d      	ldr	r2, [pc, #628]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001738:	f7ff fb74 	bl	8000e24 <HAL_GetTick>
 800173c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800173e:	e008      	b.n	8001752 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001740:	f7ff fb70 	bl	8000e24 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e2c2      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001752:	4b95      	ldr	r3, [pc, #596]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d1f0      	bne.n	8001740 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80a9 	beq.w	80018be <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176c:	4b8e      	ldr	r3, [pc, #568]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001774:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001776:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2b08      	cmp	r3, #8
 8001780:	d007      	beq.n	8001792 <HAL_RCC_OscConfig+0x306>
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	2b18      	cmp	r3, #24
 8001786:	d13a      	bne.n	80017fe <HAL_RCC_OscConfig+0x372>
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0303 	and.w	r3, r3, #3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d135      	bne.n	80017fe <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001792:	4b85      	ldr	r3, [pc, #532]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d005      	beq.n	80017aa <HAL_RCC_OscConfig+0x31e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b80      	cmp	r3, #128	; 0x80
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e296      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017aa:	f7ff fb47 	bl	8000e3c <HAL_GetREVID>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d817      	bhi.n	80017e8 <HAL_RCC_OscConfig+0x35c>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d108      	bne.n	80017d2 <HAL_RCC_OscConfig+0x346>
 80017c0:	4b79      	ldr	r3, [pc, #484]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80017c8:	4a77      	ldr	r2, [pc, #476]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017ce:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017d0:	e075      	b.n	80018be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017d2:	4b75      	ldr	r3, [pc, #468]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	069b      	lsls	r3, r3, #26
 80017e0:	4971      	ldr	r1, [pc, #452]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e6:	e06a      	b.n	80018be <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	061b      	lsls	r3, r3, #24
 80017f6:	496c      	ldr	r1, [pc, #432]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017fc:	e05f      	b.n	80018be <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d042      	beq.n	800188c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001806:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a67      	ldr	r2, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800180c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001812:	f7ff fb07 	bl	8000e24 <HAL_GetTick>
 8001816:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800181a:	f7ff fb03 	bl	8000e24 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e255      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800182c:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f0      	beq.n	800181a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001838:	f7ff fb00 	bl	8000e3c <HAL_GetREVID>
 800183c:	4603      	mov	r3, r0
 800183e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001842:	4293      	cmp	r3, r2
 8001844:	d817      	bhi.n	8001876 <HAL_RCC_OscConfig+0x3ea>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a1b      	ldr	r3, [r3, #32]
 800184a:	2b20      	cmp	r3, #32
 800184c:	d108      	bne.n	8001860 <HAL_RCC_OscConfig+0x3d4>
 800184e:	4b56      	ldr	r3, [pc, #344]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001856:	4a54      	ldr	r2, [pc, #336]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001858:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800185c:	6053      	str	r3, [r2, #4]
 800185e:	e02e      	b.n	80018be <HAL_RCC_OscConfig+0x432>
 8001860:	4b51      	ldr	r3, [pc, #324]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	069b      	lsls	r3, r3, #26
 800186e:	494e      	ldr	r1, [pc, #312]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e023      	b.n	80018be <HAL_RCC_OscConfig+0x432>
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a1b      	ldr	r3, [r3, #32]
 8001882:	061b      	lsls	r3, r3, #24
 8001884:	4948      	ldr	r1, [pc, #288]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001886:	4313      	orrs	r3, r2
 8001888:	60cb      	str	r3, [r1, #12]
 800188a:	e018      	b.n	80018be <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff fac4 	bl	8000e24 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80018a0:	f7ff fac0 	bl	8000e24 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e212      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f0      	bne.n	80018a0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d036      	beq.n	8001938 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d019      	beq.n	8001906 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018d2:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80018d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d6:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018de:	f7ff faa1 	bl	8000e24 <HAL_GetTick>
 80018e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e6:	f7ff fa9d 	bl	8000e24 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e1ef      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 80018fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018fc:	f003 0302 	and.w	r3, r3, #2
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x45a>
 8001904:	e018      	b.n	8001938 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001906:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800190c:	f023 0301 	bic.w	r3, r3, #1
 8001910:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001912:	f7ff fa87 	bl	8000e24 <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800191a:	f7ff fa83 	bl	8000e24 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b02      	cmp	r3, #2
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e1d5      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800192e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0320 	and.w	r3, r3, #32
 8001940:	2b00      	cmp	r3, #0
 8001942:	d039      	beq.n	80019b8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d019      	beq.n	8001980 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800194c:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a15      	ldr	r2, [pc, #84]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001952:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001956:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001958:	f7ff fa64 	bl	8000e24 <HAL_GetTick>
 800195c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001960:	f7ff fa60 	bl	8000e24 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e1b2      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x4d4>
 800197e:	e01b      	b.n	80019b8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_RCC_OscConfig+0x51c>)
 8001986:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800198a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800198c:	f7ff fa4a 	bl	8000e24 <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001994:	f7ff fa46 	bl	8000e24 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d904      	bls.n	80019ac <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e198      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
 80019a6:	bf00      	nop
 80019a8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ac:	4ba3      	ldr	r3, [pc, #652]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ed      	bne.n	8001994 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8081 	beq.w	8001ac8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019c6:	4b9e      	ldr	r3, [pc, #632]	; (8001c40 <HAL_RCC_OscConfig+0x7b4>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a9d      	ldr	r2, [pc, #628]	; (8001c40 <HAL_RCC_OscConfig+0x7b4>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019d2:	f7ff fa27 	bl	8000e24 <HAL_GetTick>
 80019d6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80019da:	f7ff fa23 	bl	8000e24 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b64      	cmp	r3, #100	; 0x64
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e175      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019ec:	4b94      	ldr	r3, [pc, #592]	; (8001c40 <HAL_RCC_OscConfig+0x7b4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0f0      	beq.n	80019da <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d106      	bne.n	8001a0e <HAL_RCC_OscConfig+0x582>
 8001a00:	4b8e      	ldr	r3, [pc, #568]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a04:	4a8d      	ldr	r2, [pc, #564]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a0c:	e02d      	b.n	8001a6a <HAL_RCC_OscConfig+0x5de>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10c      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5a4>
 8001a16:	4b89      	ldr	r3, [pc, #548]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a1a:	4a88      	ldr	r2, [pc, #544]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6713      	str	r3, [r2, #112]	; 0x70
 8001a22:	4b86      	ldr	r3, [pc, #536]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a26:	4a85      	ldr	r2, [pc, #532]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a28:	f023 0304 	bic.w	r3, r3, #4
 8001a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2e:	e01c      	b.n	8001a6a <HAL_RCC_OscConfig+0x5de>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5c6>
 8001a38:	4b80      	ldr	r3, [pc, #512]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3c:	4a7f      	ldr	r2, [pc, #508]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	6713      	str	r3, [r2, #112]	; 0x70
 8001a44:	4b7d      	ldr	r3, [pc, #500]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a48:	4a7c      	ldr	r2, [pc, #496]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a4a:	f043 0301 	orr.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001a50:	e00b      	b.n	8001a6a <HAL_RCC_OscConfig+0x5de>
 8001a52:	4b7a      	ldr	r3, [pc, #488]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a56:	4a79      	ldr	r2, [pc, #484]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a5e:	4b77      	ldr	r3, [pc, #476]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	4a76      	ldr	r2, [pc, #472]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a64:	f023 0304 	bic.w	r3, r3, #4
 8001a68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d015      	beq.n	8001a9e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f9d7 	bl	8000e24 <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a78:	e00a      	b.n	8001a90 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff f9d3 	bl	8000e24 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e123      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a90:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0ee      	beq.n	8001a7a <HAL_RCC_OscConfig+0x5ee>
 8001a9c:	e014      	b.n	8001ac8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f9c1 	bl	8000e24 <HAL_GetTick>
 8001aa2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aa6:	f7ff f9bd 	bl	8000e24 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e10d      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001abc:	4b5f      	ldr	r3, [pc, #380]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001abe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 8102 	beq.w	8001cd6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ada:	2b18      	cmp	r3, #24
 8001adc:	f000 80bd 	beq.w	8001c5a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	f040 8095 	bne.w	8001c14 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001af0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff f995 	bl	8000e24 <HAL_GetTick>
 8001afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001afc:	e008      	b.n	8001b10 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7ff f991 	bl	8000e24 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d901      	bls.n	8001b10 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e0e3      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f0      	bne.n	8001afe <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b20:	4b48      	ldr	r3, [pc, #288]	; (8001c44 <HAL_RCC_OscConfig+0x7b8>)
 8001b22:	4013      	ands	r3, r2
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	4942      	ldr	r1, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	628b      	str	r3, [r1, #40]	; 0x28
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b44:	3b01      	subs	r3, #1
 8001b46:	025b      	lsls	r3, r3, #9
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	3b01      	subs	r3, #1
 8001b52:	041b      	lsls	r3, r3, #16
 8001b54:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001b58:	431a      	orrs	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001b66:	4935      	ldr	r1, [pc, #212]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001b6c:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	4a32      	ldr	r2, [pc, #200]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCC_OscConfig+0x7bc>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001b84:	00d2      	lsls	r2, r2, #3
 8001b86:	492d      	ldr	r1, [pc, #180]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	f023 020c 	bic.w	r2, r3, #12
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	4928      	ldr	r1, [pc, #160]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b9e:	4b27      	ldr	r3, [pc, #156]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f023 0202 	bic.w	r2, r3, #2
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4924      	ldr	r1, [pc, #144]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	4a1e      	ldr	r2, [pc, #120]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bcc:	4a1b      	ldr	r2, [pc, #108]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd8:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a15      	ldr	r2, [pc, #84]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff f91a 	bl	8000e24 <HAL_GetTick>
 8001bf0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf4:	f7ff f916 	bl	8000e24 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e068      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x768>
 8001c12:	e060      	b.n	8001cd6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c14:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_RCC_OscConfig+0x7b0>)
 8001c1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f900 	bl	8000e24 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c26:	e011      	b.n	8001c4c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f8fc 	bl	8000e24 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d90a      	bls.n	8001c4c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e04e      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
 8001c3a:	bf00      	nop
 8001c3c:	58024400 	.word	0x58024400
 8001c40:	58024800 	.word	0x58024800
 8001c44:	fffffc0c 	.word	0xfffffc0c
 8001c48:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x854>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e7      	bne.n	8001c28 <HAL_RCC_OscConfig+0x79c>
 8001c58:	e03d      	b.n	8001cd6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x854>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c60:	4b1f      	ldr	r3, [pc, #124]	; (8001ce0 <HAL_RCC_OscConfig+0x854>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d031      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d12a      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d122      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d11a      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	0a5b      	lsrs	r3, r3, #9
 8001ca0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d111      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	0c1b      	lsrs	r3, r3, #16
 8001cb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cba:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d108      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	0e1b      	lsrs	r3, r3, #24
 8001cc4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d001      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3730      	adds	r7, #48	; 0x30
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	58024400 	.word	0x58024400

08001ce4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e19c      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cf8:	4b8a      	ldr	r3, [pc, #552]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 030f 	and.w	r3, r3, #15
 8001d00:	683a      	ldr	r2, [r7, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d910      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d06:	4b87      	ldr	r3, [pc, #540]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 020f 	bic.w	r2, r3, #15
 8001d0e:	4985      	ldr	r1, [pc, #532]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d16:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	683a      	ldr	r2, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e184      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d010      	beq.n	8001d56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	4b7b      	ldr	r3, [pc, #492]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d908      	bls.n	8001d56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d44:	4b78      	ldr	r3, [pc, #480]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	4975      	ldr	r1, [pc, #468]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d010      	beq.n	8001d84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695a      	ldr	r2, [r3, #20]
 8001d66:	4b70      	ldr	r3, [pc, #448]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d908      	bls.n	8001d84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d72:	4b6d      	ldr	r3, [pc, #436]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	496a      	ldr	r1, [pc, #424]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d010      	beq.n	8001db2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	4b64      	ldr	r3, [pc, #400]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d908      	bls.n	8001db2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001da0:	4b61      	ldr	r3, [pc, #388]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	495e      	ldr	r1, [pc, #376]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0320 	and.w	r3, r3, #32
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d010      	beq.n	8001de0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69da      	ldr	r2, [r3, #28]
 8001dc2:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001dc4:	6a1b      	ldr	r3, [r3, #32]
 8001dc6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d908      	bls.n	8001de0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001dce:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	4953      	ldr	r1, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d010      	beq.n	8001e0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001df2:	699b      	ldr	r3, [r3, #24]
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d908      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dfc:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f023 020f 	bic.w	r2, r3, #15
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4947      	ldr	r1, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d055      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e1a:	4b43      	ldr	r3, [pc, #268]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	4940      	ldr	r1, [pc, #256]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e34:	4b3c      	ldr	r3, [pc, #240]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d121      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e0f6      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e4c:	4b36      	ldr	r3, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d115      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e0ea      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e64:	4b30      	ldr	r3, [pc, #192]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0de      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d101      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0d6      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e84:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f023 0207 	bic.w	r2, r3, #7
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4925      	ldr	r1, [pc, #148]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e96:	f7fe ffc5 	bl	8000e24 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f7fe ffc1 	bl	8000e24 <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0be      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb4:	4b1c      	ldr	r3, [pc, #112]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d1eb      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	4b14      	ldr	r3, [pc, #80]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d208      	bcs.n	8001ef4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 030f 	and.w	r3, r3, #15
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d214      	bcs.n	8001f2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	4906      	ldr	r1, [pc, #24]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <HAL_RCC_ClockConfig+0x240>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e086      	b.n	8002032 <HAL_RCC_ClockConfig+0x34e>
 8001f24:	52002000 	.word	0x52002000
 8001f28:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d010      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	4b3f      	ldr	r3, [pc, #252]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d208      	bcs.n	8001f5a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f48:	4b3c      	ldr	r3, [pc, #240]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4939      	ldr	r1, [pc, #228]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d010      	beq.n	8001f88 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	4b34      	ldr	r3, [pc, #208]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d208      	bcs.n	8001f88 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	492e      	ldr	r1, [pc, #184]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d010      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	4b28      	ldr	r3, [pc, #160]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d208      	bcs.n	8001fb6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	4922      	ldr	r1, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	69da      	ldr	r2, [r3, #28]
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d208      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4917      	ldr	r1, [pc, #92]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fe4:	f000 f89e 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b14      	ldr	r3, [pc, #80]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 030f 	and.w	r3, r3, #15
 8001ff4:	4912      	ldr	r1, [pc, #72]	; (8002040 <HAL_RCC_ClockConfig+0x35c>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8002000:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002002:	4b0e      	ldr	r3, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x358>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	4a0d      	ldr	r2, [pc, #52]	; (8002040 <HAL_RCC_ClockConfig+0x35c>)
 800200c:	5cd3      	ldrb	r3, [r2, r3]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	693a      	ldr	r2, [r7, #16]
 8002014:	fa22 f303 	lsr.w	r3, r2, r3
 8002018:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x360>)
 800201a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x364>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x368>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe feb2 	bl	8000d90 <HAL_InitTick>
 800202c:	4603      	mov	r3, r0
 800202e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002030:	7bfb      	ldrb	r3, [r7, #15]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	58024400 	.word	0x58024400
 8002040:	08004d64 	.word	0x08004d64
 8002044:	24000004 	.word	0x24000004
 8002048:	24000000 	.word	0x24000000
 800204c:	24000008 	.word	0x24000008

08002050 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b08c      	sub	sp, #48	; 0x30
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d12a      	bne.n	80020b8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002062:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 8002064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002068:	4a2b      	ldr	r2, [pc, #172]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002072:	4b29      	ldr	r3, [pc, #164]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 8002074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002080:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800208a:	2303      	movs	r3, #3
 800208c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002092:	2300      	movs	r3, #0
 8002094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	4619      	mov	r1, r3
 800209c:	481f      	ldr	r0, [pc, #124]	; (800211c <HAL_RCC_MCOConfig+0xcc>)
 800209e:	f7fe ffbd 	bl	800101c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80020a2:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	430b      	orrs	r3, r1
 80020b0:	4919      	ldr	r1, [pc, #100]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80020b6:	e02a      	b.n	800210e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80020b8:	4b17      	ldr	r3, [pc, #92]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020dc:	2302      	movs	r3, #2
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e0:	2303      	movs	r3, #3
 80020e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020e8:	2300      	movs	r3, #0
 80020ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80020ec:	f107 031c 	add.w	r3, r7, #28
 80020f0:	4619      	mov	r1, r3
 80020f2:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_RCC_MCOConfig+0xd0>)
 80020f4:	f7fe ff92 	bl	800101c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80020f8:	4b07      	ldr	r3, [pc, #28]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	01d9      	lsls	r1, r3, #7
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	430b      	orrs	r3, r1
 8002108:	4903      	ldr	r1, [pc, #12]	; (8002118 <HAL_RCC_MCOConfig+0xc8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	610b      	str	r3, [r1, #16]
}
 800210e:	bf00      	nop
 8002110:	3730      	adds	r7, #48	; 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	58024400 	.word	0x58024400
 800211c:	58020000 	.word	0x58020000
 8002120:	58020800 	.word	0x58020800

08002124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b089      	sub	sp, #36	; 0x24
 8002128:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212a:	4bb3      	ldr	r3, [pc, #716]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002132:	2b18      	cmp	r3, #24
 8002134:	f200 8155 	bhi.w	80023e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_RCC_GetSysClockFreq+0x1c>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	080021a5 	.word	0x080021a5
 8002144:	080023e3 	.word	0x080023e3
 8002148:	080023e3 	.word	0x080023e3
 800214c:	080023e3 	.word	0x080023e3
 8002150:	080023e3 	.word	0x080023e3
 8002154:	080023e3 	.word	0x080023e3
 8002158:	080023e3 	.word	0x080023e3
 800215c:	080023e3 	.word	0x080023e3
 8002160:	080021cb 	.word	0x080021cb
 8002164:	080023e3 	.word	0x080023e3
 8002168:	080023e3 	.word	0x080023e3
 800216c:	080023e3 	.word	0x080023e3
 8002170:	080023e3 	.word	0x080023e3
 8002174:	080023e3 	.word	0x080023e3
 8002178:	080023e3 	.word	0x080023e3
 800217c:	080023e3 	.word	0x080023e3
 8002180:	080021d1 	.word	0x080021d1
 8002184:	080023e3 	.word	0x080023e3
 8002188:	080023e3 	.word	0x080023e3
 800218c:	080023e3 	.word	0x080023e3
 8002190:	080023e3 	.word	0x080023e3
 8002194:	080023e3 	.word	0x080023e3
 8002198:	080023e3 	.word	0x080023e3
 800219c:	080023e3 	.word	0x080023e3
 80021a0:	080021d7 	.word	0x080021d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021a4:	4b94      	ldr	r3, [pc, #592]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d009      	beq.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80021b0:	4b91      	ldr	r3, [pc, #580]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	4a90      	ldr	r2, [pc, #576]	; (80023fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80021c2:	e111      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021c4:	4b8d      	ldr	r3, [pc, #564]	; (80023fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c6:	61bb      	str	r3, [r7, #24]
    break;
 80021c8:	e10e      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80021ca:	4b8d      	ldr	r3, [pc, #564]	; (8002400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021cc:	61bb      	str	r3, [r7, #24]
    break;
 80021ce:	e10b      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80021d0:	4b8c      	ldr	r3, [pc, #560]	; (8002404 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021d2:	61bb      	str	r3, [r7, #24]
    break;
 80021d4:	e108      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021d6:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80021e0:	4b85      	ldr	r3, [pc, #532]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021ec:	4b82      	ldr	r3, [pc, #520]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80021f6:	4b80      	ldr	r3, [pc, #512]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fa:	08db      	lsrs	r3, r3, #3
 80021fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	ee07 3a90 	vmov	s15, r3
 800220a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800220e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80e1 	beq.w	80023dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	2b02      	cmp	r3, #2
 800221e:	f000 8083 	beq.w	8002328 <HAL_RCC_GetSysClockFreq+0x204>
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2b02      	cmp	r3, #2
 8002226:	f200 80a1 	bhi.w	800236c <HAL_RCC_GetSysClockFreq+0x248>
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x114>
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d056      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002236:	e099      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002238:	4b6f      	ldr	r3, [pc, #444]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0320 	and.w	r3, r3, #32
 8002240:	2b00      	cmp	r3, #0
 8002242:	d02d      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002244:	4b6c      	ldr	r3, [pc, #432]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	4a6b      	ldr	r2, [pc, #428]	; (80023fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
 8002254:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	ee07 3a90 	vmov	s15, r3
 800225c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800226e:	4b62      	ldr	r3, [pc, #392]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800227e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002282:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002286:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800228a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800228e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002292:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800229e:	e087      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022aa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800240c <HAL_RCC_GetSysClockFreq+0x2e8>
 80022ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022b2:	4b51      	ldr	r3, [pc, #324]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022c6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002408 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80022e2:	e065      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ee:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002410 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fe:	ee07 3a90 	vmov	s15, r3
 8002302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002306:	ed97 6a02 	vldr	s12, [r7, #8]
 800230a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002408 <HAL_RCC_GetSysClockFreq+0x2e4>
 800230e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800231a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800231e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002322:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002326:	e043      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	ee07 3a90 	vmov	s15, r3
 800232e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002332:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002414 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800234a:	ed97 6a02 	vldr	s12, [r7, #8]
 800234e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800235a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800235e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002366:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800236a:	e021      	b.n	80023b0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002376:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002410 <HAL_RCC_GetSysClockFreq+0x2ec>
 800237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002392:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002408 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ae:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b4:	0a5b      	lsrs	r3, r3, #9
 80023b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023ba:	3301      	adds	r3, #1
 80023bc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	ee07 3a90 	vmov	s15, r3
 80023c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80023cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d4:	ee17 3a90 	vmov	r3, s15
 80023d8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80023da:	e005      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	61bb      	str	r3, [r7, #24]
    break;
 80023e0:	e002      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80023e2:	4b07      	ldr	r3, [pc, #28]	; (8002400 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023e4:	61bb      	str	r3, [r7, #24]
    break;
 80023e6:	bf00      	nop
  }

  return sysclockfreq;
 80023e8:	69bb      	ldr	r3, [r7, #24]
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	; 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	58024400 	.word	0x58024400
 80023fc:	03d09000 	.word	0x03d09000
 8002400:	003d0900 	.word	0x003d0900
 8002404:	017d7840 	.word	0x017d7840
 8002408:	46000000 	.word	0x46000000
 800240c:	4c742400 	.word	0x4c742400
 8002410:	4a742400 	.word	0x4a742400
 8002414:	4bbebc20 	.word	0x4bbebc20

08002418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800241e:	f7ff fe81 	bl	8002124 <HAL_RCC_GetSysClockFreq>
 8002422:	4602      	mov	r2, r0
 8002424:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_RCC_GetHCLKFreq+0x50>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 030f 	and.w	r3, r3, #15
 800242e:	490f      	ldr	r1, [pc, #60]	; (800246c <HAL_RCC_GetHCLKFreq+0x54>)
 8002430:	5ccb      	ldrb	r3, [r1, r3]
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	fa22 f303 	lsr.w	r3, r2, r3
 800243a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_RCC_GetHCLKFreq+0x50>)
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_GetHCLKFreq+0x54>)
 8002446:	5cd3      	ldrb	r3, [r2, r3]
 8002448:	f003 031f 	and.w	r3, r3, #31
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fa22 f303 	lsr.w	r3, r2, r3
 8002452:	4a07      	ldr	r2, [pc, #28]	; (8002470 <HAL_RCC_GetHCLKFreq+0x58>)
 8002454:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800245c:	4b04      	ldr	r3, [pc, #16]	; (8002470 <HAL_RCC_GetHCLKFreq+0x58>)
 800245e:	681b      	ldr	r3, [r3, #0]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	58024400 	.word	0x58024400
 800246c:	08004d64 	.word	0x08004d64
 8002470:	24000004 	.word	0x24000004
 8002474:	24000000 	.word	0x24000000

08002478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800247c:	f7ff ffcc 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	4b06      	ldr	r3, [pc, #24]	; (800249c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	091b      	lsrs	r3, r3, #4
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	4904      	ldr	r1, [pc, #16]	; (80024a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002498:	4618      	mov	r0, r3
 800249a:	bd80      	pop	{r7, pc}
 800249c:	58024400 	.word	0x58024400
 80024a0:	08004d64 	.word	0x08004d64

080024a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024a8:	f7ff ffb6 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	58024400 	.word	0x58024400
 80024cc:	08004d64 	.word	0x08004d64

080024d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024d8:	2300      	movs	r3, #0
 80024da:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024dc:	2300      	movs	r3, #0
 80024de:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d03f      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024f4:	d02a      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80024f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024fa:	d824      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80024fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002500:	d018      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002506:	d81e      	bhi.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800250c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002510:	d007      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002512:	e018      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002514:	4bab      	ldr	r3, [pc, #684]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	4aaa      	ldr	r2, [pc, #680]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800251a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002520:	e015      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3304      	adds	r3, #4
 8002526:	2102      	movs	r1, #2
 8002528:	4618      	mov	r0, r3
 800252a:	f001 f9ff 	bl	800392c <RCCEx_PLL2_Config>
 800252e:	4603      	mov	r3, r0
 8002530:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002532:	e00c      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3324      	adds	r3, #36	; 0x24
 8002538:	2102      	movs	r1, #2
 800253a:	4618      	mov	r0, r3
 800253c:	f001 faa8 	bl	8003a90 <RCCEx_PLL3_Config>
 8002540:	4603      	mov	r3, r0
 8002542:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002544:	e003      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	75fb      	strb	r3, [r7, #23]
      break;
 800254a:	e000      	b.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800254c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800254e:	7dfb      	ldrb	r3, [r7, #23]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002554:	4b9b      	ldr	r3, [pc, #620]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002560:	4998      	ldr	r1, [pc, #608]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002562:	4313      	orrs	r3, r2
 8002564:	650b      	str	r3, [r1, #80]	; 0x50
 8002566:	e001      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d03d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	2b04      	cmp	r3, #4
 800257e:	d826      	bhi.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	0800259d 	.word	0x0800259d
 800258c:	080025ab 	.word	0x080025ab
 8002590:	080025bd 	.word	0x080025bd
 8002594:	080025d5 	.word	0x080025d5
 8002598:	080025d5 	.word	0x080025d5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800259c:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	4a88      	ldr	r2, [pc, #544]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025a8:	e015      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f001 f9bb 	bl	800392c <RCCEx_PLL2_Config>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025ba:	e00c      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3324      	adds	r3, #36	; 0x24
 80025c0:	2100      	movs	r1, #0
 80025c2:	4618      	mov	r0, r3
 80025c4:	f001 fa64 	bl	8003a90 <RCCEx_PLL3_Config>
 80025c8:	4603      	mov	r3, r0
 80025ca:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80025cc:	e003      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	75fb      	strb	r3, [r7, #23]
      break;
 80025d2:	e000      	b.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80025d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80025d6:	7dfb      	ldrb	r3, [r7, #23]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d109      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025dc:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e0:	f023 0207 	bic.w	r2, r3, #7
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	4976      	ldr	r1, [pc, #472]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	650b      	str	r3, [r1, #80]	; 0x50
 80025ee:	e001      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025f0:	7dfb      	ldrb	r3, [r7, #23]
 80025f2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d042      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002608:	d02b      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800260a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260e:	d825      	bhi.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002610:	2bc0      	cmp	r3, #192	; 0xc0
 8002612:	d028      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002614:	2bc0      	cmp	r3, #192	; 0xc0
 8002616:	d821      	bhi.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002618:	2b80      	cmp	r3, #128	; 0x80
 800261a:	d016      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800261c:	2b80      	cmp	r3, #128	; 0x80
 800261e:	d81d      	bhi.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002624:	2b40      	cmp	r3, #64	; 0x40
 8002626:	d007      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002628:	e018      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262a:	4b66      	ldr	r3, [pc, #408]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800262e:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002636:	e017      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	3304      	adds	r3, #4
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f974 	bl	800392c <RCCEx_PLL2_Config>
 8002644:	4603      	mov	r3, r0
 8002646:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002648:	e00e      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3324      	adds	r3, #36	; 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fa1d 	bl	8003a90 <RCCEx_PLL3_Config>
 8002656:	4603      	mov	r3, r0
 8002658:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800265a:	e005      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	75fb      	strb	r3, [r7, #23]
      break;
 8002660:	e002      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002662:	bf00      	nop
 8002664:	e000      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002666:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002668:	7dfb      	ldrb	r3, [r7, #23]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800266e:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002672:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	4952      	ldr	r1, [pc, #328]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800267c:	4313      	orrs	r3, r2
 800267e:	650b      	str	r3, [r1, #80]	; 0x50
 8002680:	e001      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d049      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002698:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800269c:	d030      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800269e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026a2:	d82a      	bhi.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026a8:	d02c      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80026aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80026ae:	d824      	bhi.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026b4:	d018      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80026b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ba:	d81e      	bhi.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80026c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026c4:	d007      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80026c6:	e018      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026c8:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	4a3d      	ldr	r2, [pc, #244]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026d4:	e017      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	2100      	movs	r1, #0
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 f925 	bl	800392c <RCCEx_PLL2_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80026e6:	e00e      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3324      	adds	r3, #36	; 0x24
 80026ec:	2100      	movs	r1, #0
 80026ee:	4618      	mov	r0, r3
 80026f0:	f001 f9ce 	bl	8003a90 <RCCEx_PLL3_Config>
 80026f4:	4603      	mov	r3, r0
 80026f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026f8:	e005      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
      break;
 80026fe:	e002      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002700:	bf00      	nop
 8002702:	e000      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002704:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002706:	7dfb      	ldrb	r3, [r7, #23]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800271a:	492a      	ldr	r1, [pc, #168]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	658b      	str	r3, [r1, #88]	; 0x58
 8002720:	e001      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002722:	7dfb      	ldrb	r3, [r7, #23]
 8002724:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800272e:	2b00      	cmp	r3, #0
 8002730:	d04c      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273c:	d030      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800273e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002742:	d82a      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002744:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002748:	d02c      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800274a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800274e:	d824      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002754:	d018      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002756:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275a:	d81e      	bhi.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002760:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002764:	d007      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002766:	e018      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002768:	4b16      	ldr	r3, [pc, #88]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276c:	4a15      	ldr	r2, [pc, #84]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002774:	e017      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3304      	adds	r3, #4
 800277a:	2100      	movs	r1, #0
 800277c:	4618      	mov	r0, r3
 800277e:	f001 f8d5 	bl	800392c <RCCEx_PLL2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002786:	e00e      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	3324      	adds	r3, #36	; 0x24
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 f97e 	bl	8003a90 <RCCEx_PLL3_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002798:	e005      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	75fb      	strb	r3, [r7, #23]
      break;
 800279e:	e002      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80027a0:	bf00      	nop
 80027a2:	e000      	b.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80027a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027a6:	7dfb      	ldrb	r3, [r7, #23]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80027ac:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80027ba:	4902      	ldr	r1, [pc, #8]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	658b      	str	r3, [r1, #88]	; 0x58
 80027c0:	e004      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80027c2:	bf00      	nop
 80027c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d032      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	2b30      	cmp	r3, #48	; 0x30
 80027de:	d01c      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d817      	bhi.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d00c      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80027e8:	2b20      	cmp	r3, #32
 80027ea:	d813      	bhi.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d016      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d10f      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f4:	4bb1      	ldr	r3, [pc, #708]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	4ab0      	ldr	r2, [pc, #704]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80027fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002800:	e00e      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3304      	adds	r3, #4
 8002806:	2102      	movs	r1, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f001 f88f 	bl	800392c <RCCEx_PLL2_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002812:	e005      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	75fb      	strb	r3, [r7, #23]
      break;
 8002818:	e002      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800281a:	bf00      	nop
 800281c:	e000      	b.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800281e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002820:	7dfb      	ldrb	r3, [r7, #23]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d109      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002826:	4ba5      	ldr	r3, [pc, #660]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002832:	49a2      	ldr	r1, [pc, #648]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002834:	4313      	orrs	r3, r2
 8002836:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002838:	e001      	b.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d047      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002852:	d030      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002854:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002858:	d82a      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800285a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800285e:	d02c      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002860:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002864:	d824      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800286a:	d018      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800286c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002870:	d81e      	bhi.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800287a:	d007      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800287c:	e018      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800287e:	4b8f      	ldr	r3, [pc, #572]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002882:	4a8e      	ldr	r2, [pc, #568]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800288a:	e017      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f001 f84a 	bl	800392c <RCCEx_PLL2_Config>
 8002898:	4603      	mov	r3, r0
 800289a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800289c:	e00e      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	2100      	movs	r1, #0
 80028a4:	4618      	mov	r0, r3
 80028a6:	f001 f8f3 	bl	8003a90 <RCCEx_PLL3_Config>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80028ae:	e005      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	75fb      	strb	r3, [r7, #23]
      break;
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80028ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028c2:	4b7e      	ldr	r3, [pc, #504]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ce:	497b      	ldr	r1, [pc, #492]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	650b      	str	r3, [r1, #80]	; 0x50
 80028d4:	e001      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d049      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ee:	d02e      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d828      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80028f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028fa:	d02a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80028fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002900:	d822      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002902:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002906:	d026      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002908:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800290c:	d81c      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800290e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002912:	d010      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002914:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002918:	d816      	bhi.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01d      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800291e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002922:	d111      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	2101      	movs	r1, #1
 800292a:	4618      	mov	r0, r3
 800292c:	f000 fffe 	bl	800392c <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002934:	e012      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	3324      	adds	r3, #36	; 0x24
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f8a7 	bl	8003a90 <RCCEx_PLL3_Config>
 8002942:	4603      	mov	r3, r0
 8002944:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002946:	e009      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	75fb      	strb	r3, [r7, #23]
      break;
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800294e:	bf00      	nop
 8002950:	e004      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002952:	bf00      	nop
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800295a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800295c:	7dfb      	ldrb	r3, [r7, #23]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002962:	4b56      	ldr	r3, [pc, #344]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002964:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002966:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296e:	4953      	ldr	r1, [pc, #332]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002970:	4313      	orrs	r3, r2
 8002972:	650b      	str	r3, [r1, #80]	; 0x50
 8002974:	e001      	b.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002976:	7dfb      	ldrb	r3, [r7, #23]
 8002978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d04b      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800298c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002990:	d02e      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002992:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002996:	d828      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d02a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800299e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a2:	d822      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029a8:	d026      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80029aa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80029ae:	d81c      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029b4:	d010      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d816      	bhi.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01d      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80029c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029c4:	d111      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 ffad 	bl	800392c <RCCEx_PLL2_Config>
 80029d2:	4603      	mov	r3, r0
 80029d4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029d6:	e012      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3324      	adds	r3, #36	; 0x24
 80029dc:	2101      	movs	r1, #1
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 f856 	bl	8003a90 <RCCEx_PLL3_Config>
 80029e4:	4603      	mov	r3, r0
 80029e6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80029e8:	e009      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	75fb      	strb	r3, [r7, #23]
      break;
 80029ee:	e006      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80029f0:	bf00      	nop
 80029f2:	e004      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80029f4:	bf00      	nop
 80029f6:	e002      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80029f8:	bf00      	nop
 80029fa:	e000      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80029fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10a      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a12:	492a      	ldr	r1, [pc, #168]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	658b      	str	r3, [r1, #88]	; 0x58
 8002a18:	e001      	b.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a1a:	7dfb      	ldrb	r3, [r7, #23]
 8002a1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d022      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00e      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a36:	d108      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	2101      	movs	r1, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 ff74 	bl	800392c <RCCEx_PLL2_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002a48:	e003      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4e:	e000      	b.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002a50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d109      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002a58:	4b18      	ldr	r3, [pc, #96]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a64:	4915      	ldr	r1, [pc, #84]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a6a:	e001      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d031      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a84:	d00e      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a8a:	d814      	bhi.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d017      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002a90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a94:	d10f      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a9a:	4a08      	ldr	r2, [pc, #32]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002aa2:	e00e      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3304      	adds	r3, #4
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 ff3e 	bl	800392c <RCCEx_PLL2_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	75fb      	strb	r3, [r7, #23]
      break;
 8002aba:	e002      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002abc:	58024400 	.word	0x58024400
      break;
 8002ac0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ac8:	4bbc      	ldr	r3, [pc, #752]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002acc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	49b9      	ldr	r1, [pc, #740]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	650b      	str	r3, [r1, #80]	; 0x50
 8002ada:	e001      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d032      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d81b      	bhi.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002af4:	a201      	add	r2, pc, #4	; (adr r2, 8002afc <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002afa:	bf00      	nop
 8002afc:	08002b33 	.word	0x08002b33
 8002b00:	08002b0d 	.word	0x08002b0d
 8002b04:	08002b1b 	.word	0x08002b1b
 8002b08:	08002b33 	.word	0x08002b33
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b0c:	4bab      	ldr	r3, [pc, #684]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	4aaa      	ldr	r2, [pc, #680]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b18:	e00c      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	2102      	movs	r1, #2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ff03 	bl	800392c <RCCEx_PLL2_Config>
 8002b26:	4603      	mov	r3, r0
 8002b28:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002b2a:	e003      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002b30:	e000      	b.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002b32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b34:	7dfb      	ldrb	r3, [r7, #23]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002b3a:	4ba0      	ldr	r3, [pc, #640]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	499d      	ldr	r1, [pc, #628]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b4c:	e001      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8086 	beq.w	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b60:	4b97      	ldr	r3, [pc, #604]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a96      	ldr	r2, [pc, #600]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6c:	f7fe f95a 	bl	8000e24 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b72:	e009      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b74:	f7fe f956 	bl	8000e24 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b64      	cmp	r3, #100	; 0x64
 8002b80:	d902      	bls.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	75fb      	strb	r3, [r7, #23]
        break;
 8002b86:	e005      	b.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b88:	4b8d      	ldr	r3, [pc, #564]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002b94:	7dfb      	ldrb	r3, [r7, #23]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d166      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002b9a:	4b88      	ldr	r3, [pc, #544]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002b9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ba4:	4053      	eors	r3, r2
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d013      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002bae:	4b83      	ldr	r3, [pc, #524]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bb6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bb8:	4b80      	ldr	r3, [pc, #512]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bbc:	4a7f      	ldr	r2, [pc, #508]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc4:	4b7d      	ldr	r3, [pc, #500]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc8:	4a7c      	ldr	r2, [pc, #496]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002bd0:	4a7a      	ldr	r2, [pc, #488]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002be0:	d115      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f91f 	bl	8000e24 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002be8:	e00b      	b.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7fe f91b 	bl	8000e24 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d902      	bls.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	75fb      	strb	r3, [r7, #23]
            break;
 8002c00:	e005      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c02:	4b6e      	ldr	r3, [pc, #440]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ed      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002c0e:	7dfb      	ldrb	r3, [r7, #23]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d126      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c22:	d10d      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002c24:	4b65      	ldr	r3, [pc, #404]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c32:	0919      	lsrs	r1, r3, #4
 8002c34:	4b63      	ldr	r3, [pc, #396]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	4960      	ldr	r1, [pc, #384]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	610b      	str	r3, [r1, #16]
 8002c3e:	e005      	b.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002c40:	4b5e      	ldr	r3, [pc, #376]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	4a5d      	ldr	r2, [pc, #372]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c4a:	6113      	str	r3, [r2, #16]
 8002c4c:	4b5b      	ldr	r3, [pc, #364]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5a:	4958      	ldr	r1, [pc, #352]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	670b      	str	r3, [r1, #112]	; 0x70
 8002c60:	e004      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	75bb      	strb	r3, [r7, #22]
 8002c66:	e001      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7dfb      	ldrb	r3, [r7, #23]
 8002c6a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d07e      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c7c:	2b28      	cmp	r3, #40	; 0x28
 8002c7e:	d867      	bhi.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002c80:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c86:	bf00      	nop
 8002c88:	08002d57 	.word	0x08002d57
 8002c8c:	08002d51 	.word	0x08002d51
 8002c90:	08002d51 	.word	0x08002d51
 8002c94:	08002d51 	.word	0x08002d51
 8002c98:	08002d51 	.word	0x08002d51
 8002c9c:	08002d51 	.word	0x08002d51
 8002ca0:	08002d51 	.word	0x08002d51
 8002ca4:	08002d51 	.word	0x08002d51
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002d51 	.word	0x08002d51
 8002cb0:	08002d51 	.word	0x08002d51
 8002cb4:	08002d51 	.word	0x08002d51
 8002cb8:	08002d51 	.word	0x08002d51
 8002cbc:	08002d51 	.word	0x08002d51
 8002cc0:	08002d51 	.word	0x08002d51
 8002cc4:	08002d51 	.word	0x08002d51
 8002cc8:	08002d3f 	.word	0x08002d3f
 8002ccc:	08002d51 	.word	0x08002d51
 8002cd0:	08002d51 	.word	0x08002d51
 8002cd4:	08002d51 	.word	0x08002d51
 8002cd8:	08002d51 	.word	0x08002d51
 8002cdc:	08002d51 	.word	0x08002d51
 8002ce0:	08002d51 	.word	0x08002d51
 8002ce4:	08002d51 	.word	0x08002d51
 8002ce8:	08002d57 	.word	0x08002d57
 8002cec:	08002d51 	.word	0x08002d51
 8002cf0:	08002d51 	.word	0x08002d51
 8002cf4:	08002d51 	.word	0x08002d51
 8002cf8:	08002d51 	.word	0x08002d51
 8002cfc:	08002d51 	.word	0x08002d51
 8002d00:	08002d51 	.word	0x08002d51
 8002d04:	08002d51 	.word	0x08002d51
 8002d08:	08002d57 	.word	0x08002d57
 8002d0c:	08002d51 	.word	0x08002d51
 8002d10:	08002d51 	.word	0x08002d51
 8002d14:	08002d51 	.word	0x08002d51
 8002d18:	08002d51 	.word	0x08002d51
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d51 	.word	0x08002d51
 8002d24:	08002d51 	.word	0x08002d51
 8002d28:	08002d57 	.word	0x08002d57
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 fdfa 	bl	800392c <RCCEx_PLL2_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d3c:	e00c      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3324      	adds	r3, #36	; 0x24
 8002d42:	2101      	movs	r1, #1
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fea3 	bl	8003a90 <RCCEx_PLL3_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002d4e:	e003      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	75fb      	strb	r3, [r7, #23]
      break;
 8002d54:	e000      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d109      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002d5e:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d62:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6a:	4914      	ldr	r1, [pc, #80]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	654b      	str	r3, [r1, #84]	; 0x54
 8002d70:	e001      	b.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d03e      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d827      	bhi.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002de1 	.word	0x08002de1
 8002d94:	08002da9 	.word	0x08002da9
 8002d98:	08002dc9 	.word	0x08002dc9
 8002d9c:	08002de1 	.word	0x08002de1
 8002da0:	08002de1 	.word	0x08002de1
 8002da4:	08002de1 	.word	0x08002de1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fdbc 	bl	800392c <RCCEx_PLL2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002db8:	e013      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002dba:	bf00      	nop
 8002dbc:	58024400 	.word	0x58024400
 8002dc0:	58024800 	.word	0x58024800
 8002dc4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	2101      	movs	r1, #1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 fe5e 	bl	8003a90 <RCCEx_PLL3_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002dd8:	e003      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8002dde:	e000      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002de0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002de2:	7dfb      	ldrb	r3, [r7, #23]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d109      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002de8:	4b9f      	ldr	r3, [pc, #636]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dec:	f023 0207 	bic.w	r2, r3, #7
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df4:	499c      	ldr	r1, [pc, #624]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	654b      	str	r3, [r1, #84]	; 0x54
 8002dfa:	e001      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d039      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e12:	2b05      	cmp	r3, #5
 8002e14:	d820      	bhi.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002e16:	a201      	add	r2, pc, #4	; (adr r2, 8002e1c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1c:	08002e5f 	.word	0x08002e5f
 8002e20:	08002e35 	.word	0x08002e35
 8002e24:	08002e47 	.word	0x08002e47
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fd76 	bl	800392c <RCCEx_PLL2_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e44:	e00c      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	3324      	adds	r3, #36	; 0x24
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fe1f 	bl	8003a90 <RCCEx_PLL3_Config>
 8002e52:	4603      	mov	r3, r0
 8002e54:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002e56:	e003      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5c:	e000      	b.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e60:	7dfb      	ldrb	r3, [r7, #23]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e66:	4b80      	ldr	r3, [pc, #512]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6a:	f023 0207 	bic.w	r2, r3, #7
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e74:	497c      	ldr	r1, [pc, #496]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	658b      	str	r3, [r1, #88]	; 0x58
 8002e7a:	e001      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e7c:	7dfb      	ldrb	r3, [r7, #23]
 8002e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0320 	and.w	r3, r3, #32
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d04b      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e96:	d02e      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9c:	d828      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d02a      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d822      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002eaa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eae:	d026      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002eb0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002eb4:	d81c      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002eba:	d010      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec0:	d816      	bhi.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01d      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002ec6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eca:	d111      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f000 fd2a 	bl	800392c <RCCEx_PLL2_Config>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002edc:	e012      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3324      	adds	r3, #36	; 0x24
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 fdd3 	bl	8003a90 <RCCEx_PLL3_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002eee:	e009      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8002ef4:	e006      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002ef6:	bf00      	nop
 8002ef8:	e004      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002efa:	bf00      	nop
 8002efc:	e002      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002efe:	bf00      	nop
 8002f00:	e000      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002f02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f0a:	4b57      	ldr	r3, [pc, #348]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	4953      	ldr	r1, [pc, #332]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	654b      	str	r3, [r1, #84]	; 0x54
 8002f1e:	e001      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f20:	7dfb      	ldrb	r3, [r7, #23]
 8002f22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d04b      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f3a:	d02e      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8002f3c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002f40:	d828      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002f42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f46:	d02a      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xace>
 8002f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f4c:	d822      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f52:	d026      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8002f54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f58:	d81c      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d010      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8002f60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f64:	d816      	bhi.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01d      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6e:	d111      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3304      	adds	r3, #4
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 fcd8 	bl	800392c <RCCEx_PLL2_Config>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f80:	e012      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3324      	adds	r3, #36	; 0x24
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fd81 	bl	8003a90 <RCCEx_PLL3_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002f92:	e009      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
      break;
 8002f98:	e006      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e004      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8002fa6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10a      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fae:	4b2e      	ldr	r3, [pc, #184]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fbc:	492a      	ldr	r1, [pc, #168]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	658b      	str	r3, [r1, #88]	; 0x58
 8002fc2:	e001      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d04d      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002fda:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fde:	d02e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8002fe0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002fe4:	d828      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fea:	d02a      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8002fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff0:	d822      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002ff2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ff6:	d026      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8002ff8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ffc:	d81c      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8002ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003002:	d010      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003004:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003008:	d816      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800300a:	2b00      	cmp	r3, #0
 800300c:	d01d      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800300e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fc86 	bl	800392c <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003024:	e012      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fd2f 	bl	8003a90 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003036:	e009      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e006      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800303e:	bf00      	nop
 8003040:	e004      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003042:	bf00      	nop
 8003044:	e002      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003046:	bf00      	nop
 8003048:	e000      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800304a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800304c:	7dfb      	ldrb	r3, [r7, #23]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10c      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003052:	4b05      	ldr	r3, [pc, #20]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003060:	4901      	ldr	r1, [pc, #4]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003062:	4313      	orrs	r3, r2
 8003064:	658b      	str	r3, [r1, #88]	; 0x58
 8003066:	e003      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003068:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800306c:	7dfb      	ldrb	r3, [r7, #23]
 800306e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003086:	d10a      	bne.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3324      	adds	r3, #36	; 0x24
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fcfe 	bl	8003a90 <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800309e:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	4988      	ldr	r1, [pc, #544]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030c8:	d10a      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3324      	adds	r3, #36	; 0x24
 80030ce:	2102      	movs	r1, #2
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fcdd 	bl	8003a90 <RCCEx_PLL3_Config>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030ee:	4978      	ldr	r1, [pc, #480]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d034      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003106:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800310a:	d01d      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800310c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003110:	d817      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311a:	d009      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800311c:	e011      	b.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	2100      	movs	r1, #0
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fc01 	bl	800392c <RCCEx_PLL2_Config>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800312e:	e00c      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3324      	adds	r3, #36	; 0x24
 8003134:	2102      	movs	r1, #2
 8003136:	4618      	mov	r0, r3
 8003138:	f000 fcaa 	bl	8003a90 <RCCEx_PLL3_Config>
 800313c:	4603      	mov	r3, r0
 800313e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003140:	e003      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	75fb      	strb	r3, [r7, #23]
      break;
 8003146:	e000      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003148:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314a:	7dfb      	ldrb	r3, [r7, #23]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10a      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003150:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800315e:	495c      	ldr	r1, [pc, #368]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003160:	4313      	orrs	r3, r2
 8003162:	658b      	str	r3, [r1, #88]	; 0x58
 8003164:	e001      	b.n	800316a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003166:	7dfb      	ldrb	r3, [r7, #23]
 8003168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d033      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003180:	d01c      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003182:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003186:	d816      	bhi.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003188:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800318c:	d003      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800318e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003192:	d007      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003194:	e00f      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003196:	4b4e      	ldr	r3, [pc, #312]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319a:	4a4d      	ldr	r2, [pc, #308]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800319c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80031a2:	e00c      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3324      	adds	r3, #36	; 0x24
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 fc70 	bl	8003a90 <RCCEx_PLL3_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80031b4:	e003      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
      break;
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80031bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031be:	7dfb      	ldrb	r3, [r7, #23]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10a      	bne.n	80031da <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	493f      	ldr	r1, [pc, #252]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	654b      	str	r3, [r1, #84]	; 0x54
 80031d8:	e001      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d029      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d007      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80031f8:	e00f      	b.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031fa:	4b35      	ldr	r3, [pc, #212]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	4a34      	ldr	r2, [pc, #208]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003204:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003206:	e00b      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	2102      	movs	r1, #2
 800320e:	4618      	mov	r0, r3
 8003210:	f000 fb8c 	bl	800392c <RCCEx_PLL2_Config>
 8003214:	4603      	mov	r3, r0
 8003216:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003218:	e002      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	75fb      	strb	r3, [r7, #23]
      break;
 800321e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003220:	7dfb      	ldrb	r3, [r7, #23]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003232:	4927      	ldr	r1, [pc, #156]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003234:	4313      	orrs	r3, r2
 8003236:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003238:	e001      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	2102      	movs	r1, #2
 8003250:	4618      	mov	r0, r3
 8003252:	f000 fc1d 	bl	8003a90 <RCCEx_PLL3_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d035      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003276:	d017      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800327c:	d811      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800327e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003282:	d013      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003288:	d80b      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d010      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800328e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003292:	d106      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003294:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80032a0:	e007      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	75fb      	strb	r3, [r7, #23]
      break;
 80032a6:	e004      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80032a8:	bf00      	nop
 80032aa:	e002      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80032b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4902      	ldr	r1, [pc, #8]	; (80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	654b      	str	r3, [r1, #84]	; 0x54
 80032cc:	e004      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032e4:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80032e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f0:	492e      	ldr	r1, [pc, #184]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003302:	4b2a      	ldr	r3, [pc, #168]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003310:	4926      	ldr	r1, [pc, #152]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d008      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003322:	4b22      	ldr	r3, [pc, #136]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003326:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800332e:	491f      	ldr	r1, [pc, #124]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003330:	4313      	orrs	r3, r2
 8003332:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00d      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	4a19      	ldr	r2, [pc, #100]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003346:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800334a:	6113      	str	r3, [r2, #16]
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003356:	4915      	ldr	r1, [pc, #84]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003358:	4313      	orrs	r3, r2
 800335a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	da08      	bge.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003368:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d009      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003386:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003390:	4906      	ldr	r1, [pc, #24]	; (80033ac <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003392:	4313      	orrs	r3, r2
 8003394:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003396:	7dbb      	ldrb	r3, [r7, #22]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3718      	adds	r7, #24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	58024400 	.word	0x58024400

080033b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80033b4:	f7ff f830 	bl	8002418 <HAL_RCC_GetHCLKFreq>
 80033b8:	4602      	mov	r2, r0
 80033ba:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	4904      	ldr	r1, [pc, #16]	; (80033d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80033c6:	5ccb      	ldrb	r3, [r1, r3]
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	58024400 	.word	0x58024400
 80033d8:	08004d64 	.word	0x08004d64

080033dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80033dc:	b480      	push	{r7}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80033e4:	4ba1      	ldr	r3, [pc, #644]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80033ee:	4b9f      	ldr	r3, [pc, #636]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	0b1b      	lsrs	r3, r3, #12
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80033fa:	4b9c      	ldr	r3, [pc, #624]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	091b      	lsrs	r3, r3, #4
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003406:	4b99      	ldr	r3, [pc, #612]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800340a:	08db      	lsrs	r3, r3, #3
 800340c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	fb02 f303 	mul.w	r3, r2, r3
 8003416:	ee07 3a90 	vmov	s15, r3
 800341a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800341e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8111 	beq.w	800364c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b02      	cmp	r3, #2
 800342e:	f000 8083 	beq.w	8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b02      	cmp	r3, #2
 8003436:	f200 80a1 	bhi.w	800357c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d056      	beq.n	80034f4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003446:	e099      	b.n	800357c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003448:	4b88      	ldr	r3, [pc, #544]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	d02d      	beq.n	80034b0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003454:	4b85      	ldr	r3, [pc, #532]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	08db      	lsrs	r3, r3, #3
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	4a84      	ldr	r2, [pc, #528]	; (8003670 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	ee07 3a90 	vmov	s15, r3
 800346c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800347e:	4b7b      	ldr	r3, [pc, #492]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003486:	ee07 3a90 	vmov	s15, r3
 800348a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800348e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003492:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800349e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80034ae:	e087      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	ee07 3a90 	vmov	s15, r3
 80034b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003678 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80034be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034c2:	4b6a      	ldr	r3, [pc, #424]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ca:	ee07 3a90 	vmov	s15, r3
 80034ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80034d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80034da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80034f2:	e065      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	ee07 3a90 	vmov	s15, r3
 80034fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800367c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003506:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350e:	ee07 3a90 	vmov	s15, r3
 8003512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003516:	ed97 6a03 	vldr	s12, [r7, #12]
 800351a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800351e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800352a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800352e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003532:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003536:	e043      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	ee07 3a90 	vmov	s15, r3
 800353e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003542:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003680 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800354a:	4b48      	ldr	r3, [pc, #288]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800354c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003552:	ee07 3a90 	vmov	s15, r3
 8003556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800355a:	ed97 6a03 	vldr	s12, [r7, #12]
 800355e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800356a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800356e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003576:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800357a:	e021      	b.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	ee07 3a90 	vmov	s15, r3
 8003582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003586:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800367c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800358a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358e:	4b37      	ldr	r3, [pc, #220]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359e:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003674 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035be:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80035c0:	4b2a      	ldr	r3, [pc, #168]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	0a5b      	lsrs	r3, r3, #9
 80035c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035ca:	ee07 3a90 	vmov	s15, r3
 80035ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80035d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80035da:	edd7 6a07 	vldr	s13, [r7, #28]
 80035de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035e6:	ee17 2a90 	vmov	r2, s15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80035ee:	4b1f      	ldr	r3, [pc, #124]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f2:	0c1b      	lsrs	r3, r3, #16
 80035f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003604:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003608:	edd7 6a07 	vldr	s13, [r7, #28]
 800360c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003614:	ee17 2a90 	vmov	r2, s15
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800361c:	4b13      	ldr	r3, [pc, #76]	; (800366c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	0e1b      	lsrs	r3, r3, #24
 8003622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003626:	ee07 3a90 	vmov	s15, r3
 800362a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800362e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003632:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003636:	edd7 6a07 	vldr	s13, [r7, #28]
 800363a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800363e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003642:	ee17 2a90 	vmov	r2, s15
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800364a:	e008      	b.n	800365e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
}
 800365e:	bf00      	nop
 8003660:	3724      	adds	r7, #36	; 0x24
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
 8003670:	03d09000 	.word	0x03d09000
 8003674:	46000000 	.word	0x46000000
 8003678:	4c742400 	.word	0x4c742400
 800367c:	4a742400 	.word	0x4a742400
 8003680:	4bbebc20 	.word	0x4bbebc20

08003684 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003684:	b480      	push	{r7}
 8003686:	b089      	sub	sp, #36	; 0x24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800368c:	4ba1      	ldr	r3, [pc, #644]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003696:	4b9f      	ldr	r3, [pc, #636]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369a:	0d1b      	lsrs	r3, r3, #20
 800369c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036a0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80036a2:	4b9c      	ldr	r3, [pc, #624]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a6:	0a1b      	lsrs	r3, r3, #8
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80036ae:	4b99      	ldr	r3, [pc, #612]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b2:	08db      	lsrs	r3, r3, #3
 80036b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	fb02 f303 	mul.w	r3, r2, r3
 80036be:	ee07 3a90 	vmov	s15, r3
 80036c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 8111 	beq.w	80038f4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	f000 8083 	beq.w	80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	f200 80a1 	bhi.w	8003824 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d003      	beq.n	80036f0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d056      	beq.n	800379c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80036ee:	e099      	b.n	8003824 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02d      	beq.n	8003758 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036fc:	4b85      	ldr	r3, [pc, #532]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	f003 0303 	and.w	r3, r3, #3
 8003706:	4a84      	ldr	r2, [pc, #528]	; (8003918 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	ee07 3a90 	vmov	s15, r3
 800371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003726:	4b7b      	ldr	r3, [pc, #492]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800372e:	ee07 3a90 	vmov	s15, r3
 8003732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003736:	ed97 6a03 	vldr	s12, [r7, #12]
 800373a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800391c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800373e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800374a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003752:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003756:	e087      	b.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	ee07 3a90 	vmov	s15, r3
 800375e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003762:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003920 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003766:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800376a:	4b6a      	ldr	r3, [pc, #424]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003772:	ee07 3a90 	vmov	s15, r3
 8003776:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800377a:	ed97 6a03 	vldr	s12, [r7, #12]
 800377e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800391c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003782:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003786:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800378a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800378e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003792:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003796:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800379a:	e065      	b.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	ee07 3a90 	vmov	s15, r3
 80037a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003924 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80037aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ae:	4b59      	ldr	r3, [pc, #356]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037b6:	ee07 3a90 	vmov	s15, r3
 80037ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037be:	ed97 6a03 	vldr	s12, [r7, #12]
 80037c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800391c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80037c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037de:	e043      	b.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	ee07 3a90 	vmov	s15, r3
 80037e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003928 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80037ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037f2:	4b48      	ldr	r3, [pc, #288]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037fa:	ee07 3a90 	vmov	s15, r3
 80037fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003802:	ed97 6a03 	vldr	s12, [r7, #12]
 8003806:	eddf 5a45 	vldr	s11, [pc, #276]	; 800391c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800380a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800380e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800381a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800381e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003822:	e021      	b.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003924 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a03 	vldr	s12, [r7, #12]
 800384a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800391c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003866:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	0a5b      	lsrs	r3, r3, #9
 800386e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003872:	ee07 3a90 	vmov	s15, r3
 8003876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800387a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800387e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003882:	edd7 6a07 	vldr	s13, [r7, #28]
 8003886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800388a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388e:	ee17 2a90 	vmov	r2, s15
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003896:	4b1f      	ldr	r3, [pc, #124]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	0c1b      	lsrs	r3, r3, #16
 800389c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a0:	ee07 3a90 	vmov	s15, r3
 80038a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80038b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038bc:	ee17 2a90 	vmov	r2, s15
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80038c4:	4b13      	ldr	r3, [pc, #76]	; (8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	0e1b      	lsrs	r3, r3, #24
 80038ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ce:	ee07 3a90 	vmov	s15, r3
 80038d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038de:	edd7 6a07 	vldr	s13, [r7, #28]
 80038e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ea:	ee17 2a90 	vmov	r2, s15
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80038f2:	e008      	b.n	8003906 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	609a      	str	r2, [r3, #8]
}
 8003906:	bf00      	nop
 8003908:	3724      	adds	r7, #36	; 0x24
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	58024400 	.word	0x58024400
 8003918:	03d09000 	.word	0x03d09000
 800391c:	46000000 	.word	0x46000000
 8003920:	4c742400 	.word	0x4c742400
 8003924:	4a742400 	.word	0x4a742400
 8003928:	4bbebc20 	.word	0x4bbebc20

0800392c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800393a:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 800393c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b03      	cmp	r3, #3
 8003944:	d101      	bne.n	800394a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e099      	b.n	8003a7e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800394a:	4b4f      	ldr	r3, [pc, #316]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a4e      	ldr	r2, [pc, #312]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003950:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003954:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003956:	f7fd fa65 	bl	8000e24 <HAL_GetTick>
 800395a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800395c:	e008      	b.n	8003970 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800395e:	f7fd fa61 	bl	8000e24 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e086      	b.n	8003a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003970:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800397c:	4b42      	ldr	r3, [pc, #264]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 800397e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003980:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	031b      	lsls	r3, r3, #12
 800398a:	493f      	ldr	r1, [pc, #252]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 800398c:	4313      	orrs	r3, r2
 800398e:	628b      	str	r3, [r1, #40]	; 0x28
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	3b01      	subs	r3, #1
 8003996:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	3b01      	subs	r3, #1
 80039a0:	025b      	lsls	r3, r3, #9
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	431a      	orrs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	041b      	lsls	r3, r3, #16
 80039ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	061b      	lsls	r3, r3, #24
 80039bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80039c0:	4931      	ldr	r1, [pc, #196]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80039c6:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	492d      	ldr	r1, [pc, #180]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80039d8:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f023 0220 	bic.w	r2, r3, #32
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	4928      	ldr	r1, [pc, #160]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80039ea:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039f0:	f023 0310 	bic.w	r3, r3, #16
 80039f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 80039f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039fa:	4b24      	ldr	r3, [pc, #144]	; (8003a8c <RCCEx_PLL2_Config+0x160>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	69d2      	ldr	r2, [r2, #28]
 8003a02:	00d2      	lsls	r2, r2, #3
 8003a04:	4920      	ldr	r1, [pc, #128]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003a0a:	4b1f      	ldr	r3, [pc, #124]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	4a1e      	ldr	r2, [pc, #120]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a10:	f043 0310 	orr.w	r3, r3, #16
 8003a14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d106      	bne.n	8003a2a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003a1c:	4b1a      	ldr	r3, [pc, #104]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a28:	e00f      	b.n	8003a4a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d106      	bne.n	8003a3e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a34:	4a14      	ldr	r2, [pc, #80]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003a3c:	e005      	b.n	8003a4a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003a3e:	4b12      	ldr	r3, [pc, #72]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	4a11      	ldr	r2, [pc, #68]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a0e      	ldr	r2, [pc, #56]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a56:	f7fd f9e5 	bl	8000e24 <HAL_GetTick>
 8003a5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a5c:	e008      	b.n	8003a70 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a5e:	f7fd f9e1 	bl	8000e24 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e006      	b.n	8003a7e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <RCCEx_PLL2_Config+0x15c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0f0      	beq.n	8003a5e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	58024400 	.word	0x58024400
 8003a8c:	ffff0007 	.word	0xffff0007

08003a90 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a9e:	4b53      	ldr	r3, [pc, #332]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	f003 0303 	and.w	r3, r3, #3
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d101      	bne.n	8003aae <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e099      	b.n	8003be2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003aae:	4b4f      	ldr	r3, [pc, #316]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a4e      	ldr	r2, [pc, #312]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aba:	f7fd f9b3 	bl	8000e24 <HAL_GetTick>
 8003abe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ac0:	e008      	b.n	8003ad4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003ac2:	f7fd f9af 	bl	8000e24 <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e086      	b.n	8003be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003ad4:	4b45      	ldr	r3, [pc, #276]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003ae0:	4b42      	ldr	r3, [pc, #264]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	051b      	lsls	r3, r3, #20
 8003aee:	493f      	ldr	r1, [pc, #252]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	628b      	str	r3, [r1, #40]	; 0x28
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	025b      	lsls	r3, r3, #9
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	041b      	lsls	r3, r3, #16
 8003b12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	061b      	lsls	r3, r3, #24
 8003b20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003b24:	4931      	ldr	r1, [pc, #196]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003b2a:	4b30      	ldr	r3, [pc, #192]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	492d      	ldr	r1, [pc, #180]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003b3c:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b40:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	4928      	ldr	r1, [pc, #160]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003b4e:	4b27      	ldr	r3, [pc, #156]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4a26      	ldr	r2, [pc, #152]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5e:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <RCCEx_PLL3_Config+0x160>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	69d2      	ldr	r2, [r2, #28]
 8003b66:	00d2      	lsls	r2, r2, #3
 8003b68:	4920      	ldr	r1, [pc, #128]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	4a1e      	ldr	r2, [pc, #120]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003b80:	4b1a      	ldr	r3, [pc, #104]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b84:	4a19      	ldr	r2, [pc, #100]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b8c:	e00f      	b.n	8003bae <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d106      	bne.n	8003ba2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003b94:	4b15      	ldr	r3, [pc, #84]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003b9a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ba0:	e005      	b.n	8003bae <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba6:	4a11      	ldr	r2, [pc, #68]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003bae:	4b0f      	ldr	r3, [pc, #60]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a0e      	ldr	r2, [pc, #56]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bba:	f7fd f933 	bl	8000e24 <HAL_GetTick>
 8003bbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bc0:	e008      	b.n	8003bd4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bc2:	f7fd f92f 	bl	8000e24 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <RCCEx_PLL3_Config+0x15c>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	58024400 	.word	0x58024400
 8003bf0:	ffff0007 	.word	0xffff0007

08003bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e042      	b.n	8003c8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d106      	bne.n	8003c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7fc ffc3 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2224      	movs	r2, #36	; 0x24
 8003c22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0201 	bic.w	r2, r2, #1
 8003c34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f82c 	bl	8003c94 <UART_SetConfig>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d101      	bne.n	8003c46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e022      	b.n	8003c8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fd80 	bl	8004754 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f042 0201 	orr.w	r2, r2, #1
 8003c82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fe07 	bl	8004898 <UART_CheckIdleState>
 8003c8a:	4603      	mov	r3, r0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b08e      	sub	sp, #56	; 0x38
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69db      	ldr	r3, [r3, #28]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	4bbf      	ldr	r3, [pc, #764]	; (8003fc0 <UART_SetConfig+0x32c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68da      	ldr	r2, [r3, #12]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4ab5      	ldr	r2, [pc, #724]	; (8003fc4 <UART_SetConfig+0x330>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d004      	beq.n	8003cfe <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4bb0      	ldr	r3, [pc, #704]	; (8003fc8 <UART_SetConfig+0x334>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d18:	f023 010f 	bic.w	r1, r3, #15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4aa7      	ldr	r2, [pc, #668]	; (8003fcc <UART_SetConfig+0x338>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d176      	bne.n	8003e20 <UART_SetConfig+0x18c>
 8003d32:	4ba7      	ldr	r3, [pc, #668]	; (8003fd0 <UART_SetConfig+0x33c>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d3a:	2b28      	cmp	r3, #40	; 0x28
 8003d3c:	d86c      	bhi.n	8003e18 <UART_SetConfig+0x184>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0xb0>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003de9 	.word	0x08003de9
 8003d48:	08003e19 	.word	0x08003e19
 8003d4c:	08003e19 	.word	0x08003e19
 8003d50:	08003e19 	.word	0x08003e19
 8003d54:	08003e19 	.word	0x08003e19
 8003d58:	08003e19 	.word	0x08003e19
 8003d5c:	08003e19 	.word	0x08003e19
 8003d60:	08003e19 	.word	0x08003e19
 8003d64:	08003df1 	.word	0x08003df1
 8003d68:	08003e19 	.word	0x08003e19
 8003d6c:	08003e19 	.word	0x08003e19
 8003d70:	08003e19 	.word	0x08003e19
 8003d74:	08003e19 	.word	0x08003e19
 8003d78:	08003e19 	.word	0x08003e19
 8003d7c:	08003e19 	.word	0x08003e19
 8003d80:	08003e19 	.word	0x08003e19
 8003d84:	08003df9 	.word	0x08003df9
 8003d88:	08003e19 	.word	0x08003e19
 8003d8c:	08003e19 	.word	0x08003e19
 8003d90:	08003e19 	.word	0x08003e19
 8003d94:	08003e19 	.word	0x08003e19
 8003d98:	08003e19 	.word	0x08003e19
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e01 	.word	0x08003e01
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e19 	.word	0x08003e19
 8003db4:	08003e19 	.word	0x08003e19
 8003db8:	08003e19 	.word	0x08003e19
 8003dbc:	08003e19 	.word	0x08003e19
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e09 	.word	0x08003e09
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e19 	.word	0x08003e19
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e11 	.word	0x08003e11
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dee:	e222      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003df0:	2304      	movs	r3, #4
 8003df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003df6:	e21e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003df8:	2308      	movs	r3, #8
 8003dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003dfe:	e21a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e00:	2310      	movs	r3, #16
 8003e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e06:	e216      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e08:	2320      	movs	r3, #32
 8003e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e0e:	e212      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e10:	2340      	movs	r3, #64	; 0x40
 8003e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e16:	e20e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e1e:	e20a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a6b      	ldr	r2, [pc, #428]	; (8003fd4 <UART_SetConfig+0x340>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d130      	bne.n	8003e8c <UART_SetConfig+0x1f8>
 8003e2a:	4b69      	ldr	r3, [pc, #420]	; (8003fd0 <UART_SetConfig+0x33c>)
 8003e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	2b05      	cmp	r3, #5
 8003e34:	d826      	bhi.n	8003e84 <UART_SetConfig+0x1f0>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <UART_SetConfig+0x1a8>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e55 	.word	0x08003e55
 8003e40:	08003e5d 	.word	0x08003e5d
 8003e44:	08003e65 	.word	0x08003e65
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003e75 	.word	0x08003e75
 8003e50:	08003e7d 	.word	0x08003e7d
 8003e54:	2300      	movs	r3, #0
 8003e56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e5a:	e1ec      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e5c:	2304      	movs	r3, #4
 8003e5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e62:	e1e8      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e64:	2308      	movs	r3, #8
 8003e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e6a:	e1e4      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e72:	e1e0      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e74:	2320      	movs	r3, #32
 8003e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e7a:	e1dc      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e7c:	2340      	movs	r3, #64	; 0x40
 8003e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e82:	e1d8      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003e8a:	e1d4      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a51      	ldr	r2, [pc, #324]	; (8003fd8 <UART_SetConfig+0x344>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d130      	bne.n	8003ef8 <UART_SetConfig+0x264>
 8003e96:	4b4e      	ldr	r3, [pc, #312]	; (8003fd0 <UART_SetConfig+0x33c>)
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	2b05      	cmp	r3, #5
 8003ea0:	d826      	bhi.n	8003ef0 <UART_SetConfig+0x25c>
 8003ea2:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <UART_SetConfig+0x214>)
 8003ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea8:	08003ec1 	.word	0x08003ec1
 8003eac:	08003ec9 	.word	0x08003ec9
 8003eb0:	08003ed1 	.word	0x08003ed1
 8003eb4:	08003ed9 	.word	0x08003ed9
 8003eb8:	08003ee1 	.word	0x08003ee1
 8003ebc:	08003ee9 	.word	0x08003ee9
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ec6:	e1b6      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ec8:	2304      	movs	r3, #4
 8003eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ece:	e1b2      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ed6:	e1ae      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ed8:	2310      	movs	r3, #16
 8003eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ede:	e1aa      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ee0:	2320      	movs	r3, #32
 8003ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ee6:	e1a6      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ee8:	2340      	movs	r3, #64	; 0x40
 8003eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eee:	e1a2      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef6:	e19e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a37      	ldr	r2, [pc, #220]	; (8003fdc <UART_SetConfig+0x348>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d130      	bne.n	8003f64 <UART_SetConfig+0x2d0>
 8003f02:	4b33      	ldr	r3, [pc, #204]	; (8003fd0 <UART_SetConfig+0x33c>)
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b05      	cmp	r3, #5
 8003f0c:	d826      	bhi.n	8003f5c <UART_SetConfig+0x2c8>
 8003f0e:	a201      	add	r2, pc, #4	; (adr r2, 8003f14 <UART_SetConfig+0x280>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f2d 	.word	0x08003f2d
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	08003f3d 	.word	0x08003f3d
 8003f20:	08003f45 	.word	0x08003f45
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f32:	e180      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f34:	2304      	movs	r3, #4
 8003f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f3a:	e17c      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f42:	e178      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f44:	2310      	movs	r3, #16
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f4a:	e174      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f4c:	2320      	movs	r3, #32
 8003f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f52:	e170      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f54:	2340      	movs	r3, #64	; 0x40
 8003f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5a:	e16c      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f62:	e168      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <UART_SetConfig+0x34c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d142      	bne.n	8003ff4 <UART_SetConfig+0x360>
 8003f6e:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <UART_SetConfig+0x33c>)
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	2b05      	cmp	r3, #5
 8003f78:	d838      	bhi.n	8003fec <UART_SetConfig+0x358>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <UART_SetConfig+0x2ec>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003f99 	.word	0x08003f99
 8003f84:	08003fa1 	.word	0x08003fa1
 8003f88:	08003fa9 	.word	0x08003fa9
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f9e:	e14a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fa0:	2304      	movs	r3, #4
 8003fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fa6:	e146      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fae:	e142      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fb0:	2310      	movs	r3, #16
 8003fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fb6:	e13e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fb8:	2320      	movs	r3, #32
 8003fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fbe:	e13a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fc0:	cfff69f3 	.word	0xcfff69f3
 8003fc4:	58000c00 	.word	0x58000c00
 8003fc8:	11fff4ff 	.word	0x11fff4ff
 8003fcc:	40011000 	.word	0x40011000
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	40004400 	.word	0x40004400
 8003fd8:	40004800 	.word	0x40004800
 8003fdc:	40004c00 	.word	0x40004c00
 8003fe0:	40005000 	.word	0x40005000
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fea:	e124      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003fec:	2380      	movs	r3, #128	; 0x80
 8003fee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff2:	e120      	b.n	8004236 <UART_SetConfig+0x5a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4acc      	ldr	r2, [pc, #816]	; (800432c <UART_SetConfig+0x698>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d176      	bne.n	80040ec <UART_SetConfig+0x458>
 8003ffe:	4bcc      	ldr	r3, [pc, #816]	; (8004330 <UART_SetConfig+0x69c>)
 8004000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004002:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004006:	2b28      	cmp	r3, #40	; 0x28
 8004008:	d86c      	bhi.n	80040e4 <UART_SetConfig+0x450>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <UART_SetConfig+0x37c>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	080040b5 	.word	0x080040b5
 8004014:	080040e5 	.word	0x080040e5
 8004018:	080040e5 	.word	0x080040e5
 800401c:	080040e5 	.word	0x080040e5
 8004020:	080040e5 	.word	0x080040e5
 8004024:	080040e5 	.word	0x080040e5
 8004028:	080040e5 	.word	0x080040e5
 800402c:	080040e5 	.word	0x080040e5
 8004030:	080040bd 	.word	0x080040bd
 8004034:	080040e5 	.word	0x080040e5
 8004038:	080040e5 	.word	0x080040e5
 800403c:	080040e5 	.word	0x080040e5
 8004040:	080040e5 	.word	0x080040e5
 8004044:	080040e5 	.word	0x080040e5
 8004048:	080040e5 	.word	0x080040e5
 800404c:	080040e5 	.word	0x080040e5
 8004050:	080040c5 	.word	0x080040c5
 8004054:	080040e5 	.word	0x080040e5
 8004058:	080040e5 	.word	0x080040e5
 800405c:	080040e5 	.word	0x080040e5
 8004060:	080040e5 	.word	0x080040e5
 8004064:	080040e5 	.word	0x080040e5
 8004068:	080040e5 	.word	0x080040e5
 800406c:	080040e5 	.word	0x080040e5
 8004070:	080040cd 	.word	0x080040cd
 8004074:	080040e5 	.word	0x080040e5
 8004078:	080040e5 	.word	0x080040e5
 800407c:	080040e5 	.word	0x080040e5
 8004080:	080040e5 	.word	0x080040e5
 8004084:	080040e5 	.word	0x080040e5
 8004088:	080040e5 	.word	0x080040e5
 800408c:	080040e5 	.word	0x080040e5
 8004090:	080040d5 	.word	0x080040d5
 8004094:	080040e5 	.word	0x080040e5
 8004098:	080040e5 	.word	0x080040e5
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	080040e5 	.word	0x080040e5
 80040a4:	080040e5 	.word	0x080040e5
 80040a8:	080040e5 	.word	0x080040e5
 80040ac:	080040e5 	.word	0x080040e5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e0bc      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c2:	e0b8      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e0b4      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e0b0      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040d4:	2320      	movs	r3, #32
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e0ac      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e0a8      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ea:	e0a4      	b.n	8004236 <UART_SetConfig+0x5a2>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a90      	ldr	r2, [pc, #576]	; (8004334 <UART_SetConfig+0x6a0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d130      	bne.n	8004158 <UART_SetConfig+0x4c4>
 80040f6:	4b8e      	ldr	r3, [pc, #568]	; (8004330 <UART_SetConfig+0x69c>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d826      	bhi.n	8004150 <UART_SetConfig+0x4bc>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x474>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	08004121 	.word	0x08004121
 800410c:	08004129 	.word	0x08004129
 8004110:	08004131 	.word	0x08004131
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	2300      	movs	r3, #0
 8004122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004126:	e086      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004128:	2304      	movs	r3, #4
 800412a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412e:	e082      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004130:	2308      	movs	r3, #8
 8004132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004136:	e07e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004138:	2310      	movs	r3, #16
 800413a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413e:	e07a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004140:	2320      	movs	r3, #32
 8004142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004146:	e076      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004148:	2340      	movs	r3, #64	; 0x40
 800414a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800414e:	e072      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004156:	e06e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a76      	ldr	r2, [pc, #472]	; (8004338 <UART_SetConfig+0x6a4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d130      	bne.n	80041c4 <UART_SetConfig+0x530>
 8004162:	4b73      	ldr	r3, [pc, #460]	; (8004330 <UART_SetConfig+0x69c>)
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	2b05      	cmp	r3, #5
 800416c:	d826      	bhi.n	80041bc <UART_SetConfig+0x528>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x4e0>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004195 	.word	0x08004195
 800417c:	0800419d 	.word	0x0800419d
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b5 	.word	0x080041b5
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004192:	e050      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419a:	e04c      	b.n	8004236 <UART_SetConfig+0x5a2>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a2:	e048      	b.n	8004236 <UART_SetConfig+0x5a2>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041aa:	e044      	b.n	8004236 <UART_SetConfig+0x5a2>
 80041ac:	2320      	movs	r3, #32
 80041ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b2:	e040      	b.n	8004236 <UART_SetConfig+0x5a2>
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e03c      	b.n	8004236 <UART_SetConfig+0x5a2>
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e038      	b.n	8004236 <UART_SetConfig+0x5a2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5c      	ldr	r2, [pc, #368]	; (800433c <UART_SetConfig+0x6a8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d130      	bne.n	8004230 <UART_SetConfig+0x59c>
 80041ce:	4b58      	ldr	r3, [pc, #352]	; (8004330 <UART_SetConfig+0x69c>)
 80041d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d826      	bhi.n	8004228 <UART_SetConfig+0x594>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x54c>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	08004201 	.word	0x08004201
 80041e8:	08004209 	.word	0x08004209
 80041ec:	08004211 	.word	0x08004211
 80041f0:	08004219 	.word	0x08004219
 80041f4:	08004221 	.word	0x08004221
 80041f8:	2302      	movs	r3, #2
 80041fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041fe:	e01a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004206:	e016      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800420e:	e012      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004216:	e00e      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004218:	2320      	movs	r3, #32
 800421a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800421e:	e00a      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004226:	e006      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004228:	2380      	movs	r3, #128	; 0x80
 800422a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422e:	e002      	b.n	8004236 <UART_SetConfig+0x5a2>
 8004230:	2380      	movs	r3, #128	; 0x80
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a40      	ldr	r2, [pc, #256]	; (800433c <UART_SetConfig+0x6a8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	f040 80ef 	bne.w	8004420 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004242:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004246:	2b20      	cmp	r3, #32
 8004248:	dc46      	bgt.n	80042d8 <UART_SetConfig+0x644>
 800424a:	2b02      	cmp	r3, #2
 800424c:	f2c0 8081 	blt.w	8004352 <UART_SetConfig+0x6be>
 8004250:	3b02      	subs	r3, #2
 8004252:	2b1e      	cmp	r3, #30
 8004254:	d87d      	bhi.n	8004352 <UART_SetConfig+0x6be>
 8004256:	a201      	add	r2, pc, #4	; (adr r2, 800425c <UART_SetConfig+0x5c8>)
 8004258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425c:	080042df 	.word	0x080042df
 8004260:	08004353 	.word	0x08004353
 8004264:	080042e7 	.word	0x080042e7
 8004268:	08004353 	.word	0x08004353
 800426c:	08004353 	.word	0x08004353
 8004270:	08004353 	.word	0x08004353
 8004274:	080042f7 	.word	0x080042f7
 8004278:	08004353 	.word	0x08004353
 800427c:	08004353 	.word	0x08004353
 8004280:	08004353 	.word	0x08004353
 8004284:	08004353 	.word	0x08004353
 8004288:	08004353 	.word	0x08004353
 800428c:	08004353 	.word	0x08004353
 8004290:	08004353 	.word	0x08004353
 8004294:	08004307 	.word	0x08004307
 8004298:	08004353 	.word	0x08004353
 800429c:	08004353 	.word	0x08004353
 80042a0:	08004353 	.word	0x08004353
 80042a4:	08004353 	.word	0x08004353
 80042a8:	08004353 	.word	0x08004353
 80042ac:	08004353 	.word	0x08004353
 80042b0:	08004353 	.word	0x08004353
 80042b4:	08004353 	.word	0x08004353
 80042b8:	08004353 	.word	0x08004353
 80042bc:	08004353 	.word	0x08004353
 80042c0:	08004353 	.word	0x08004353
 80042c4:	08004353 	.word	0x08004353
 80042c8:	08004353 	.word	0x08004353
 80042cc:	08004353 	.word	0x08004353
 80042d0:	08004353 	.word	0x08004353
 80042d4:	08004345 	.word	0x08004345
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	d036      	beq.n	800434a <UART_SetConfig+0x6b6>
 80042dc:	e039      	b.n	8004352 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80042de:	f7ff f867 	bl	80033b0 <HAL_RCCEx_GetD3PCLK1Freq>
 80042e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80042e4:	e03b      	b.n	800435e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042e6:	f107 0314 	add.w	r3, r7, #20
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f876 	bl	80033dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80042f4:	e033      	b.n	800435e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042f6:	f107 0308 	add.w	r3, r7, #8
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f9c2 	bl	8003684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004304:	e02b      	b.n	800435e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004306:	4b0a      	ldr	r3, [pc, #40]	; (8004330 <UART_SetConfig+0x69c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <UART_SetConfig+0x69c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	08db      	lsrs	r3, r3, #3
 8004318:	f003 0303 	and.w	r3, r3, #3
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <UART_SetConfig+0x6ac>)
 800431e:	fa22 f303 	lsr.w	r3, r2, r3
 8004322:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004324:	e01b      	b.n	800435e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <UART_SetConfig+0x6ac>)
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800432a:	e018      	b.n	800435e <UART_SetConfig+0x6ca>
 800432c:	40011400 	.word	0x40011400
 8004330:	58024400 	.word	0x58024400
 8004334:	40007800 	.word	0x40007800
 8004338:	40007c00 	.word	0x40007c00
 800433c:	58000c00 	.word	0x58000c00
 8004340:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004344:	4bc4      	ldr	r3, [pc, #784]	; (8004658 <UART_SetConfig+0x9c4>)
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004348:	e009      	b.n	800435e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004350:	e005      	b.n	800435e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004352:	2300      	movs	r3, #0
 8004354:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800435c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 81da 	beq.w	800471a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	4abc      	ldr	r2, [pc, #752]	; (800465c <UART_SetConfig+0x9c8>)
 800436c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004370:	461a      	mov	r2, r3
 8004372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004374:	fbb3 f3f2 	udiv	r3, r3, r2
 8004378:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	4613      	mov	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4413      	add	r3, r2
 8004384:	6a3a      	ldr	r2, [r7, #32]
 8004386:	429a      	cmp	r2, r3
 8004388:	d305      	bcc.n	8004396 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004390:	6a3a      	ldr	r2, [r7, #32]
 8004392:	429a      	cmp	r2, r3
 8004394:	d903      	bls.n	800439e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800439c:	e1bd      	b.n	800471a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	4618      	mov	r0, r3
 80043a2:	f04f 0100 	mov.w	r1, #0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043aa:	4aac      	ldr	r2, [pc, #688]	; (800465c <UART_SetConfig+0x9c8>)
 80043ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	f7fb ff8f 	bl	80002d8 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	f04f 0300 	mov.w	r3, #0
 80043ca:	020b      	lsls	r3, r1, #8
 80043cc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80043d0:	0202      	lsls	r2, r0, #8
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	6849      	ldr	r1, [r1, #4]
 80043d6:	0849      	lsrs	r1, r1, #1
 80043d8:	4608      	mov	r0, r1
 80043da:	f04f 0100 	mov.w	r1, #0
 80043de:	1814      	adds	r4, r2, r0
 80043e0:	eb43 0501 	adc.w	r5, r3, r1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	461a      	mov	r2, r3
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	4620      	mov	r0, r4
 80043f0:	4629      	mov	r1, r5
 80043f2:	f7fb ff71 	bl	80002d8 <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4613      	mov	r3, r2
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004404:	d308      	bcc.n	8004418 <UART_SetConfig+0x784>
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d204      	bcs.n	8004418 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e180      	b.n	800471a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800441e:	e17c      	b.n	800471a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004428:	f040 80be 	bne.w	80045a8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800442c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004430:	2b20      	cmp	r3, #32
 8004432:	dc49      	bgt.n	80044c8 <UART_SetConfig+0x834>
 8004434:	2b00      	cmp	r3, #0
 8004436:	db7c      	blt.n	8004532 <UART_SetConfig+0x89e>
 8004438:	2b20      	cmp	r3, #32
 800443a:	d87a      	bhi.n	8004532 <UART_SetConfig+0x89e>
 800443c:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <UART_SetConfig+0x7b0>)
 800443e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004442:	bf00      	nop
 8004444:	080044cf 	.word	0x080044cf
 8004448:	080044d7 	.word	0x080044d7
 800444c:	08004533 	.word	0x08004533
 8004450:	08004533 	.word	0x08004533
 8004454:	080044df 	.word	0x080044df
 8004458:	08004533 	.word	0x08004533
 800445c:	08004533 	.word	0x08004533
 8004460:	08004533 	.word	0x08004533
 8004464:	080044ef 	.word	0x080044ef
 8004468:	08004533 	.word	0x08004533
 800446c:	08004533 	.word	0x08004533
 8004470:	08004533 	.word	0x08004533
 8004474:	08004533 	.word	0x08004533
 8004478:	08004533 	.word	0x08004533
 800447c:	08004533 	.word	0x08004533
 8004480:	08004533 	.word	0x08004533
 8004484:	080044ff 	.word	0x080044ff
 8004488:	08004533 	.word	0x08004533
 800448c:	08004533 	.word	0x08004533
 8004490:	08004533 	.word	0x08004533
 8004494:	08004533 	.word	0x08004533
 8004498:	08004533 	.word	0x08004533
 800449c:	08004533 	.word	0x08004533
 80044a0:	08004533 	.word	0x08004533
 80044a4:	08004533 	.word	0x08004533
 80044a8:	08004533 	.word	0x08004533
 80044ac:	08004533 	.word	0x08004533
 80044b0:	08004533 	.word	0x08004533
 80044b4:	08004533 	.word	0x08004533
 80044b8:	08004533 	.word	0x08004533
 80044bc:	08004533 	.word	0x08004533
 80044c0:	08004533 	.word	0x08004533
 80044c4:	08004525 	.word	0x08004525
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d02e      	beq.n	800452a <UART_SetConfig+0x896>
 80044cc:	e031      	b.n	8004532 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ce:	f7fd ffd3 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 80044d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044d4:	e033      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044d6:	f7fd ffe5 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 80044da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80044dc:	e02f      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe ff7a 	bl	80033dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044ec:	e027      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80044ee:	f107 0308 	add.w	r3, r7, #8
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7ff f8c6 	bl	8003684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044fc:	e01f      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <UART_SetConfig+0x9cc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0320 	and.w	r3, r3, #32
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800450a:	4b55      	ldr	r3, [pc, #340]	; (8004660 <UART_SetConfig+0x9cc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	08db      	lsrs	r3, r3, #3
 8004510:	f003 0303 	and.w	r3, r3, #3
 8004514:	4a53      	ldr	r2, [pc, #332]	; (8004664 <UART_SetConfig+0x9d0>)
 8004516:	fa22 f303 	lsr.w	r3, r2, r3
 800451a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800451c:	e00f      	b.n	800453e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800451e:	4b51      	ldr	r3, [pc, #324]	; (8004664 <UART_SetConfig+0x9d0>)
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004522:	e00c      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004524:	4b4c      	ldr	r3, [pc, #304]	; (8004658 <UART_SetConfig+0x9c4>)
 8004526:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004528:	e009      	b.n	800453e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004530:	e005      	b.n	800453e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800453c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80ea 	beq.w	800471a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	4a44      	ldr	r2, [pc, #272]	; (800465c <UART_SetConfig+0x9c8>)
 800454c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004550:	461a      	mov	r2, r3
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	fbb3 f3f2 	udiv	r3, r3, r2
 8004558:	005a      	lsls	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	085b      	lsrs	r3, r3, #1
 8004560:	441a      	add	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	2b0f      	cmp	r3, #15
 8004570:	d916      	bls.n	80045a0 <UART_SetConfig+0x90c>
 8004572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004578:	d212      	bcs.n	80045a0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	b29b      	uxth	r3, r3
 800457e:	f023 030f 	bic.w	r3, r3, #15
 8004582:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	b29b      	uxth	r3, r3
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	b29a      	uxth	r2, r3
 8004590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004592:	4313      	orrs	r3, r2
 8004594:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800459c:	60da      	str	r2, [r3, #12]
 800459e:	e0bc      	b.n	800471a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045a6:	e0b8      	b.n	800471a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ac:	2b20      	cmp	r3, #32
 80045ae:	dc4b      	bgt.n	8004648 <UART_SetConfig+0x9b4>
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f2c0 8087 	blt.w	80046c4 <UART_SetConfig+0xa30>
 80045b6:	2b20      	cmp	r3, #32
 80045b8:	f200 8084 	bhi.w	80046c4 <UART_SetConfig+0xa30>
 80045bc:	a201      	add	r2, pc, #4	; (adr r2, 80045c4 <UART_SetConfig+0x930>)
 80045be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	0800464f 	.word	0x0800464f
 80045c8:	08004669 	.word	0x08004669
 80045cc:	080046c5 	.word	0x080046c5
 80045d0:	080046c5 	.word	0x080046c5
 80045d4:	08004671 	.word	0x08004671
 80045d8:	080046c5 	.word	0x080046c5
 80045dc:	080046c5 	.word	0x080046c5
 80045e0:	080046c5 	.word	0x080046c5
 80045e4:	08004681 	.word	0x08004681
 80045e8:	080046c5 	.word	0x080046c5
 80045ec:	080046c5 	.word	0x080046c5
 80045f0:	080046c5 	.word	0x080046c5
 80045f4:	080046c5 	.word	0x080046c5
 80045f8:	080046c5 	.word	0x080046c5
 80045fc:	080046c5 	.word	0x080046c5
 8004600:	080046c5 	.word	0x080046c5
 8004604:	08004691 	.word	0x08004691
 8004608:	080046c5 	.word	0x080046c5
 800460c:	080046c5 	.word	0x080046c5
 8004610:	080046c5 	.word	0x080046c5
 8004614:	080046c5 	.word	0x080046c5
 8004618:	080046c5 	.word	0x080046c5
 800461c:	080046c5 	.word	0x080046c5
 8004620:	080046c5 	.word	0x080046c5
 8004624:	080046c5 	.word	0x080046c5
 8004628:	080046c5 	.word	0x080046c5
 800462c:	080046c5 	.word	0x080046c5
 8004630:	080046c5 	.word	0x080046c5
 8004634:	080046c5 	.word	0x080046c5
 8004638:	080046c5 	.word	0x080046c5
 800463c:	080046c5 	.word	0x080046c5
 8004640:	080046c5 	.word	0x080046c5
 8004644:	080046b7 	.word	0x080046b7
 8004648:	2b40      	cmp	r3, #64	; 0x40
 800464a:	d037      	beq.n	80046bc <UART_SetConfig+0xa28>
 800464c:	e03a      	b.n	80046c4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800464e:	f7fd ff13 	bl	8002478 <HAL_RCC_GetPCLK1Freq>
 8004652:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004654:	e03c      	b.n	80046d0 <UART_SetConfig+0xa3c>
 8004656:	bf00      	nop
 8004658:	003d0900 	.word	0x003d0900
 800465c:	08004d74 	.word	0x08004d74
 8004660:	58024400 	.word	0x58024400
 8004664:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004668:	f7fd ff1c 	bl	80024a4 <HAL_RCC_GetPCLK2Freq>
 800466c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800466e:	e02f      	b.n	80046d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	4618      	mov	r0, r3
 8004676:	f7fe feb1 	bl	80033dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800467e:	e027      	b.n	80046d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004680:	f107 0308 	add.w	r3, r7, #8
 8004684:	4618      	mov	r0, r3
 8004686:	f7fe fffd 	bl	8003684 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800468e:	e01f      	b.n	80046d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004690:	4b2c      	ldr	r3, [pc, #176]	; (8004744 <UART_SetConfig+0xab0>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d009      	beq.n	80046b0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800469c:	4b29      	ldr	r3, [pc, #164]	; (8004744 <UART_SetConfig+0xab0>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	4a28      	ldr	r2, [pc, #160]	; (8004748 <UART_SetConfig+0xab4>)
 80046a8:	fa22 f303 	lsr.w	r3, r2, r3
 80046ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046ae:	e00f      	b.n	80046d0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80046b0:	4b25      	ldr	r3, [pc, #148]	; (8004748 <UART_SetConfig+0xab4>)
 80046b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b4:	e00c      	b.n	80046d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80046b6:	4b25      	ldr	r3, [pc, #148]	; (800474c <UART_SetConfig+0xab8>)
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ba:	e009      	b.n	80046d0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046c2:	e005      	b.n	80046d0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80046ce:	bf00      	nop
    }

    if (pclk != 0U)
 80046d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d021      	beq.n	800471a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	4a1d      	ldr	r2, [pc, #116]	; (8004750 <UART_SetConfig+0xabc>)
 80046dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	441a      	add	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d909      	bls.n	8004714 <UART_SetConfig+0xa80>
 8004700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004706:	d205      	bcs.n	8004714 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	b29a      	uxth	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	60da      	str	r2, [r3, #12]
 8004712:	e002      	b.n	800471a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2201      	movs	r2, #1
 8004726:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004736:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800473a:	4618      	mov	r0, r3
 800473c:	3738      	adds	r7, #56	; 0x38
 800473e:	46bd      	mov	sp, r7
 8004740:	bdb0      	pop	{r4, r5, r7, pc}
 8004742:	bf00      	nop
 8004744:	58024400 	.word	0x58024400
 8004748:	03d09000 	.word	0x03d09000
 800474c:	003d0900 	.word	0x003d0900
 8004750:	08004d74 	.word	0x08004d74

08004754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	430a      	orrs	r2, r1
 80047c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00a      	beq.n	80047e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	f003 0310 	and.w	r3, r3, #16
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00a      	beq.n	8004806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480a:	f003 0320 	and.w	r3, r3, #32
 800480e:	2b00      	cmp	r3, #0
 8004810:	d00a      	beq.n	8004828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01a      	beq.n	800486a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004852:	d10a      	bne.n	800486a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	430a      	orrs	r2, r1
 800488a:	605a      	str	r2, [r3, #4]
  }
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af02      	add	r7, sp, #8
 800489e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a8:	f7fc fabc 	bl	8000e24 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0308 	and.w	r3, r3, #8
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d10e      	bne.n	80048da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f000 f82f 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e025      	b.n	8004926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 0304 	and.w	r3, r3, #4
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d10e      	bne.n	8004906 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f819 	bl	800492e <UART_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e00f      	b.n	8004926 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b09c      	sub	sp, #112	; 0x70
 8004932:	af00      	add	r7, sp, #0
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	603b      	str	r3, [r7, #0]
 800493a:	4613      	mov	r3, r2
 800493c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800493e:	e0a9      	b.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	f000 80a5 	beq.w	8004a94 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494a:	f7fc fa6b 	bl	8000e24 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004956:	429a      	cmp	r2, r3
 8004958:	d302      	bcc.n	8004960 <UART_WaitOnFlagUntilTimeout+0x32>
 800495a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800495c:	2b00      	cmp	r3, #0
 800495e:	d140      	bne.n	80049e2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800496e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004970:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004974:	667b      	str	r3, [r7, #100]	; 0x64
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	461a      	mov	r2, r3
 800497c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800497e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004980:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004984:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800498c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e6      	bne.n	8004960 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	663b      	str	r3, [r7, #96]	; 0x60
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3308      	adds	r3, #8
 80049b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80049b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2220      	movs	r2, #32
 80049d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e069      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d051      	beq.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049fe:	d149      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a08:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	e853 3f00 	ldrex	r3, [r3]
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	461a      	mov	r2, r3
 8004a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
 8004a2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e6      	bne.n	8004a0a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3308      	adds	r3, #8
 8004a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	e853 3f00 	ldrex	r3, [r3]
 8004a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3308      	adds	r3, #8
 8004a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a5c:	623a      	str	r2, [r7, #32]
 8004a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a60:	69f9      	ldr	r1, [r7, #28]
 8004a62:	6a3a      	ldr	r2, [r7, #32]
 8004a64:	e841 2300 	strex	r3, r2, [r1]
 8004a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1e5      	bne.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e010      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	f43f af46 	beq.w	8004940 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3770      	adds	r7, #112	; 0x70
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e027      	b.n	8004b24 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2224      	movs	r2, #36	; 0x24
 8004ae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f022 0201 	bic.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e02d      	b.n	8004ba4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	; 0x24
 8004b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f84f 	bl	8004c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2220      	movs	r2, #32
 8004b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e02d      	b.n	8004c20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f811 	bl	8004c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d108      	bne.n	8004c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c48:	e031      	b.n	8004cae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c4a:	2310      	movs	r3, #16
 8004c4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c4e:	2310      	movs	r3, #16
 8004c50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	0e5b      	lsrs	r3, r3, #25
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	0f5b      	lsrs	r3, r3, #29
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f003 0307 	and.w	r3, r3, #7
 8004c70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c72:	7bbb      	ldrb	r3, [r7, #14]
 8004c74:	7b3a      	ldrb	r2, [r7, #12]
 8004c76:	4911      	ldr	r1, [pc, #68]	; (8004cbc <UARTEx_SetNbDataToProcess+0x94>)
 8004c78:	5c8a      	ldrb	r2, [r1, r2]
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c7e:	7b3a      	ldrb	r2, [r7, #12]
 8004c80:	490f      	ldr	r1, [pc, #60]	; (8004cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	7b7a      	ldrb	r2, [r7, #13]
 8004c94:	4909      	ldr	r1, [pc, #36]	; (8004cbc <UARTEx_SetNbDataToProcess+0x94>)
 8004c96:	5c8a      	ldrb	r2, [r1, r2]
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c9c:	7b7a      	ldrb	r2, [r7, #13]
 8004c9e:	4908      	ldr	r1, [pc, #32]	; (8004cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8004ca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	08004d8c 	.word	0x08004d8c
 8004cc0:	08004d94 	.word	0x08004d94

08004cc4 <__libc_init_array>:
 8004cc4:	b570      	push	{r4, r5, r6, lr}
 8004cc6:	4d0d      	ldr	r5, [pc, #52]	; (8004cfc <__libc_init_array+0x38>)
 8004cc8:	4c0d      	ldr	r4, [pc, #52]	; (8004d00 <__libc_init_array+0x3c>)
 8004cca:	1b64      	subs	r4, r4, r5
 8004ccc:	10a4      	asrs	r4, r4, #2
 8004cce:	2600      	movs	r6, #0
 8004cd0:	42a6      	cmp	r6, r4
 8004cd2:	d109      	bne.n	8004ce8 <__libc_init_array+0x24>
 8004cd4:	4d0b      	ldr	r5, [pc, #44]	; (8004d04 <__libc_init_array+0x40>)
 8004cd6:	4c0c      	ldr	r4, [pc, #48]	; (8004d08 <__libc_init_array+0x44>)
 8004cd8:	f000 f820 	bl	8004d1c <_init>
 8004cdc:	1b64      	subs	r4, r4, r5
 8004cde:	10a4      	asrs	r4, r4, #2
 8004ce0:	2600      	movs	r6, #0
 8004ce2:	42a6      	cmp	r6, r4
 8004ce4:	d105      	bne.n	8004cf2 <__libc_init_array+0x2e>
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cec:	4798      	blx	r3
 8004cee:	3601      	adds	r6, #1
 8004cf0:	e7ee      	b.n	8004cd0 <__libc_init_array+0xc>
 8004cf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf6:	4798      	blx	r3
 8004cf8:	3601      	adds	r6, #1
 8004cfa:	e7f2      	b.n	8004ce2 <__libc_init_array+0x1e>
 8004cfc:	08004da4 	.word	0x08004da4
 8004d00:	08004da4 	.word	0x08004da4
 8004d04:	08004da4 	.word	0x08004da4
 8004d08:	08004da8 	.word	0x08004da8

08004d0c <memset>:
 8004d0c:	4402      	add	r2, r0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d100      	bne.n	8004d16 <memset+0xa>
 8004d14:	4770      	bx	lr
 8004d16:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1a:	e7f9      	b.n	8004d10 <memset+0x4>

08004d1c <_init>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr

08004d28 <_fini>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr
