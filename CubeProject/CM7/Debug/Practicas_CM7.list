
Practicas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058a0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08005b40  08005b40  00015b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d44  08005d44  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d44  08005d44  00015d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d48  08005d48  00015d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08005d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  24000074  08005dc0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000148  08005dc0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9d3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a93  00000000  00000000  0003ba75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0003e508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0003f048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000419ce  00000000  00000000  0003fad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f74d  00000000  00000000  0008149e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198ac9  00000000  00000000  00090beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002296b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000323c  00000000  00000000  00229708  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08005b28 	.word	0x08005b28

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	08005b28 	.word	0x08005b28

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <_Z9Practica2v>:
void recibir_cadena(custom_char *chr);
void enviar_cadena(char *str, int size);

custom_char received;

void Practica2() {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b0ab      	sub	sp, #172	; 0xac
 80007c0:	af00      	add	r7, sp, #0

	// Ejercicio 2.1
	RCC->APB2ENR |= UART1_EN;
 80007c2:	4b73      	ldr	r3, [pc, #460]	; (8000990 <_Z9Practica2v+0x1d4>)
 80007c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80007c8:	4a71      	ldr	r2, [pc, #452]	; (8000990 <_Z9Practica2v+0x1d4>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	// Ejercicio 2.2
	// Activate HSE clock
	// Activate GPIO I
	RCC->APB4ENR |= APB4ENR_HSE_EN | GPIO_I_EN;
 80007d2:	4b6f      	ldr	r3, [pc, #444]	; (8000990 <_Z9Practica2v+0x1d4>)
 80007d4:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80007d8:	496d      	ldr	r1, [pc, #436]	; (8000990 <_Z9Practica2v+0x1d4>)
 80007da:	4b6e      	ldr	r3, [pc, #440]	; (8000994 <_Z9Practica2v+0x1d8>)
 80007dc:	4313      	orrs	r3, r2
 80007de:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
//	RCC->APB4ENR |= GPIO_I_EN;
	GPIOI->MODER = GPIO_I_MODE_VAL;
 80007e2:	4b6d      	ldr	r3, [pc, #436]	; (8000998 <_Z9Practica2v+0x1dc>)
 80007e4:	f06f 422a 	mvn.w	r2, #2852126720	; 0xaa000000
 80007e8:	601a      	str	r2, [r3, #0]

	GPIOA->MODER = 0xABFFFFFF;
 80007ea:	4b6c      	ldr	r3, [pc, #432]	; (800099c <_Z9Practica2v+0x1e0>)
 80007ec:	f06f 42a8 	mvn.w	r2, #1409286144	; 0x54000000
 80007f0:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((0x01 << GPIOA_9_UART) | (0x01 << GPIOA_10_UART));
 80007f2:	4b6a      	ldr	r3, [pc, #424]	; (800099c <_Z9Practica2v+0x1e0>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a69      	ldr	r2, [pc, #420]	; (800099c <_Z9Practica2v+0x1e0>)
 80007f8:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
 80007fc:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] |= (0x00000000 | (0x07 << 4) | (0x07 << 8));
 80007fe:	4b67      	ldr	r3, [pc, #412]	; (800099c <_Z9Practica2v+0x1e0>)
 8000800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000802:	4a66      	ldr	r2, [pc, #408]	; (800099c <_Z9Practica2v+0x1e0>)
 8000804:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000808:	6253      	str	r3, [r2, #36]	; 0x24

// Ejercicio 2.3
	USART1->CR1 |= (1 << 29) + (1 << 3) + (1 << 2) + (1 << 0);
 800080a:	4b65      	ldr	r3, [pc, #404]	; (80009a0 <_Z9Practica2v+0x1e4>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4964      	ldr	r1, [pc, #400]	; (80009a0 <_Z9Practica2v+0x1e4>)
 8000810:	4b64      	ldr	r3, [pc, #400]	; (80009a4 <_Z9Practica2v+0x1e8>)
 8000812:	4313      	orrs	r3, r2
 8000814:	600b      	str	r3, [r1, #0]
	USART1->BRR = 556;
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <_Z9Practica2v+0x1e4>)
 8000818:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800081c:	60da      	str	r2, [r3, #12]

// Ejercicio 2.4

	char str[14] = "Hola Mundo\r\n";
 800081e:	4b62      	ldr	r3, [pc, #392]	; (80009a8 <_Z9Practica2v+0x1ec>)
 8000820:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8000824:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000826:	c407      	stmia	r4!, {r0, r1, r2}
 8000828:	7023      	strb	r3, [r4, #0]
 800082a:	2300      	movs	r3, #0
 800082c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91

	uint32_t timeStart = HAL_GetTick();
 8000830:	f000 fd24 	bl	800127c <HAL_GetTick>
 8000834:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

// Ejercicio 2.5

// Configuramos los pines para salida

	timeStart = HAL_GetTick();
 8000838:	f000 fd20 	bl	800127c <HAL_GetTick>
 800083c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	// Turn off all leds
	change_led_state(1, 0);
 8000840:	2100      	movs	r1, #0
 8000842:	2001      	movs	r0, #1
 8000844:	f000 f8bc 	bl	80009c0 <_Z16change_led_statehh>
	change_led_state(2, 0);
 8000848:	2100      	movs	r1, #0
 800084a:	2002      	movs	r0, #2
 800084c:	f000 f8b8 	bl	80009c0 <_Z16change_led_statehh>
	change_led_state(3, 0);
 8000850:	2100      	movs	r1, #0
 8000852:	2003      	movs	r0, #3
 8000854:	f000 f8b4 	bl	80009c0 <_Z16change_led_statehh>
	change_led_state(4, 0);
 8000858:	2100      	movs	r1, #0
 800085a:	2004      	movs	r0, #4
 800085c:	f000 f8b0 	bl	80009c0 <_Z16change_led_statehh>
// Ejercicio 2.6

	char buff[128];

	// Pedimos un numero
	char *msg = "Porfavor, escriba un numero de menos de 3 cifras: ";
 8000860:	4b52      	ldr	r3, [pc, #328]	; (80009ac <_Z9Practica2v+0x1f0>)
 8000862:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	enviar_cadena(msg, strlen(msg));
 8000866:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800086a:	f7ff fd39 	bl	80002e0 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	4619      	mov	r1, r3
 8000872:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000876:	f000 f955 	bl	8000b24 <_Z13enviar_cadenaPci>

	// Esperamos a recibir el numero
	do {
		recibir_cadena(&received);
 800087a:	484d      	ldr	r0, [pc, #308]	; (80009b0 <_Z9Practica2v+0x1f4>)
 800087c:	f000 f8e8 	bl	8000a50 <_Z14recibir_cadenaP11custom_char>
	} while (!received.valid);
 8000880:	4b4b      	ldr	r3, [pc, #300]	; (80009b0 <_Z9Practica2v+0x1f4>)
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d100      	bne.n	800088a <_Z9Practica2v+0xce>
	do {
 8000888:	e7f7      	b.n	800087a <_Z9Practica2v+0xbe>

	int first_number = atoi(received.buff);
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <_Z9Practica2v+0x1f4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fc44 	bl	800511c <atoi>
 8000894:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

	// Escribimos el numero por pantalla
	memset(buff, '\0', strlen(buff));
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd20 	bl	80002e0 <strlen>
 80008a0:	4602      	mov	r2, r0
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f004 fc66 	bl	8005178 <memset>
	snprintf(buff, 128, "El primer numero es : %d\n ", first_number);
 80008ac:	1d38      	adds	r0, r7, #4
 80008ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008b2:	4a40      	ldr	r2, [pc, #256]	; (80009b4 <_Z9Practica2v+0x1f8>)
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	f004 fc67 	bl	8005188 <sniprintf>

	enviar_cadena(buff, strlen(buff));
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fd0f 	bl	80002e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f92a 	bl	8000b24 <_Z13enviar_cadenaPci>

	// Pedimos otro numero
	msg = "Porfavor, escriba un numero de menos de 3 cifras: ";
 80008d0:	4b36      	ldr	r3, [pc, #216]	; (80009ac <_Z9Practica2v+0x1f0>)
 80008d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	enviar_cadena(msg, strlen(msg));
 80008d6:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80008da:	f7ff fd01 	bl	80002e0 <strlen>
 80008de:	4603      	mov	r3, r0
 80008e0:	4619      	mov	r1, r3
 80008e2:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 80008e6:	f000 f91d 	bl	8000b24 <_Z13enviar_cadenaPci>

	// Esperamos a recibir el segundo numero
	do {
		recibir_cadena(&received);
 80008ea:	4831      	ldr	r0, [pc, #196]	; (80009b0 <_Z9Practica2v+0x1f4>)
 80008ec:	f000 f8b0 	bl	8000a50 <_Z14recibir_cadenaP11custom_char>
	} while (!received.valid);
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <_Z9Practica2v+0x1f4>)
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d100      	bne.n	80008fa <_Z9Practica2v+0x13e>
	do {
 80008f8:	e7f7      	b.n	80008ea <_Z9Practica2v+0x12e>

	int second_number = atoi(received.buff);
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <_Z9Practica2v+0x1f4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f004 fc0c 	bl	800511c <atoi>
 8000904:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	// Escribimos el numero por pantalla
	memset(buff, '\0', strlen(buff));
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f7ff fce8 	bl	80002e0 <strlen>
 8000910:	4602      	mov	r2, r0
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fc2e 	bl	8005178 <memset>
	snprintf(buff, 128, "El segundo numero es : %d\n ", second_number);
 800091c:	1d38      	adds	r0, r7, #4
 800091e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000922:	4a25      	ldr	r2, [pc, #148]	; (80009b8 <_Z9Practica2v+0x1fc>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	f004 fc2f 	bl	8005188 <sniprintf>

	enviar_cadena(buff, strlen(buff));
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fcd7 	bl	80002e0 <strlen>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f8f2 	bl	8000b24 <_Z13enviar_cadenaPci>

	int total = first_number + second_number;
 8000940:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000944:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000948:	4413      	add	r3, r2
 800094a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// Escribimos el numero total por pantalla
	memset(buff, '\0', strlen(buff));
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fcc5 	bl	80002e0 <strlen>
 8000956:	4602      	mov	r2, r0
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f004 fc0b 	bl	8005178 <memset>
	snprintf(buff, 128, "La suma es : %d\n ", total);
 8000962:	1d38      	adds	r0, r7, #4
 8000964:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000968:	4a14      	ldr	r2, [pc, #80]	; (80009bc <_Z9Practica2v+0x200>)
 800096a:	2180      	movs	r1, #128	; 0x80
 800096c:	f004 fc0c 	bl	8005188 <sniprintf>

	enviar_cadena(buff, strlen(buff));
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	4618      	mov	r0, r3
 8000974:	f7ff fcb4 	bl	80002e0 <strlen>
 8000978:	4603      	mov	r3, r0
 800097a:	461a      	mov	r2, r3
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	4611      	mov	r1, r2
 8000980:	4618      	mov	r0, r3
 8000982:	f000 f8cf 	bl	8000b24 <_Z13enviar_cadenaPci>

//	HAL_UART_Init(&huart1);

}
 8000986:	bf00      	nop
 8000988:	37ac      	adds	r7, #172	; 0xac
 800098a:	46bd      	mov	sp, r7
 800098c:	bd90      	pop	{r4, r7, pc}
 800098e:	bf00      	nop
 8000990:	58024400 	.word	0x58024400
 8000994:	02000100 	.word	0x02000100
 8000998:	58022000 	.word	0x58022000
 800099c:	58020000 	.word	0x58020000
 80009a0:	40011000 	.word	0x40011000
 80009a4:	2000000d 	.word	0x2000000d
 80009a8:	08005bc0 	.word	0x08005bc0
 80009ac:	08005b40 	.word	0x08005b40
 80009b0:	24000090 	.word	0x24000090
 80009b4:	08005b74 	.word	0x08005b74
 80009b8:	08005b90 	.word	0x08005b90
 80009bc:	08005bac 	.word	0x08005bac

080009c0 <_Z16change_led_statehh>:

void configure_out_leds() {

}

void change_led_state(uint8_t pin, uint8_t mode) {
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
	uint8_t offset = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73fb      	strb	r3, [r7, #15]

	switch (pin) {
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	2b03      	cmp	r3, #3
 80009da:	d817      	bhi.n	8000a0c <_Z16change_led_statehh+0x4c>
 80009dc:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <_Z16change_led_statehh+0x24>)
 80009de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e2:	bf00      	nop
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	080009fb 	.word	0x080009fb
 80009ec:	08000a01 	.word	0x08000a01
 80009f0:	08000a07 	.word	0x08000a07
		case 1: {
			offset = 15;
 80009f4:	230f      	movs	r3, #15
 80009f6:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80009f8:	e009      	b.n	8000a0e <_Z16change_led_statehh+0x4e>

		case 2: {
			offset = 14;
 80009fa:	230e      	movs	r3, #14
 80009fc:	73fb      	strb	r3, [r7, #15]
		}
		break;
 80009fe:	e006      	b.n	8000a0e <_Z16change_led_statehh+0x4e>

		case 3: {
			offset = 13;
 8000a00:	230d      	movs	r3, #13
 8000a02:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000a04:	e003      	b.n	8000a0e <_Z16change_led_statehh+0x4e>

		case 4: {
			offset = 12;
 8000a06:	230c      	movs	r3, #12
 8000a08:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000a0a:	e000      	b.n	8000a0e <_Z16change_led_statehh+0x4e>

		default:
		break;
 8000a0c:	bf00      	nop
	}

	if (mode == 0)
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10a      	bne.n	8000a2a <_Z16change_led_statehh+0x6a>
		GPIOI->ODR |= (1 << offset);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <_Z16change_led_statehh+0x8c>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	7bfa      	ldrb	r2, [r7, #15]
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	4611      	mov	r1, r2
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <_Z16change_led_statehh+0x8c>)
 8000a24:	430b      	orrs	r3, r1
 8000a26:	6153      	str	r3, [r2, #20]
	else
		GPIOI->ODR &= ~(1 << offset);
}
 8000a28:	e00a      	b.n	8000a40 <_Z16change_led_statehh+0x80>
		GPIOI->ODR &= ~(1 << offset);
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <_Z16change_led_statehh+0x8c>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	7bfa      	ldrb	r2, [r7, #15]
 8000a30:	2101      	movs	r1, #1
 8000a32:	fa01 f202 	lsl.w	r2, r1, r2
 8000a36:	43d2      	mvns	r2, r2
 8000a38:	4611      	mov	r1, r2
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <_Z16change_led_statehh+0x8c>)
 8000a3c:	400b      	ands	r3, r1
 8000a3e:	6153      	str	r3, [r2, #20]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	58022000 	.word	0x58022000

08000a50 <_Z14recibir_cadenaP11custom_char>:

void recibir_cadena(custom_char *chr) {
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

	chr->valid = false;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	711a      	strb	r2, [r3, #4]
	memset(chr->buff, '\0', strlen(chr->buff));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681c      	ldr	r4, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fc3a 	bl	80002e0 <strlen>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	2100      	movs	r1, #0
 8000a72:	4620      	mov	r0, r4
 8000a74:	f004 fb80 	bl	8005178 <memset>

	uint8_t x = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	73fb      	strb	r3, [r7, #15]

	uint32_t start_time = HAL_GetTick();
 8000a7c:	f000 fbfe 	bl	800127c <HAL_GetTick>
 8000a80:	60b8      	str	r0, [r7, #8]
	while ((HAL_GetTick() - start_time < 10) && !chr->valid) {
 8000a82:	f000 fbfb 	bl	800127c <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	2b09      	cmp	r3, #9
 8000a8e:	d808      	bhi.n	8000aa2 <_Z14recibir_cadenaP11custom_char+0x52>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	791b      	ldrb	r3, [r3, #4]
 8000a94:	f083 0301 	eor.w	r3, r3, #1
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <_Z14recibir_cadenaP11custom_char+0x52>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <_Z14recibir_cadenaP11custom_char+0x54>
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d037      	beq.n	8000b18 <_Z14recibir_cadenaP11custom_char+0xc8>
		while (((USART1->ISR >> 5) & 0x01)) {
 8000aa8:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <_Z14recibir_cadenaP11custom_char+0xd0>)
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	f003 0320 	and.w	r3, r3, #32
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	bf14      	ite	ne
 8000ab4:	2301      	movne	r3, #1
 8000ab6:	2300      	moveq	r3, #0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d0e1      	beq.n	8000a82 <_Z14recibir_cadenaP11custom_char+0x32>
			chr->buff[x] = USART1->RDR;
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <_Z14recibir_cadenaP11custom_char+0xd0>)
 8000ac0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	4413      	add	r3, r2
 8000aca:	b2ca      	uxtb	r2, r1
 8000acc:	701a      	strb	r2, [r3, #0]

			if (chr->buff[x] == 0x0A) {
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b0a      	cmp	r3, #10
 8000ada:	d118      	bne.n	8000b0e <_Z14recibir_cadenaP11custom_char+0xbe>
				if (chr->buff[x - 1] == 0x0D)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b0d      	cmp	r3, #13
 8000aea:	d106      	bne.n	8000afa <_Z14recibir_cadenaP11custom_char+0xaa>
					chr->buff[x - 1] = '\0';
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	2200      	movs	r2, #0
 8000af8:	701a      	strb	r2, [r3, #0]
				chr->buff[x] = '\0';
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	7bfb      	ldrb	r3, [r7, #15]
 8000b00:	4413      	add	r3, r2
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
				chr->valid = true;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2201      	movs	r2, #1
 8000b0a:	711a      	strb	r2, [r3, #4]
				break;
 8000b0c:	e003      	b.n	8000b16 <_Z14recibir_cadenaP11custom_char+0xc6>
			}
			x++;
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	3301      	adds	r3, #1
 8000b12:	73fb      	strb	r3, [r7, #15]
		while (((USART1->ISR >> 5) & 0x01)) {
 8000b14:	e7c8      	b.n	8000aa8 <_Z14recibir_cadenaP11custom_char+0x58>
	while ((HAL_GetTick() - start_time < 10) && !chr->valid) {
 8000b16:	e7b4      	b.n	8000a82 <_Z14recibir_cadenaP11custom_char+0x32>
		}

	}
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	40011000 	.word	0x40011000

08000b24 <_Z13enviar_cadenaPci>:

void enviar_cadena(char *str, int size) {
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]

	if (str[size - 1] != '\0')
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	3b01      	subs	r3, #1
 8000b32:	687a      	ldr	r2, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d005      	beq.n	8000b48 <_Z13enviar_cadenaPci+0x24>
		str[size - 1] = (char) '\0';
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	4413      	add	r3, r2
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]

	for (uint8_t x = 0; x < size; x++) {
 8000b48:	2300      	movs	r3, #0
 8000b4a:	73fb      	strb	r3, [r7, #15]
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	683a      	ldr	r2, [r7, #0]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dd18      	ble.n	8000b86 <_Z13enviar_cadenaPci+0x62>
		USART1->TDR = str[x];
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	781a      	ldrb	r2, [r3, #0]
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <_Z13enviar_cadenaPci+0x70>)
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28

		bool byte_sent = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73bb      	strb	r3, [r7, #14]

		do {
			byte_sent = ((USART1->ISR >> 7) & 0x01);
 8000b64:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <_Z13enviar_cadenaPci+0x70>)
 8000b66:	69db      	ldr	r3, [r3, #28]
 8000b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bf14      	ite	ne
 8000b70:	2301      	movne	r3, #1
 8000b72:	2300      	moveq	r3, #0
 8000b74:	73bb      	strb	r3, [r7, #14]
		} while (!byte_sent);
 8000b76:	7bbb      	ldrb	r3, [r7, #14]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d100      	bne.n	8000b7e <_Z13enviar_cadenaPci+0x5a>
		do {
 8000b7c:	e7f2      	b.n	8000b64 <_Z13enviar_cadenaPci+0x40>
	for (uint8_t x = 0; x < size; x++) {
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	3301      	adds	r3, #1
 8000b82:	73fb      	strb	r3, [r7, #15]
 8000b84:	e7e2      	b.n	8000b4c <_Z13enviar_cadenaPci+0x28>
	}

}
 8000b86:	bf00      	nop
 8000b88:	3714      	adds	r7, #20
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40011000 	.word	0x40011000

08000b98 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000b9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ba2:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000ba4:	4b28      	ldr	r3, [pc, #160]	; (8000c48 <main+0xb0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <main+0x26>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1e5a      	subs	r2, r3, #1
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dd01      	ble.n	8000bbe <main+0x26>
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <main+0x28>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d000      	beq.n	8000bc6 <main+0x2e>
 8000bc4:	e7ee      	b.n	8000ba4 <main+0xc>
		;
	if (timeout < 0) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	da01      	bge.n	8000bd0 <main+0x38>
		Error_Handler();
 8000bcc:	f000 f9c0 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000bd0:	f000 face 	bl	8001170 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000bd4:	f000 f83a 	bl	8000c4c <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000bd8:	f000 f8d6 	bl	8000d88 <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <main+0xb0>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a19      	ldr	r2, [pc, #100]	; (8000c48 <main+0xb0>)
 8000be4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b16      	ldr	r3, [pc, #88]	; (8000c48 <main+0xb0>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 fdea 	bl	80017d4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000c00:	2100      	movs	r1, #0
 8000c02:	2000      	movs	r0, #0
 8000c04:	f000 fe00 	bl	8001808 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0c:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <main+0xb0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d106      	bne.n	8000c28 <main+0x90>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	607a      	str	r2, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	dd01      	ble.n	8000c28 <main+0x90>
 8000c24:	2301      	movs	r3, #1
 8000c26:	e000      	b.n	8000c2a <main+0x92>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d000      	beq.n	8000c30 <main+0x98>
 8000c2e:	e7ee      	b.n	8000c0e <main+0x76>
		;
	if (timeout < 0) {
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da01      	bge.n	8000c3a <main+0xa2>
		Error_Handler();
 8000c36:	f000 f98b 	bl	8000f50 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c3a:	f000 f937 	bl	8000eac <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8000c3e:	f000 f8d5 	bl	8000dec <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	// ===================== CORREGIDA
//	Practica1();
	// ===================== NO CORREGIDA
	Practica2();
 8000c42:	f7ff fdbb 	bl	80007bc <_Z9Practica2v>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c46:	e7fe      	b.n	8000c46 <main+0xae>
 8000c48:	58024400 	.word	0x58024400

08000c4c <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b09c      	sub	sp, #112	; 0x70
 8000c50:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	224c      	movs	r2, #76	; 0x4c
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f004 fa8c 	bl	8005178 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000c60:	1d3b      	adds	r3, r7, #4
 8000c62:	2220      	movs	r2, #32
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f004 fa86 	bl	8005178 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c6c:	2004      	movs	r0, #4
 8000c6e:	f000 fddf 	bl	8001830 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c72:	2300      	movs	r3, #0
 8000c74:	603b      	str	r3, [r7, #0]
 8000c76:	4b41      	ldr	r3, [pc, #260]	; (8000d7c <_Z18SystemClock_Configv+0x130>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	4a40      	ldr	r2, [pc, #256]	; (8000d7c <_Z18SystemClock_Configv+0x130>)
 8000c7c:	f023 0301 	bic.w	r3, r3, #1
 8000c80:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c82:	4b3e      	ldr	r3, [pc, #248]	; (8000d7c <_Z18SystemClock_Configv+0x130>)
 8000c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	603b      	str	r3, [r7, #0]
 8000c8c:	4b3c      	ldr	r3, [pc, #240]	; (8000d80 <_Z18SystemClock_Configv+0x134>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a3b      	ldr	r2, [pc, #236]	; (8000d80 <_Z18SystemClock_Configv+0x134>)
 8000c92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b39      	ldr	r3, [pc, #228]	; (8000d80 <_Z18SystemClock_Configv+0x134>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000ca4:	4b36      	ldr	r3, [pc, #216]	; (8000d80 <_Z18SystemClock_Configv+0x134>)
 8000ca6:	699b      	ldr	r3, [r3, #24]
 8000ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cb0:	bf14      	ite	ne
 8000cb2:	2301      	movne	r3, #1
 8000cb4:	2300      	moveq	r3, #0
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d000      	beq.n	8000cbe <_Z18SystemClock_Configv+0x72>
 8000cbc:	e7f2      	b.n	8000ca4 <_Z18SystemClock_Configv+0x58>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <_Z18SystemClock_Configv+0x138>)
 8000cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc2:	f023 0303 	bic.w	r3, r3, #3
 8000cc6:	4a2f      	ldr	r2, [pc, #188]	; (8000d84 <_Z18SystemClock_Configv+0x138>)
 8000cc8:	f043 0302 	orr.w	r3, r3, #2
 8000ccc:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000cce:	230b      	movs	r3, #11
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cdc:	2340      	movs	r3, #64	; 0x40
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000cec:	2305      	movs	r3, #5
 8000cee:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 8000cf0:	2330      	movs	r3, #48	; 0x30
 8000cf2:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000cf8:	2305      	movs	r3, #5
 8000cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000d00:	2308      	movs	r3, #8
 8000d02:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fde7 	bl	80018e4 <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	bf14      	ite	ne
 8000d1c:	2301      	movne	r3, #1
 8000d1e:	2300      	moveq	r3, #0
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <_Z18SystemClock_Configv+0xde>
		Error_Handler();
 8000d26:	f000 f913 	bl	8000f50 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000d2a:	233f      	movs	r3, #63	; 0x3f
 8000d2c:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f9f4 	bl	800213c <HAL_RCC_ClockConfig>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	bf14      	ite	ne
 8000d5a:	2301      	movne	r3, #1
 8000d5c:	2300      	moveq	r3, #0
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <_Z18SystemClock_Configv+0x11c>
		Error_Handler();
 8000d64:	f000 f8f4 	bl	8000f50 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000d68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f001 fb9a 	bl	80024a8 <HAL_RCC_MCOConfig>
}
 8000d74:	bf00      	nop
 8000d76:	3770      	adds	r7, #112	; 0x70
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	58000400 	.word	0x58000400
 8000d80:	58024800 	.word	0x58024800
 8000d84:	58024400 	.word	0x58024400

08000d88 <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0b0      	sub	sp, #192	; 0xc0
 8000d8c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000d8e:	463b      	mov	r3, r7
 8000d90:	22c0      	movs	r2, #192	; 0xc0
 8000d92:	2100      	movs	r1, #0
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 f9ef 	bl	8005178 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d9e:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000da4:	230c      	movs	r3, #12
 8000da6:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000da8:	2302      	movs	r3, #2
 8000daa:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000dac:	2302      	movs	r3, #2
 8000dae:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000db8:	2320      	movs	r3, #32
 8000dba:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fdad 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	bf14      	ite	ne
 8000dd4:	2301      	movne	r3, #1
 8000dd6:	2300      	moveq	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <_Z24PeriphCommonClock_Configv+0x5a>
		Error_Handler();
 8000dde:	f000 f8b7 	bl	8000f50 <Error_Handler>
	}
}
 8000de2:	bf00      	nop
 8000de4:	37c0      	adds	r7, #192	; 0xc0
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000df0:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000df2:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000df4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e34:	481b      	ldr	r0, [pc, #108]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e36:	f003 f909 	bl	800404c <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	bf14      	ite	ne
 8000e40:	2301      	movne	r3, #1
 8000e42:	2300      	moveq	r3, #0
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 8000e4a:	f000 f881 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e52:	f004 f899 	bl	8004f88 <HAL_UARTEx_SetTxFifoThreshold>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	bf14      	ite	ne
 8000e5c:	2301      	movne	r3, #1
 8000e5e:	2300      	moveq	r3, #0
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 8000e66:	f000 f873 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e6e:	f004 f8c9 	bl	8005004 <HAL_UARTEx_SetRxFifoThreshold>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	bf14      	ite	ne
 8000e78:	2301      	movne	r3, #1
 8000e7a:	2300      	moveq	r3, #0
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 8000e82:	f000 f865 	bl	8000f50 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000e86:	4807      	ldr	r0, [pc, #28]	; (8000ea4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000e88:	f004 f845 	bl	8004f16 <HAL_UARTEx_DisableFifoMode>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 8000e9c:	f000 f858 	bl	8000f50 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	24000098 	.word	0x24000098
 8000ea8:	40011000 	.word	0x40011000

08000eac <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000eb2:	f107 030c 	add.w	r3, r7, #12
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a1f      	ldr	r2, [pc, #124]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b19      	ldr	r3, [pc, #100]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a10      	ldr	r2, [pc, #64]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	; (8000f48 <_ZL12MX_GPIO_Initv+0x9c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000f1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f20:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4619      	mov	r1, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <_ZL12MX_GPIO_Initv+0xa0>)
 8000f3a:	f000 fa9b 	bl	8001474 <HAL_GPIO_Init>

}
 8000f3e:	bf00      	nop
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	58024400 	.word	0x58024400
 8000f4c:	58020000 	.word	0x58020000

08000f50 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_MspInit+0x30>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_MspInit+0x30>)
 8000f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0ba      	sub	sp, #232	; 0xe8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	22c0      	movs	r2, #192	; 0xc0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f004 f8e1 	bl	8005178 <memset>
  if(huart->Instance==USART1)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_UART_MspInit+0xc0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d142      	bne.n	8001046 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f001 fcaa 	bl	8002928 <HAL_RCCEx_PeriphCLKConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000fda:	f7ff ffb9 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000fe6:	f043 0310 	orr.w	r3, r3, #16
 8000fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fee:	4b19      	ldr	r3, [pc, #100]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <HAL_UART_MspInit+0xc4>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_UART_MspInit+0xc4>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800101a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800101e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001034:	2307      	movs	r3, #7
 8001036:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_UART_MspInit+0xc8>)
 8001042:	f000 fa17 	bl	8001474 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	37e8      	adds	r7, #232	; 0xe8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40011000 	.word	0x40011000
 8001054:	58024400 	.word	0x58024400
 8001058:	58020000 	.word	0x58020000

0800105c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <NMI_Handler+0x4>

08001062 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <MemManage_Handler+0x4>

0800106e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001072:	e7fe      	b.n	8001072 <BusFault_Handler+0x4>

08001074 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001078:	e7fe      	b.n	8001078 <UsageFault_Handler+0x4>

0800107a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001096:	b480      	push	{r7}
 8001098:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a8:	f000 f8d4 	bl	8001254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <_sbrk+0x5c>)
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <_sbrk+0x60>)
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <_sbrk+0x64>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d102      	bne.n	80010d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <_sbrk+0x64>)
 80010ce:	4a12      	ldr	r2, [pc, #72]	; (8001118 <_sbrk+0x68>)
 80010d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d2:	4b10      	ldr	r3, [pc, #64]	; (8001114 <_sbrk+0x64>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d207      	bcs.n	80010f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e0:	f004 f820 	bl	8005124 <__errno>
 80010e4:	4603      	mov	r3, r0
 80010e6:	220c      	movs	r2, #12
 80010e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	e009      	b.n	8001104 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <_sbrk+0x64>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <_sbrk+0x64>)
 8001100:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001102:	68fb      	ldr	r3, [r7, #12]
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	24080000 	.word	0x24080000
 8001110:	00000400 	.word	0x00000400
 8001114:	24000128 	.word	0x24000128
 8001118:	24000148 	.word	0x24000148

0800111c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800111c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001154 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001120:	f7ff fab2 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480c      	ldr	r0, [pc, #48]	; (8001158 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001126:	490d      	ldr	r1, [pc, #52]	; (800115c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001128:	4a0d      	ldr	r2, [pc, #52]	; (8001160 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800113c:	4c0a      	ldr	r4, [pc, #40]	; (8001168 <LoopFillZerobss+0x22>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800114a:	f003 fff1 	bl	8005130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800114e:	f7ff fd23 	bl	8000b98 <main>
  bx  lr
 8001152:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001154:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001158:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800115c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001160:	08005d4c 	.word	0x08005d4c
  ldr r2, =_sbss
 8001164:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001168:	24000148 	.word	0x24000148

0800116c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800116c:	e7fe      	b.n	800116c <ADC3_IRQHandler>
	...

08001170 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001176:	2003      	movs	r0, #3
 8001178:	f000 f94a 	bl	8001410 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800117c:	f001 f9fe 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8001180:	4602      	mov	r2, r0
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <HAL_Init+0x68>)
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	0a1b      	lsrs	r3, r3, #8
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	4913      	ldr	r1, [pc, #76]	; (80011dc <HAL_Init+0x6c>)
 800118e:	5ccb      	ldrb	r3, [r1, r3]
 8001190:	f003 031f 	and.w	r3, r3, #31
 8001194:	fa22 f303 	lsr.w	r3, r2, r3
 8001198:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800119a:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_Init+0x68>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4a0e      	ldr	r2, [pc, #56]	; (80011dc <HAL_Init+0x6c>)
 80011a4:	5cd3      	ldrb	r3, [r2, r3]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_Init+0x70>)
 80011b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011b4:	4a0b      	ldr	r2, [pc, #44]	; (80011e4 <HAL_Init+0x74>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011ba:	2000      	movs	r0, #0
 80011bc:	f000 f814 	bl	80011e8 <HAL_InitTick>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e002      	b.n	80011d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011ca:	f7ff fec7 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	58024400 	.word	0x58024400
 80011dc:	08005bd0 	.word	0x08005bd0
 80011e0:	24000004 	.word	0x24000004
 80011e4:	24000000 	.word	0x24000000

080011e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_InitTick+0x60>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e021      	b.n	8001240 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_InitTick+0x64>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <HAL_InitTick+0x60>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4619      	mov	r1, r3
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	fbb3 f3f1 	udiv	r3, r3, r1
 800120e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f000 f921 	bl	800145a <HAL_SYSTICK_Config>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e00e      	b.n	8001240 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d80a      	bhi.n	800123e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001228:	2200      	movs	r2, #0
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	f04f 30ff 	mov.w	r0, #4294967295
 8001230:	f000 f8f9 	bl	8001426 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001234:	4a06      	ldr	r2, [pc, #24]	; (8001250 <HAL_InitTick+0x68>)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2400000c 	.word	0x2400000c
 800124c:	24000000 	.word	0x24000000
 8001250:	24000008 	.word	0x24000008

08001254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001258:	4b06      	ldr	r3, [pc, #24]	; (8001274 <HAL_IncTick+0x20>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	461a      	mov	r2, r3
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4413      	add	r3, r2
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_IncTick+0x24>)
 8001266:	6013      	str	r3, [r2, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2400000c 	.word	0x2400000c
 8001278:	24000134 	.word	0x24000134

0800127c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return uwTick;
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_GetTick+0x14>)
 8001282:	681b      	ldr	r3, [r3, #0]
}
 8001284:	4618      	mov	r0, r3
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	24000134 	.word	0x24000134

08001294 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetREVID+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0c1b      	lsrs	r3, r3, #16
}
 800129e:	4618      	mov	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	5c001000 	.word	0x5c001000

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <__NVIC_SetPriorityGrouping+0x40>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <__NVIC_SetPriorityGrouping+0x40>)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	60d3      	str	r3, [r2, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00
 80012f0:	05fa0000 	.word	0x05fa0000

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	; (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	; (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	; 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	; 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013dc:	d301      	bcc.n	80013e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013de:	2301      	movs	r3, #1
 80013e0:	e00f      	b.n	8001402 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e2:	4a0a      	ldr	r2, [pc, #40]	; (800140c <SysTick_Config+0x40>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ea:	210f      	movs	r1, #15
 80013ec:	f04f 30ff 	mov.w	r0, #4294967295
 80013f0:	f7ff ff8e 	bl	8001310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <SysTick_Config+0x40>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <SysTick_Config+0x40>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	e000e010 	.word	0xe000e010

08001410 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff ff47 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
 8001432:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001434:	f7ff ff5e 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001438:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	68b9      	ldr	r1, [r7, #8]
 800143e:	6978      	ldr	r0, [r7, #20]
 8001440:	f7ff ff90 	bl	8001364 <NVIC_EncodePriority>
 8001444:	4602      	mov	r2, r0
 8001446:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800144a:	4611      	mov	r1, r2
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff ff5f 	bl	8001310 <__NVIC_SetPriority>
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b082      	sub	sp, #8
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff ffb2 	bl	80013cc <SysTick_Config>
 8001468:	4603      	mov	r3, r0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	; 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_GPIO_Init+0x234>)
 8001484:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001486:	e194      	b.n	80017b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2101      	movs	r1, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 8186 	beq.w	80017ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d005      	beq.n	80014b8 <HAL_GPIO_Init+0x44>
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d130      	bne.n	800151a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	2203      	movs	r2, #3
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43db      	mvns	r3, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4013      	ands	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014ee:	2201      	movs	r2, #1
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	091b      	lsrs	r3, r3, #4
 8001504:	f003 0201 	and.w	r2, r3, #1
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 0303 	and.w	r3, r3, #3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d017      	beq.n	8001556 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	2203      	movs	r2, #3
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d123      	bne.n	80015aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	08da      	lsrs	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3208      	adds	r2, #8
 800156a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	220f      	movs	r2, #15
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	08da      	lsrs	r2, r3, #3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	3208      	adds	r2, #8
 80015a4:	69b9      	ldr	r1, [r7, #24]
 80015a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0203 	and.w	r2, r3, #3
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	69ba      	ldr	r2, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80e0 	beq.w	80017ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ec:	4b2f      	ldr	r3, [pc, #188]	; (80016ac <HAL_GPIO_Init+0x238>)
 80015ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015f2:	4a2e      	ldr	r2, [pc, #184]	; (80016ac <HAL_GPIO_Init+0x238>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_GPIO_Init+0x238>)
 80015fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800160a:	4a29      	ldr	r2, [pc, #164]	; (80016b0 <HAL_GPIO_Init+0x23c>)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	089b      	lsrs	r3, r3, #2
 8001610:	3302      	adds	r3, #2
 8001612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001616:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0303 	and.w	r3, r3, #3
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	220f      	movs	r2, #15
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a20      	ldr	r2, [pc, #128]	; (80016b4 <HAL_GPIO_Init+0x240>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d052      	beq.n	80016dc <HAL_GPIO_Init+0x268>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a1f      	ldr	r2, [pc, #124]	; (80016b8 <HAL_GPIO_Init+0x244>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d031      	beq.n	80016a2 <HAL_GPIO_Init+0x22e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a1e      	ldr	r2, [pc, #120]	; (80016bc <HAL_GPIO_Init+0x248>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d02b      	beq.n	800169e <HAL_GPIO_Init+0x22a>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a1d      	ldr	r2, [pc, #116]	; (80016c0 <HAL_GPIO_Init+0x24c>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x226>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <HAL_GPIO_Init+0x250>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x222>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_GPIO_Init+0x254>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x21e>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1a      	ldr	r2, [pc, #104]	; (80016cc <HAL_GPIO_Init+0x258>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x21a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <HAL_GPIO_Init+0x25c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x216>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_GPIO_Init+0x260>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x212>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a17      	ldr	r2, [pc, #92]	; (80016d8 <HAL_GPIO_Init+0x264>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x20e>
 800167e:	2309      	movs	r3, #9
 8001680:	e02d      	b.n	80016de <HAL_GPIO_Init+0x26a>
 8001682:	230a      	movs	r3, #10
 8001684:	e02b      	b.n	80016de <HAL_GPIO_Init+0x26a>
 8001686:	2308      	movs	r3, #8
 8001688:	e029      	b.n	80016de <HAL_GPIO_Init+0x26a>
 800168a:	2307      	movs	r3, #7
 800168c:	e027      	b.n	80016de <HAL_GPIO_Init+0x26a>
 800168e:	2306      	movs	r3, #6
 8001690:	e025      	b.n	80016de <HAL_GPIO_Init+0x26a>
 8001692:	2305      	movs	r3, #5
 8001694:	e023      	b.n	80016de <HAL_GPIO_Init+0x26a>
 8001696:	2304      	movs	r3, #4
 8001698:	e021      	b.n	80016de <HAL_GPIO_Init+0x26a>
 800169a:	2303      	movs	r3, #3
 800169c:	e01f      	b.n	80016de <HAL_GPIO_Init+0x26a>
 800169e:	2302      	movs	r3, #2
 80016a0:	e01d      	b.n	80016de <HAL_GPIO_Init+0x26a>
 80016a2:	2301      	movs	r3, #1
 80016a4:	e01b      	b.n	80016de <HAL_GPIO_Init+0x26a>
 80016a6:	bf00      	nop
 80016a8:	58000080 	.word	0x58000080
 80016ac:	58024400 	.word	0x58024400
 80016b0:	58000400 	.word	0x58000400
 80016b4:	58020000 	.word	0x58020000
 80016b8:	58020400 	.word	0x58020400
 80016bc:	58020800 	.word	0x58020800
 80016c0:	58020c00 	.word	0x58020c00
 80016c4:	58021000 	.word	0x58021000
 80016c8:	58021400 	.word	0x58021400
 80016cc:	58021800 	.word	0x58021800
 80016d0:	58021c00 	.word	0x58021c00
 80016d4:	58022000 	.word	0x58022000
 80016d8:	58022400 	.word	0x58022400
 80016dc:	2300      	movs	r3, #0
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	f002 0203 	and.w	r2, r2, #3
 80016e4:	0092      	lsls	r2, r2, #2
 80016e6:	4093      	lsls	r3, r2
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ee:	4938      	ldr	r1, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x35c>)
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	3302      	adds	r3, #2
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	43db      	mvns	r3, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4013      	ands	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d003      	beq.n	8001722 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001722:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800172a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	43db      	mvns	r3, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	4313      	orrs	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	43db      	mvns	r3, r3
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	4013      	ands	r3, r2
 8001790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f47f ae63 	bne.w	8001488 <HAL_GPIO_Init+0x14>
  }
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	58000400 	.word	0x58000400

080017d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017dc:	4a08      	ldr	r2, [pc, #32]	; (8001800 <HAL_HSEM_FastTake+0x2c>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3320      	adds	r3, #32
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	4a07      	ldr	r2, [pc, #28]	; (8001804 <HAL_HSEM_FastTake+0x30>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d101      	bne.n	80017f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017ec:	2300      	movs	r3, #0
 80017ee:	e000      	b.n	80017f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	58026400 	.word	0x58026400
 8001804:	80000300 	.word	0x80000300

08001808 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001812:	4906      	ldr	r1, [pc, #24]	; (800182c <HAL_HSEM_Release+0x24>)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	58026400 	.word	0x58026400

08001830 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001838:	4b29      	ldr	r3, [pc, #164]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	2b06      	cmp	r3, #6
 8001842:	d00a      	beq.n	800185a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001844:	4b26      	ldr	r3, [pc, #152]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	429a      	cmp	r2, r3
 8001850:	d001      	beq.n	8001856 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e040      	b.n	80018d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e03e      	b.n	80018d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001862:	491f      	ldr	r1, [pc, #124]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	4313      	orrs	r3, r2
 8001868:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800186a:	f7ff fd07 	bl	800127c <HAL_GetTick>
 800186e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001870:	e009      	b.n	8001886 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001872:	f7ff fd03 	bl	800127c <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001880:	d901      	bls.n	8001886 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e028      	b.n	80018d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001892:	d1ee      	bne.n	8001872 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b1e      	cmp	r3, #30
 8001898:	d008      	beq.n	80018ac <HAL_PWREx_ConfigSupply+0x7c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b2e      	cmp	r3, #46	; 0x2e
 800189e:	d005      	beq.n	80018ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b1d      	cmp	r3, #29
 80018a4:	d002      	beq.n	80018ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b2d      	cmp	r3, #45	; 0x2d
 80018aa:	d114      	bne.n	80018d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018ac:	f7ff fce6 	bl	800127c <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018b2:	e009      	b.n	80018c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018b4:	f7ff fce2 	bl	800127c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018c2:	d901      	bls.n	80018c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e007      	b.n	80018d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018c8:	4b05      	ldr	r3, [pc, #20]	; (80018e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018d4:	d1ee      	bne.n	80018b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	58024800 	.word	0x58024800

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f000 bc1c 	b.w	8002130 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 8087 	beq.w	8001a14 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001906:	4b9e      	ldr	r3, [pc, #632]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001910:	4b9b      	ldr	r3, [pc, #620]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	2b10      	cmp	r3, #16
 800191a:	d007      	beq.n	800192c <HAL_RCC_OscConfig+0x48>
 800191c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191e:	2b18      	cmp	r3, #24
 8001920:	d110      	bne.n	8001944 <HAL_RCC_OscConfig+0x60>
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d10b      	bne.n	8001944 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4b94      	ldr	r3, [pc, #592]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d06c      	beq.n	8001a12 <HAL_RCC_OscConfig+0x12e>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d168      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e3f5      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194c:	d106      	bne.n	800195c <HAL_RCC_OscConfig+0x78>
 800194e:	4b8c      	ldr	r3, [pc, #560]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a8b      	ldr	r2, [pc, #556]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e02e      	b.n	80019ba <HAL_RCC_OscConfig+0xd6>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x9a>
 8001964:	4b86      	ldr	r3, [pc, #536]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a85      	ldr	r2, [pc, #532]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b83      	ldr	r3, [pc, #524]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a82      	ldr	r2, [pc, #520]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]
 800197c:	e01d      	b.n	80019ba <HAL_RCC_OscConfig+0xd6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0xbe>
 8001988:	4b7d      	ldr	r3, [pc, #500]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a7c      	ldr	r2, [pc, #496]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 800198e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]
 8001994:	4b7a      	ldr	r3, [pc, #488]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a79      	ldr	r2, [pc, #484]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0xd6>
 80019a2:	4b77      	ldr	r3, [pc, #476]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a76      	ldr	r2, [pc, #472]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 80019a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b74      	ldr	r3, [pc, #464]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a73      	ldr	r2, [pc, #460]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 80019b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d013      	beq.n	80019ea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c2:	f7ff fc5b 	bl	800127c <HAL_GetTick>
 80019c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff fc57 	bl	800127c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b64      	cmp	r3, #100	; 0x64
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e3a9      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019dc:	4b68      	ldr	r3, [pc, #416]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0xe6>
 80019e8:	e014      	b.n	8001a14 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff fc47 	bl	800127c <HAL_GetTick>
 80019ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f2:	f7ff fc43 	bl	800127c <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b64      	cmp	r3, #100	; 0x64
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e395      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a04:	4b5e      	ldr	r3, [pc, #376]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d1f0      	bne.n	80019f2 <HAL_RCC_OscConfig+0x10e>
 8001a10:	e000      	b.n	8001a14 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80ca 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a22:	4b57      	ldr	r3, [pc, #348]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a2a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a2c:	4b54      	ldr	r3, [pc, #336]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d007      	beq.n	8001a48 <HAL_RCC_OscConfig+0x164>
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b18      	cmp	r3, #24
 8001a3c:	d156      	bne.n	8001aec <HAL_RCC_OscConfig+0x208>
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d151      	bne.n	8001aec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a48:	4b4d      	ldr	r3, [pc, #308]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x17c>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e367      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a60:	4b47      	ldr	r3, [pc, #284]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 0219 	bic.w	r2, r3, #25
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4944      	ldr	r1, [pc, #272]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a72:	f7ff fc03 	bl	800127c <HAL_GetTick>
 8001a76:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff fbff 	bl	800127c <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e351      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a8c:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	f7ff fbfc 	bl	8001294 <HAL_GetREVID>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d817      	bhi.n	8001ad6 <HAL_RCC_OscConfig+0x1f2>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	2b40      	cmp	r3, #64	; 0x40
 8001aac:	d108      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1dc>
 8001aae:	4b34      	ldr	r3, [pc, #208]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001ab6:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001abc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001abe:	e07a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac0:	4b2f      	ldr	r3, [pc, #188]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	031b      	lsls	r3, r3, #12
 8001ace:	492c      	ldr	r1, [pc, #176]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ad4:	e06f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b2a      	ldr	r3, [pc, #168]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	061b      	lsls	r3, r3, #24
 8001ae4:	4926      	ldr	r1, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aea:	e064      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d047      	beq.n	8001b84 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001af4:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f023 0219 	bic.w	r2, r3, #25
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	491f      	ldr	r1, [pc, #124]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fbb9 	bl	800127c <HAL_GetTick>
 8001b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0e:	f7ff fbb5 	bl	800127c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e307      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b20:	4b17      	ldr	r3, [pc, #92]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2c:	f7ff fbb2 	bl	8001294 <HAL_GetREVID>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d817      	bhi.n	8001b6a <HAL_RCC_OscConfig+0x286>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	2b40      	cmp	r3, #64	; 0x40
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x270>
 8001b42:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001b4a:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b50:	6053      	str	r3, [r2, #4]
 8001b52:	e030      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
 8001b54:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	031b      	lsls	r3, r3, #12
 8001b62:	4907      	ldr	r1, [pc, #28]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
 8001b68:	e025      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	4901      	ldr	r1, [pc, #4]	; (8001b80 <HAL_RCC_OscConfig+0x29c>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	604b      	str	r3, [r1, #4]
 8001b7e:	e01a      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2d2>
 8001b80:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b84:	4b9e      	ldr	r3, [pc, #632]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a9d      	ldr	r2, [pc, #628]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fb74 	bl	800127c <HAL_GetTick>
 8001b94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b98:	f7ff fb70 	bl	800127c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e2c2      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001baa:	4b95      	ldr	r3, [pc, #596]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	f000 80a9 	beq.w	8001d16 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bc4:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bce:	4b8c      	ldr	r3, [pc, #560]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d007      	beq.n	8001bea <HAL_RCC_OscConfig+0x306>
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b18      	cmp	r3, #24
 8001bde:	d13a      	bne.n	8001c56 <HAL_RCC_OscConfig+0x372>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d135      	bne.n	8001c56 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bea:	4b85      	ldr	r3, [pc, #532]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_RCC_OscConfig+0x31e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	2b80      	cmp	r3, #128	; 0x80
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e296      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c02:	f7ff fb47 	bl	8001294 <HAL_GetREVID>
 8001c06:	4603      	mov	r3, r0
 8001c08:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d817      	bhi.n	8001c40 <HAL_RCC_OscConfig+0x35c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	2b20      	cmp	r3, #32
 8001c16:	d108      	bne.n	8001c2a <HAL_RCC_OscConfig+0x346>
 8001c18:	4b79      	ldr	r3, [pc, #484]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c20:	4a77      	ldr	r2, [pc, #476]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c26:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c28:	e075      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c2a:	4b75      	ldr	r3, [pc, #468]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	069b      	lsls	r3, r3, #26
 8001c38:	4971      	ldr	r1, [pc, #452]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c3e:	e06a      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c40:	4b6f      	ldr	r3, [pc, #444]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	061b      	lsls	r3, r3, #24
 8001c4e:	496c      	ldr	r1, [pc, #432]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c54:	e05f      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d042      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c5e:	4b68      	ldr	r3, [pc, #416]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a67      	ldr	r2, [pc, #412]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6a:	f7ff fb07 	bl	800127c <HAL_GetTick>
 8001c6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c72:	f7ff fb03 	bl	800127c <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e255      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c84:	4b5e      	ldr	r3, [pc, #376]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c90:	f7ff fb00 	bl	8001294 <HAL_GetREVID>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d817      	bhi.n	8001cce <HAL_RCC_OscConfig+0x3ea>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3d4>
 8001ca6:	4b56      	ldr	r3, [pc, #344]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001cae:	4a54      	ldr	r2, [pc, #336]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001cb4:	6053      	str	r3, [r2, #4]
 8001cb6:	e02e      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
 8001cb8:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	069b      	lsls	r3, r3, #26
 8001cc6:	494e      	ldr	r1, [pc, #312]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
 8001ccc:	e023      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
 8001cce:	4b4c      	ldr	r3, [pc, #304]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	061b      	lsls	r3, r3, #24
 8001cdc:	4948      	ldr	r1, [pc, #288]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60cb      	str	r3, [r1, #12]
 8001ce2:	e018      	b.n	8001d16 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ce4:	4b46      	ldr	r3, [pc, #280]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a45      	ldr	r2, [pc, #276]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001cea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fac4 	bl	800127c <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fac0 	bl	800127c <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e212      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d036      	beq.n	8001d90 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d019      	beq.n	8001d5e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b35      	ldr	r3, [pc, #212]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2e:	4a34      	ldr	r2, [pc, #208]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7ff faa1 	bl	800127c <HAL_GetTick>
 8001d3a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fa9d 	bl	800127c <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1ef      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x45a>
 8001d5c:	e018      	b.n	8001d90 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b28      	ldr	r3, [pc, #160]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	4a27      	ldr	r2, [pc, #156]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7ff fa87 	bl	800127c <HAL_GetTick>
 8001d6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7ff fa83 	bl	800127c <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1d5      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d84:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f0      	bne.n	8001d72 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0320 	and.w	r3, r3, #32
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d039      	beq.n	8001e10 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d019      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a15      	ldr	r2, [pc, #84]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001daa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001db0:	f7ff fa64 	bl	800127c <HAL_GetTick>
 8001db4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001db8:	f7ff fa60 	bl	800127c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1b2      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dca:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x4d4>
 8001dd6:	e01b      	b.n	8001e10 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <HAL_RCC_OscConfig+0x51c>)
 8001dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001de4:	f7ff fa4a 	bl	800127c <HAL_GetTick>
 8001de8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001dec:	f7ff fa46 	bl	800127c <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d904      	bls.n	8001e04 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e198      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e04:	4ba3      	ldr	r3, [pc, #652]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d1ed      	bne.n	8001dec <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8081 	beq.w	8001f20 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e1e:	4b9e      	ldr	r3, [pc, #632]	; (8002098 <HAL_RCC_OscConfig+0x7b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a9d      	ldr	r2, [pc, #628]	; (8002098 <HAL_RCC_OscConfig+0x7b4>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e2a:	f7ff fa27 	bl	800127c <HAL_GetTick>
 8001e2e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001e32:	f7ff fa23 	bl	800127c <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b64      	cmp	r3, #100	; 0x64
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e175      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e44:	4b94      	ldr	r3, [pc, #592]	; (8002098 <HAL_RCC_OscConfig+0x7b4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x582>
 8001e58:	4b8e      	ldr	r3, [pc, #568]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5c:	4a8d      	ldr	r2, [pc, #564]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	6713      	str	r3, [r2, #112]	; 0x70
 8001e64:	e02d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5de>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x5a4>
 8001e6e:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a88      	ldr	r2, [pc, #544]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
 8001e7a:	4b86      	ldr	r3, [pc, #536]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7e:	4a85      	ldr	r2, [pc, #532]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e80:	f023 0304 	bic.w	r3, r3, #4
 8001e84:	6713      	str	r3, [r2, #112]	; 0x70
 8001e86:	e01c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5de>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b05      	cmp	r3, #5
 8001e8e:	d10c      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5c6>
 8001e90:	4b80      	ldr	r3, [pc, #512]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a7f      	ldr	r2, [pc, #508]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e9c:	4b7d      	ldr	r3, [pc, #500]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea0:	4a7c      	ldr	r2, [pc, #496]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001ea2:	f043 0301 	orr.w	r3, r3, #1
 8001ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ea8:	e00b      	b.n	8001ec2 <HAL_RCC_OscConfig+0x5de>
 8001eaa:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eae:	4a79      	ldr	r2, [pc, #484]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001eb6:	4b77      	ldr	r3, [pc, #476]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eba:	4a76      	ldr	r2, [pc, #472]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d015      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7ff f9d7 	bl	800127c <HAL_GetTick>
 8001ece:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f9d3 	bl	800127c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e123      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee8:	4b6a      	ldr	r3, [pc, #424]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0ee      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x5ee>
 8001ef4:	e014      	b.n	8001f20 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef6:	f7ff f9c1 	bl	800127c <HAL_GetTick>
 8001efa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff f9bd 	bl	800127c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e10d      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f14:	4b5f      	ldr	r3, [pc, #380]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1ee      	bne.n	8001efe <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 8102 	beq.w	800212e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f2a:	4b5a      	ldr	r3, [pc, #360]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f32:	2b18      	cmp	r3, #24
 8001f34:	f000 80bd 	beq.w	80020b2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	f040 8095 	bne.w	800206c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f42:	4b54      	ldr	r3, [pc, #336]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a53      	ldr	r2, [pc, #332]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff f995 	bl	800127c <HAL_GetTick>
 8001f52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff f991 	bl	800127c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e0e3      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f68:	4b4a      	ldr	r3, [pc, #296]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b47      	ldr	r3, [pc, #284]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <HAL_RCC_OscConfig+0x7b8>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f84:	0112      	lsls	r2, r2, #4
 8001f86:	430a      	orrs	r2, r1
 8001f88:	4942      	ldr	r1, [pc, #264]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	628b      	str	r3, [r1, #40]	; 0x28
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	3b01      	subs	r3, #1
 8001f94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	025b      	lsls	r3, r3, #9
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	041b      	lsls	r3, r3, #16
 8001fac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	061b      	lsls	r3, r3, #24
 8001fba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001fbe:	4935      	ldr	r1, [pc, #212]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001fc4:	4b33      	ldr	r3, [pc, #204]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4a32      	ldr	r2, [pc, #200]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fca:	f023 0301 	bic.w	r3, r3, #1
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fd0:	4b30      	ldr	r3, [pc, #192]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fd4:	4b32      	ldr	r3, [pc, #200]	; (80020a0 <HAL_RCC_OscConfig+0x7bc>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fdc:	00d2      	lsls	r2, r2, #3
 8001fde:	492d      	ldr	r1, [pc, #180]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	f023 020c 	bic.w	r2, r3, #12
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4928      	ldr	r1, [pc, #160]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	f023 0202 	bic.w	r2, r3, #2
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4924      	ldr	r1, [pc, #144]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002004:	4313      	orrs	r3, r2
 8002006:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002008:	4b22      	ldr	r3, [pc, #136]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	4a21      	ldr	r2, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800200e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002012:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002014:	4b1f      	ldr	r3, [pc, #124]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	4a1e      	ldr	r2, [pc, #120]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800201a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002020:	4b1c      	ldr	r3, [pc, #112]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002026:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800202a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800202c:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002032:	f043 0301 	orr.w	r3, r3, #1
 8002036:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002038:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7ff f91a 	bl	800127c <HAL_GetTick>
 8002048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff f916 	bl	800127c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e068      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x768>
 800206a:	e060      	b.n	800212e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a08      	ldr	r2, [pc, #32]	; (8002094 <HAL_RCC_OscConfig+0x7b0>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7ff f900 	bl	800127c <HAL_GetTick>
 800207c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800207e:	e011      	b.n	80020a4 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff f8fc 	bl	800127c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d90a      	bls.n	80020a4 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e04e      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
 8002098:	58024800 	.word	0x58024800
 800209c:	fffffc0c 	.word	0xfffffc0c
 80020a0:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <HAL_RCC_OscConfig+0x854>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e7      	bne.n	8002080 <HAL_RCC_OscConfig+0x79c>
 80020b0:	e03d      	b.n	800212e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020b2:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x854>)
 80020b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_RCC_OscConfig+0x854>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020bc:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d031      	beq.n	800212a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d12a      	bne.n	800212a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	091b      	lsrs	r3, r3, #4
 80020d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d122      	bne.n	800212a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d11a      	bne.n	800212a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	0a5b      	lsrs	r3, r3, #9
 80020f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d111      	bne.n	800212a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d108      	bne.n	800212a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	0e1b      	lsrs	r3, r3, #24
 800211c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002124:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3730      	adds	r7, #48	; 0x30
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	58024400 	.word	0x58024400

0800213c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b086      	sub	sp, #24
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e19c      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b8a      	ldr	r3, [pc, #552]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d910      	bls.n	8002180 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b87      	ldr	r3, [pc, #540]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 020f 	bic.w	r2, r3, #15
 8002166:	4985      	ldr	r1, [pc, #532]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	4313      	orrs	r3, r2
 800216c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b83      	ldr	r3, [pc, #524]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e184      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b7b      	ldr	r3, [pc, #492]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800219c:	4b78      	ldr	r3, [pc, #480]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4975      	ldr	r1, [pc, #468]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0308 	and.w	r3, r3, #8
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	4b70      	ldr	r3, [pc, #448]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	496a      	ldr	r1, [pc, #424]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0310 	and.w	r3, r3, #16
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699a      	ldr	r2, [r3, #24]
 80021ec:	4b64      	ldr	r3, [pc, #400]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021f8:	4b61      	ldr	r3, [pc, #388]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	495e      	ldr	r1, [pc, #376]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0320 	and.w	r3, r3, #32
 8002212:	2b00      	cmp	r3, #0
 8002214:	d010      	beq.n	8002238 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69da      	ldr	r2, [r3, #28]
 800221a:	4b59      	ldr	r3, [pc, #356]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002222:	429a      	cmp	r2, r3
 8002224:	d908      	bls.n	8002238 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	4953      	ldr	r1, [pc, #332]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002234:	4313      	orrs	r3, r2
 8002236:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0302 	and.w	r3, r3, #2
 8002240:	2b00      	cmp	r3, #0
 8002242:	d010      	beq.n	8002266 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68da      	ldr	r2, [r3, #12]
 8002248:	4b4d      	ldr	r3, [pc, #308]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 030f 	and.w	r3, r3, #15
 8002250:	429a      	cmp	r2, r3
 8002252:	d908      	bls.n	8002266 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	f023 020f 	bic.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4947      	ldr	r1, [pc, #284]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002262:	4313      	orrs	r3, r2
 8002264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d055      	beq.n	800231e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002272:	4b43      	ldr	r3, [pc, #268]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4940      	ldr	r1, [pc, #256]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002280:	4313      	orrs	r3, r2
 8002282:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d107      	bne.n	800229c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800228c:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d121      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0f6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d107      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d115      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0ea      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80022bc:	4b30      	ldr	r3, [pc, #192]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d109      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0de      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022cc:	4b2c      	ldr	r3, [pc, #176]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e0d6      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022dc:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	f023 0207 	bic.w	r2, r3, #7
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	4925      	ldr	r1, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe ffc5 	bl	800127c <HAL_GetTick>
 80022f2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f4:	e00a      	b.n	800230c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f6:	f7fe ffc1 	bl	800127c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0be      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230c:	4b1c      	ldr	r3, [pc, #112]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	429a      	cmp	r2, r3
 800231c:	d1eb      	bne.n	80022f6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d010      	beq.n	800234c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68da      	ldr	r2, [r3, #12]
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	429a      	cmp	r2, r3
 8002338:	d208      	bcs.n	800234c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	490e      	ldr	r1, [pc, #56]	; (8002380 <HAL_RCC_ClockConfig+0x244>)
 8002348:	4313      	orrs	r3, r2
 800234a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 030f 	and.w	r3, r3, #15
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d214      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 020f 	bic.w	r2, r3, #15
 8002362:	4906      	ldr	r1, [pc, #24]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b04      	ldr	r3, [pc, #16]	; (800237c <HAL_RCC_ClockConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e086      	b.n	800248a <HAL_RCC_ClockConfig+0x34e>
 800237c:	52002000 	.word	0x52002000
 8002380:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	4b3f      	ldr	r3, [pc, #252]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002396:	699b      	ldr	r3, [r3, #24]
 8002398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80023a0:	4b3c      	ldr	r3, [pc, #240]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4939      	ldr	r1, [pc, #228]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0308 	and.w	r3, r3, #8
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695a      	ldr	r2, [r3, #20]
 80023c2:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	492e      	ldr	r1, [pc, #184]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d010      	beq.n	800240e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699a      	ldr	r2, [r3, #24]
 80023f0:	4b28      	ldr	r3, [pc, #160]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023f2:	69db      	ldr	r3, [r3, #28]
 80023f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d208      	bcs.n	800240e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023fc:	4b25      	ldr	r3, [pc, #148]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 80023fe:	69db      	ldr	r3, [r3, #28]
 8002400:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	4922      	ldr	r1, [pc, #136]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800240a:	4313      	orrs	r3, r2
 800240c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d010      	beq.n	800243c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002426:	429a      	cmp	r2, r3
 8002428:	d208      	bcs.n	800243c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800242a:	4b1a      	ldr	r3, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	4917      	ldr	r1, [pc, #92]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002438:	4313      	orrs	r3, r2
 800243a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800243c:	f000 f89e 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002440:	4602      	mov	r2, r0
 8002442:	4b14      	ldr	r3, [pc, #80]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	0a1b      	lsrs	r3, r3, #8
 8002448:	f003 030f 	and.w	r3, r3, #15
 800244c:	4912      	ldr	r1, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 800244e:	5ccb      	ldrb	r3, [r1, r3]
 8002450:	f003 031f 	and.w	r3, r3, #31
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800245a:	4b0e      	ldr	r3, [pc, #56]	; (8002494 <HAL_RCC_ClockConfig+0x358>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	4a0d      	ldr	r2, [pc, #52]	; (8002498 <HAL_RCC_ClockConfig+0x35c>)
 8002464:	5cd3      	ldrb	r3, [r2, r3]
 8002466:	f003 031f 	and.w	r3, r3, #31
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	4a0a      	ldr	r2, [pc, #40]	; (800249c <HAL_RCC_ClockConfig+0x360>)
 8002472:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <HAL_RCC_ClockConfig+0x364>)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_RCC_ClockConfig+0x368>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe feb2 	bl	80011e8 <HAL_InitTick>
 8002484:	4603      	mov	r3, r0
 8002486:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	08005bd0 	.word	0x08005bd0
 800249c:	24000004 	.word	0x24000004
 80024a0:	24000000 	.word	0x24000000
 80024a4:	24000008 	.word	0x24000008

080024a8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d12a      	bne.n	8002510 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 80024bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 80024c2:	f043 0301 	orr.w	r3, r3, #1
 80024c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ca:	4b29      	ldr	r3, [pc, #164]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 80024cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80024d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	2302      	movs	r3, #2
 80024e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80024ee:	f107 031c 	add.w	r3, r7, #28
 80024f2:	4619      	mov	r1, r3
 80024f4:	481f      	ldr	r0, [pc, #124]	; (8002574 <HAL_RCC_MCOConfig+0xcc>)
 80024f6:	f7fe ffbd 	bl	8001474 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	430b      	orrs	r3, r1
 8002508:	4919      	ldr	r1, [pc, #100]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 800250a:	4313      	orrs	r3, r2
 800250c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800250e:	e02a      	b.n	8002566 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002510:	4b17      	ldr	r3, [pc, #92]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 8002512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002516:	4a16      	ldr	r2, [pc, #88]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002520:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 8002522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800252e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002544:	f107 031c 	add.w	r3, r7, #28
 8002548:	4619      	mov	r1, r3
 800254a:	480b      	ldr	r0, [pc, #44]	; (8002578 <HAL_RCC_MCOConfig+0xd0>)
 800254c:	f7fe ff92 	bl	8001474 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	01d9      	lsls	r1, r3, #7
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	430b      	orrs	r3, r1
 8002560:	4903      	ldr	r1, [pc, #12]	; (8002570 <HAL_RCC_MCOConfig+0xc8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	610b      	str	r3, [r1, #16]
}
 8002566:	bf00      	nop
 8002568:	3730      	adds	r7, #48	; 0x30
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	58020000 	.word	0x58020000
 8002578:	58020800 	.word	0x58020800

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	b089      	sub	sp, #36	; 0x24
 8002580:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002582:	4bb3      	ldr	r3, [pc, #716]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800258a:	2b18      	cmp	r3, #24
 800258c:	f200 8155 	bhi.w	800283a <HAL_RCC_GetSysClockFreq+0x2be>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025fd 	.word	0x080025fd
 800259c:	0800283b 	.word	0x0800283b
 80025a0:	0800283b 	.word	0x0800283b
 80025a4:	0800283b 	.word	0x0800283b
 80025a8:	0800283b 	.word	0x0800283b
 80025ac:	0800283b 	.word	0x0800283b
 80025b0:	0800283b 	.word	0x0800283b
 80025b4:	0800283b 	.word	0x0800283b
 80025b8:	08002623 	.word	0x08002623
 80025bc:	0800283b 	.word	0x0800283b
 80025c0:	0800283b 	.word	0x0800283b
 80025c4:	0800283b 	.word	0x0800283b
 80025c8:	0800283b 	.word	0x0800283b
 80025cc:	0800283b 	.word	0x0800283b
 80025d0:	0800283b 	.word	0x0800283b
 80025d4:	0800283b 	.word	0x0800283b
 80025d8:	08002629 	.word	0x08002629
 80025dc:	0800283b 	.word	0x0800283b
 80025e0:	0800283b 	.word	0x0800283b
 80025e4:	0800283b 	.word	0x0800283b
 80025e8:	0800283b 	.word	0x0800283b
 80025ec:	0800283b 	.word	0x0800283b
 80025f0:	0800283b 	.word	0x0800283b
 80025f4:	0800283b 	.word	0x0800283b
 80025f8:	0800262f 	.word	0x0800262f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025fc:	4b94      	ldr	r3, [pc, #592]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0320 	and.w	r3, r3, #32
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002608:	4b91      	ldr	r3, [pc, #580]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	08db      	lsrs	r3, r3, #3
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	4a90      	ldr	r2, [pc, #576]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800261a:	e111      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800261c:	4b8d      	ldr	r3, [pc, #564]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261e:	61bb      	str	r3, [r7, #24]
    break;
 8002620:	e10e      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002622:	4b8d      	ldr	r3, [pc, #564]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002624:	61bb      	str	r3, [r7, #24]
    break;
 8002626:	e10b      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002628:	4b8c      	ldr	r3, [pc, #560]	; (800285c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800262a:	61bb      	str	r3, [r7, #24]
    break;
 800262c:	e108      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800262e:	4b88      	ldr	r3, [pc, #544]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002638:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002642:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002644:	4b82      	ldr	r3, [pc, #520]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800264e:	4b80      	ldr	r3, [pc, #512]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	fb02 f303 	mul.w	r3, r2, r3
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002666:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	f000 80e1 	beq.w	8002834 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f000 8083 	beq.w	8002780 <HAL_RCC_GetSysClockFreq+0x204>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f200 80a1 	bhi.w	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_RCC_GetSysClockFreq+0x114>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d056      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x1c0>
 800268e:	e099      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0320 	and.w	r3, r3, #32
 8002698:	2b00      	cmp	r3, #0
 800269a:	d02d      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	08db      	lsrs	r3, r3, #3
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	4a6b      	ldr	r2, [pc, #428]	; (8002854 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	ee07 3a90 	vmov	s15, r3
 80026be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026c6:	4b62      	ldr	r3, [pc, #392]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80026f6:	e087      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	ee07 3a90 	vmov	s15, r3
 80026fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002702:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002864 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800270a:	4b51      	ldr	r3, [pc, #324]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800271a:	ed97 6a02 	vldr	s12, [r7, #8]
 800271e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800272a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800272e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002736:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800273a:	e065      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	ee07 3a90 	vmov	s15, r3
 8002742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002746:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 800274a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800274e:	4b40      	ldr	r3, [pc, #256]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800275e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002762:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800276a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800276e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800277e:	e043      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800278a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800286c <HAL_RCC_GetSysClockFreq+0x2f0>
 800278e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002792:	4b2f      	ldr	r3, [pc, #188]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80027a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027c2:	e021      	b.n	8002808 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002868 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002860 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80027fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002802:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002806:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002812:	3301      	adds	r3, #1
 8002814:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002820:	edd7 6a07 	vldr	s13, [r7, #28]
 8002824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800282c:	ee17 3a90 	vmov	r3, s15
 8002830:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002832:	e005      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    break;
 8002838:	e002      	b.n	8002840 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800283a:	4b07      	ldr	r3, [pc, #28]	; (8002858 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800283c:	61bb      	str	r3, [r7, #24]
    break;
 800283e:	bf00      	nop
  }

  return sysclockfreq;
 8002840:	69bb      	ldr	r3, [r7, #24]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3724      	adds	r7, #36	; 0x24
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	58024400 	.word	0x58024400
 8002854:	03d09000 	.word	0x03d09000
 8002858:	003d0900 	.word	0x003d0900
 800285c:	017d7840 	.word	0x017d7840
 8002860:	46000000 	.word	0x46000000
 8002864:	4c742400 	.word	0x4c742400
 8002868:	4a742400 	.word	0x4a742400
 800286c:	4bbebc20 	.word	0x4bbebc20

08002870 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002876:	f7ff fe81 	bl	800257c <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b10      	ldr	r3, [pc, #64]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490f      	ldr	r1, [pc, #60]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	f003 031f 	and.w	r3, r3, #31
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002894:	4b0a      	ldr	r3, [pc, #40]	; (80028c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	fa22 f303 	lsr.w	r3, r2, r3
 80028aa:	4a07      	ldr	r2, [pc, #28]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ae:	4a07      	ldr	r2, [pc, #28]	; (80028cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b6:	681b      	ldr	r3, [r3, #0]
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	58024400 	.word	0x58024400
 80028c4:	08005bd0 	.word	0x08005bd0
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000

080028d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028d4:	f7ff ffcc 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 80028d8:	4602      	mov	r2, r0
 80028da:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028dc:	69db      	ldr	r3, [r3, #28]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	4904      	ldr	r1, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028e6:	5ccb      	ldrb	r3, [r1, r3]
 80028e8:	f003 031f 	and.w	r3, r3, #31
 80028ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	58024400 	.word	0x58024400
 80028f8:	08005bd0 	.word	0x08005bd0

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002900:	f7ff ffb6 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8002904:	4602      	mov	r2, r0
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	0a1b      	lsrs	r3, r3, #8
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	4904      	ldr	r1, [pc, #16]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002912:	5ccb      	ldrb	r3, [r1, r3]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	58024400 	.word	0x58024400
 8002924:	08005bd0 	.word	0x08005bd0

08002928 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002930:	2300      	movs	r3, #0
 8002932:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002934:	2300      	movs	r3, #0
 8002936:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03f      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800294c:	d02a      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800294e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002952:	d824      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002958:	d018      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800295a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800295e:	d81e      	bhi.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d003      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002968:	d007      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800296a:	e018      	b.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296c:	4bab      	ldr	r3, [pc, #684]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	4aaa      	ldr	r2, [pc, #680]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002972:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002976:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002978:	e015      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3304      	adds	r3, #4
 800297e:	2102      	movs	r1, #2
 8002980:	4618      	mov	r0, r3
 8002982:	f001 f9ff 	bl	8003d84 <RCCEx_PLL2_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800298a:	e00c      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3324      	adds	r3, #36	; 0x24
 8002990:	2102      	movs	r1, #2
 8002992:	4618      	mov	r0, r3
 8002994:	f001 faa8 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002998:	4603      	mov	r3, r0
 800299a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	75fb      	strb	r3, [r7, #23]
      break;
 80029a2:	e000      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80029a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a6:	7dfb      	ldrb	r3, [r7, #23]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80029ac:	4b9b      	ldr	r3, [pc, #620]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b8:	4998      	ldr	r1, [pc, #608]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	650b      	str	r3, [r1, #80]	; 0x50
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d03d      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d826      	bhi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80029d8:	a201      	add	r2, pc, #4	; (adr r2, 80029e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80029da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029de:	bf00      	nop
 80029e0:	080029f5 	.word	0x080029f5
 80029e4:	08002a03 	.word	0x08002a03
 80029e8:	08002a15 	.word	0x08002a15
 80029ec:	08002a2d 	.word	0x08002a2d
 80029f0:	08002a2d 	.word	0x08002a2d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f4:	4b89      	ldr	r3, [pc, #548]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	4a88      	ldr	r2, [pc, #544]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a00:	e015      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	3304      	adds	r3, #4
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f001 f9bb 	bl	8003d84 <RCCEx_PLL2_Config>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a12:	e00c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3324      	adds	r3, #36	; 0x24
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f001 fa64 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a24:	e003      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	75fb      	strb	r3, [r7, #23]
      break;
 8002a2a:	e000      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002a2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a2e:	7dfb      	ldrb	r3, [r7, #23]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d109      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a34:	4b79      	ldr	r3, [pc, #484]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a38:	f023 0207 	bic.w	r2, r3, #7
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	4976      	ldr	r1, [pc, #472]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	650b      	str	r3, [r1, #80]	; 0x50
 8002a46:	e001      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a48:	7dfb      	ldrb	r3, [r7, #23]
 8002a4a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d042      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a60:	d02b      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a66:	d825      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a68:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6a:	d028      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002a6c:	2bc0      	cmp	r3, #192	; 0xc0
 8002a6e:	d821      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a70:	2b80      	cmp	r3, #128	; 0x80
 8002a72:	d016      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002a74:	2b80      	cmp	r3, #128	; 0x80
 8002a76:	d81d      	bhi.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d007      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a80:	e018      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002a8e:	e017      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3304      	adds	r3, #4
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f001 f974 	bl	8003d84 <RCCEx_PLL2_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002aa0:	e00e      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	3324      	adds	r3, #36	; 0x24
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f001 fa1d 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	4952      	ldr	r1, [pc, #328]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	650b      	str	r3, [r1, #80]	; 0x50
 8002ad8:	e001      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d049      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002af0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002af4:	d030      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8002af6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002afa:	d82a      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002afc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b00:	d02c      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8002b02:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002b06:	d824      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b0c:	d018      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b12:	d81e      	bhi.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002b18:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b1c:	d007      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002b1e:	e018      	b.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b20:	4b3e      	ldr	r3, [pc, #248]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b24:	4a3d      	ldr	r2, [pc, #244]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b2c:	e017      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f001 f925 	bl	8003d84 <RCCEx_PLL2_Config>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002b3e:	e00e      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3324      	adds	r3, #36	; 0x24
 8002b44:	2100      	movs	r1, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f9ce 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002b50:	e005      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	75fb      	strb	r3, [r7, #23]
      break;
 8002b56:	e002      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e000      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002b5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10a      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b64:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002b72:	492a      	ldr	r1, [pc, #168]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	658b      	str	r3, [r1, #88]	; 0x58
 8002b78:	e001      	b.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d04c      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b94:	d030      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b9a:	d82a      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002b9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba0:	d02c      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002ba2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ba6:	d824      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002ba8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bac:	d018      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002bae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bb2:	d81e      	bhi.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d003      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bbc:	d007      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002bbe:	e018      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bc0:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc4:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bcc:	e017      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 f8d5 	bl	8003d84 <RCCEx_PLL2_Config>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002bde:	e00e      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3324      	adds	r3, #36	; 0x24
 8002be4:	2100      	movs	r1, #0
 8002be6:	4618      	mov	r0, r3
 8002be8:	f001 f97e 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002bf0:	e005      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bf8:	bf00      	nop
 8002bfa:	e000      	b.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002bfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d10d      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c12:	4902      	ldr	r1, [pc, #8]	; (8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	658b      	str	r3, [r1, #88]	; 0x58
 8002c18:	e004      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002c1a:	bf00      	nop
 8002c1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c20:	7dfb      	ldrb	r3, [r7, #23]
 8002c22:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d032      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	2b30      	cmp	r3, #48	; 0x30
 8002c36:	d01c      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002c38:	2b30      	cmp	r3, #48	; 0x30
 8002c3a:	d817      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002c3c:	2b20      	cmp	r3, #32
 8002c3e:	d00c      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002c40:	2b20      	cmp	r3, #32
 8002c42:	d813      	bhi.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d016      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002c48:	2b10      	cmp	r3, #16
 8002c4a:	d10f      	bne.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4c:	4bb1      	ldr	r3, [pc, #708]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	4ab0      	ldr	r2, [pc, #704]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c58:	e00e      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	2102      	movs	r1, #2
 8002c60:	4618      	mov	r0, r3
 8002c62:	f001 f88f 	bl	8003d84 <RCCEx_PLL2_Config>
 8002c66:	4603      	mov	r3, r0
 8002c68:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002c6a:	e005      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c70:	e002      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c72:	bf00      	nop
 8002c74:	e000      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002c76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c7e:	4ba5      	ldr	r3, [pc, #660]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c82:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	49a2      	ldr	r1, [pc, #648]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c90:	e001      	b.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c92:	7dfb      	ldrb	r3, [r7, #23]
 8002c94:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d047      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002caa:	d030      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002cac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cb0:	d82a      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002cb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cb6:	d02c      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002cb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002cbc:	d824      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002cbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc2:	d018      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cc8:	d81e      	bhi.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cd2:	d007      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002cd4:	e018      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd6:	4b8f      	ldr	r3, [pc, #572]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cda:	4a8e      	ldr	r2, [pc, #568]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ce2:	e017      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	2100      	movs	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f001 f84a 	bl	8003d84 <RCCEx_PLL2_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002cf4:	e00e      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3324      	adds	r3, #36	; 0x24
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f001 f8f3 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002d06:	e005      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e000      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002d12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d1a:	4b7e      	ldr	r3, [pc, #504]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d26:	497b      	ldr	r1, [pc, #492]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	650b      	str	r3, [r1, #80]	; 0x50
 8002d2c:	e001      	b.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2e:	7dfb      	ldrb	r3, [r7, #23]
 8002d30:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d049      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d46:	d02e      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d4c:	d828      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d4e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d52:	d02a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	d822      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d5a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d5e:	d026      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002d64:	d81c      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002d6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d70:	d816      	bhi.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01d      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d7a:	d111      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3304      	adds	r3, #4
 8002d80:	2101      	movs	r1, #1
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fffe 	bl	8003d84 <RCCEx_PLL2_Config>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d8c:	e012      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3324      	adds	r3, #36	; 0x24
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f001 f8a7 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002d9e:	e009      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	75fb      	strb	r3, [r7, #23]
      break;
 8002da4:	e006      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002da6:	bf00      	nop
 8002da8:	e004      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002daa:	bf00      	nop
 8002dac:	e002      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002dae:	bf00      	nop
 8002db0:	e000      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002db2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002db4:	7dfb      	ldrb	r3, [r7, #23]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d109      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dc6:	4953      	ldr	r1, [pc, #332]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	650b      	str	r3, [r1, #80]	; 0x50
 8002dcc:	e001      	b.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dce:	7dfb      	ldrb	r3, [r7, #23]
 8002dd0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d04b      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de8:	d02e      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dee:	d828      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df4:	d02a      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dfa:	d822      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002dfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e00:	d026      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002e02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002e06:	d81c      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e0c:	d010      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e12:	d816      	bhi.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d01d      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002e18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e1c:	d111      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3304      	adds	r3, #4
 8002e22:	2101      	movs	r1, #1
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ffad 	bl	8003d84 <RCCEx_PLL2_Config>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e2e:	e012      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	3324      	adds	r3, #36	; 0x24
 8002e34:	2101      	movs	r1, #1
 8002e36:	4618      	mov	r0, r3
 8002e38:	f001 f856 	bl	8003ee8 <RCCEx_PLL3_Config>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002e40:	e009      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	75fb      	strb	r3, [r7, #23]
      break;
 8002e46:	e006      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e004      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e002      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e50:	bf00      	nop
 8002e52:	e000      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002e54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10a      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002e5c:	4b2d      	ldr	r3, [pc, #180]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e60:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e6a:	492a      	ldr	r1, [pc, #168]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	658b      	str	r3, [r1, #88]	; 0x58
 8002e70:	e001      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d022      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8e:	d108      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3304      	adds	r3, #4
 8002e94:	2101      	movs	r1, #1
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 ff74 	bl	8003d84 <RCCEx_PLL2_Config>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002ea8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002eb0:	4b18      	ldr	r3, [pc, #96]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ebc:	4915      	ldr	r1, [pc, #84]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d031      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002edc:	d00e      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002ede:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ee2:	d814      	bhi.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d017      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eec:	d10f      	bne.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002efa:	e00e      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	2101      	movs	r1, #1
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 ff3e 	bl	8003d84 <RCCEx_PLL2_Config>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002f0c:	e005      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
      break;
 8002f12:	e002      	b.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002f14:	58024400 	.word	0x58024400
      break;
 8002f18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1a:	7dfb      	ldrb	r3, [r7, #23]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d109      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f20:	4bbc      	ldr	r3, [pc, #752]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2c:	49b9      	ldr	r1, [pc, #740]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	650b      	str	r3, [r1, #80]	; 0x50
 8002f32:	e001      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f34:	7dfb      	ldrb	r3, [r7, #23]
 8002f36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d032      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	2b03      	cmp	r3, #3
 8002f4a:	d81b      	bhi.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002f4c:	a201      	add	r2, pc, #4	; (adr r2, 8002f54 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f52:	bf00      	nop
 8002f54:	08002f8b 	.word	0x08002f8b
 8002f58:	08002f65 	.word	0x08002f65
 8002f5c:	08002f73 	.word	0x08002f73
 8002f60:	08002f8b 	.word	0x08002f8b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f64:	4bab      	ldr	r3, [pc, #684]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	4aaa      	ldr	r2, [pc, #680]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f70:	e00c      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2102      	movs	r1, #2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 ff03 	bl	8003d84 <RCCEx_PLL2_Config>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002f82:	e003      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e000      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002f92:	4ba0      	ldr	r3, [pc, #640]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f96:	f023 0203 	bic.w	r2, r3, #3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	499d      	ldr	r1, [pc, #628]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002fa4:	e001      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa6:	7dfb      	ldrb	r3, [r7, #23]
 8002fa8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 8086 	beq.w	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb8:	4b97      	ldr	r3, [pc, #604]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a96      	ldr	r2, [pc, #600]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc4:	f7fe f95a 	bl	800127c <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fca:	e009      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fcc:	f7fe f956 	bl	800127c <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d902      	bls.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	75fb      	strb	r3, [r7, #23]
        break;
 8002fde:	e005      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fe0:	4b8d      	ldr	r3, [pc, #564]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0ef      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d166      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ff4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ffc:	4053      	eors	r3, r2
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d013      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003006:	4b83      	ldr	r3, [pc, #524]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800300e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003010:	4b80      	ldr	r3, [pc, #512]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003014:	4a7f      	ldr	r2, [pc, #508]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800301c:	4b7d      	ldr	r3, [pc, #500]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800301e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003020:	4a7c      	ldr	r2, [pc, #496]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003028:	4a7a      	ldr	r2, [pc, #488]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003038:	d115      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303a:	f7fe f91f 	bl	800127c <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003040:	e00b      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7fe f91b 	bl	800127c <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d902      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	75fb      	strb	r3, [r7, #23]
            break;
 8003058:	e005      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800305a:	4b6e      	ldr	r3, [pc, #440]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ed      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d126      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307a:	d10d      	bne.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x770>
 800307c:	4b65      	ldr	r3, [pc, #404]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800308a:	0919      	lsrs	r1, r3, #4
 800308c:	4b63      	ldr	r3, [pc, #396]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 800308e:	400b      	ands	r3, r1
 8003090:	4960      	ldr	r1, [pc, #384]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003092:	4313      	orrs	r3, r2
 8003094:	610b      	str	r3, [r1, #16]
 8003096:	e005      	b.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003098:	4b5e      	ldr	r3, [pc, #376]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4a5d      	ldr	r2, [pc, #372]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800309e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030a2:	6113      	str	r3, [r2, #16]
 80030a4:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80030ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030b2:	4958      	ldr	r1, [pc, #352]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	670b      	str	r3, [r1, #112]	; 0x70
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80030ba:	7dfb      	ldrb	r3, [r7, #23]
 80030bc:	75bb      	strb	r3, [r7, #22]
 80030be:	e001      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07e      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030d4:	2b28      	cmp	r3, #40	; 0x28
 80030d6:	d867      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x880>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	080031af 	.word	0x080031af
 80030e4:	080031a9 	.word	0x080031a9
 80030e8:	080031a9 	.word	0x080031a9
 80030ec:	080031a9 	.word	0x080031a9
 80030f0:	080031a9 	.word	0x080031a9
 80030f4:	080031a9 	.word	0x080031a9
 80030f8:	080031a9 	.word	0x080031a9
 80030fc:	080031a9 	.word	0x080031a9
 8003100:	08003185 	.word	0x08003185
 8003104:	080031a9 	.word	0x080031a9
 8003108:	080031a9 	.word	0x080031a9
 800310c:	080031a9 	.word	0x080031a9
 8003110:	080031a9 	.word	0x080031a9
 8003114:	080031a9 	.word	0x080031a9
 8003118:	080031a9 	.word	0x080031a9
 800311c:	080031a9 	.word	0x080031a9
 8003120:	08003197 	.word	0x08003197
 8003124:	080031a9 	.word	0x080031a9
 8003128:	080031a9 	.word	0x080031a9
 800312c:	080031a9 	.word	0x080031a9
 8003130:	080031a9 	.word	0x080031a9
 8003134:	080031a9 	.word	0x080031a9
 8003138:	080031a9 	.word	0x080031a9
 800313c:	080031a9 	.word	0x080031a9
 8003140:	080031af 	.word	0x080031af
 8003144:	080031a9 	.word	0x080031a9
 8003148:	080031a9 	.word	0x080031a9
 800314c:	080031a9 	.word	0x080031a9
 8003150:	080031a9 	.word	0x080031a9
 8003154:	080031a9 	.word	0x080031a9
 8003158:	080031a9 	.word	0x080031a9
 800315c:	080031a9 	.word	0x080031a9
 8003160:	080031af 	.word	0x080031af
 8003164:	080031a9 	.word	0x080031a9
 8003168:	080031a9 	.word	0x080031a9
 800316c:	080031a9 	.word	0x080031a9
 8003170:	080031a9 	.word	0x080031a9
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031a9 	.word	0x080031a9
 800317c:	080031a9 	.word	0x080031a9
 8003180:	080031af 	.word	0x080031af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f000 fdfa 	bl	8003d84 <RCCEx_PLL2_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003194:	e00c      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3324      	adds	r3, #36	; 0x24
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f000 fea3 	bl	8003ee8 <RCCEx_PLL3_Config>
 80031a2:	4603      	mov	r3, r0
 80031a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80031a6:	e003      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	75fb      	strb	r3, [r7, #23]
      break;
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 80031ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c2:	4914      	ldr	r1, [pc, #80]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	654b      	str	r3, [r1, #84]	; 0x54
 80031c8:	e001      	b.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03e      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031de:	2b05      	cmp	r3, #5
 80031e0:	d827      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 80031e2:	a201      	add	r2, pc, #4	; (adr r2, 80031e8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003239 	.word	0x08003239
 80031ec:	08003201 	.word	0x08003201
 80031f0:	08003221 	.word	0x08003221
 80031f4:	08003239 	.word	0x08003239
 80031f8:	08003239 	.word	0x08003239
 80031fc:	08003239 	.word	0x08003239
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3304      	adds	r3, #4
 8003204:	2101      	movs	r1, #1
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fdbc 	bl	8003d84 <RCCEx_PLL2_Config>
 800320c:	4603      	mov	r3, r0
 800320e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003210:	e013      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
 8003218:	58024800 	.word	0x58024800
 800321c:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	2101      	movs	r1, #1
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fe5e 	bl	8003ee8 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003240:	4b9f      	ldr	r3, [pc, #636]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	f023 0207 	bic.w	r2, r3, #7
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800324c:	499c      	ldr	r1, [pc, #624]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800324e:	4313      	orrs	r3, r2
 8003250:	654b      	str	r3, [r1, #84]	; 0x54
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7dfb      	ldrb	r3, [r7, #23]
 8003256:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d039      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326a:	2b05      	cmp	r3, #5
 800326c:	d820      	bhi.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800326e:	a201      	add	r2, pc, #4	; (adr r2, 8003274 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003274:	080032b7 	.word	0x080032b7
 8003278:	0800328d 	.word	0x0800328d
 800327c:	0800329f 	.word	0x0800329f
 8003280:	080032b7 	.word	0x080032b7
 8003284:	080032b7 	.word	0x080032b7
 8003288:	080032b7 	.word	0x080032b7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3304      	adds	r3, #4
 8003290:	2101      	movs	r1, #1
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fd76 	bl	8003d84 <RCCEx_PLL2_Config>
 8003298:	4603      	mov	r3, r0
 800329a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800329c:	e00c      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	2101      	movs	r1, #1
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fe1f 	bl	8003ee8 <RCCEx_PLL3_Config>
 80032aa:	4603      	mov	r3, r0
 80032ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	75fb      	strb	r3, [r7, #23]
      break;
 80032b4:	e000      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80032b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032be:	4b80      	ldr	r3, [pc, #512]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	f023 0207 	bic.w	r2, r3, #7
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032cc:	497c      	ldr	r1, [pc, #496]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	; 0x58
 80032d2:	e001      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0320 	and.w	r3, r3, #32
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d04b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032ee:	d02e      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80032f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f4:	d828      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80032f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fa:	d02a      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d822      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8003302:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003306:	d026      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8003308:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800330c:	d81c      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800330e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003312:	d010      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003314:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003318:	d816      	bhi.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01d      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800331e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003322:	d111      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3304      	adds	r3, #4
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fd2a 	bl	8003d84 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003334:	e012      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3324      	adds	r3, #36	; 0x24
 800333a:	2102      	movs	r1, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fdd3 	bl	8003ee8 <RCCEx_PLL3_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003346:	e009      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	75fb      	strb	r3, [r7, #23]
      break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800334e:	bf00      	nop
 8003350:	e004      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003352:	bf00      	nop
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800335a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335c:	7dfb      	ldrb	r3, [r7, #23]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10a      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003366:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	4953      	ldr	r1, [pc, #332]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003372:	4313      	orrs	r3, r2
 8003374:	654b      	str	r3, [r1, #84]	; 0x54
 8003376:	e001      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7dfb      	ldrb	r3, [r7, #23]
 800337a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d04b      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800338e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003392:	d02e      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003394:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003398:	d828      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800339a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339e:	d02a      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 80033a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a4:	d822      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80033a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033aa:	d026      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xad2>
 80033ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033b0:	d81c      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80033b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b6:	d010      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80033b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033bc:	d816      	bhi.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d01d      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xad6>
 80033c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c6:	d111      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3304      	adds	r3, #4
 80033cc:	2100      	movs	r1, #0
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fcd8 	bl	8003d84 <RCCEx_PLL2_Config>
 80033d4:	4603      	mov	r3, r0
 80033d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033d8:	e012      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3324      	adds	r3, #36	; 0x24
 80033de:	2102      	movs	r1, #2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fd81 	bl	8003ee8 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80033ea:	e009      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	75fb      	strb	r3, [r7, #23]
      break;
 80033f0:	e006      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033f2:	bf00      	nop
 80033f4:	e004      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e002      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e000      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80033fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003400:	7dfb      	ldrb	r3, [r7, #23]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10a      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003406:	4b2e      	ldr	r3, [pc, #184]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800340a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003414:	492a      	ldr	r1, [pc, #168]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003416:	4313      	orrs	r3, r2
 8003418:	658b      	str	r3, [r1, #88]	; 0x58
 800341a:	e001      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
 800341e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003428:	2b00      	cmp	r3, #0
 800342a:	d04d      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003432:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003436:	d02e      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003438:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800343c:	d828      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800343e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003442:	d02a      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003444:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003448:	d822      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800344a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800344e:	d026      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003450:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003454:	d81c      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003456:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800345a:	d010      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800345c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003460:	d816      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003462:	2b00      	cmp	r3, #0
 8003464:	d01d      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346a:	d111      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	3304      	adds	r3, #4
 8003470:	2100      	movs	r1, #0
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fc86 	bl	8003d84 <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800347c:	e012      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3324      	adds	r3, #36	; 0x24
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fd2f 	bl	8003ee8 <RCCEx_PLL3_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800348e:	e009      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	75fb      	strb	r3, [r7, #23]
      break;
 8003494:	e006      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 80034a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80034aa:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034b8:	4901      	ldr	r1, [pc, #4]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	658b      	str	r3, [r1, #88]	; 0x58
 80034be:	e003      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80034c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c4:	7dfb      	ldrb	r3, [r7, #23]
 80034c6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034de:	d10a      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3324      	adds	r3, #36	; 0x24
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 fcfe 	bl	8003ee8 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034f6:	4b8c      	ldr	r3, [pc, #560]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003504:	4988      	ldr	r1, [pc, #544]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003506:	4313      	orrs	r3, r2
 8003508:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01a      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800351c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003520:	d10a      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3324      	adds	r3, #36	; 0x24
 8003526:	2102      	movs	r1, #2
 8003528:	4618      	mov	r0, r3
 800352a:	f000 fcdd 	bl	8003ee8 <RCCEx_PLL3_Config>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003538:	4b7b      	ldr	r3, [pc, #492]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800353a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003546:	4978      	ldr	r1, [pc, #480]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003548:	4313      	orrs	r3, r2
 800354a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d034      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800355e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003562:	d01d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003568:	d817      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800356a:	2b00      	cmp	r3, #0
 800356c:	d003      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800356e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003572:	d009      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003574:	e011      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fc01 	bl	8003d84 <RCCEx_PLL2_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003586:	e00c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3324      	adds	r3, #36	; 0x24
 800358c:	2102      	movs	r1, #2
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fcaa 	bl	8003ee8 <RCCEx_PLL3_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
      break;
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 80035a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a2:	7dfb      	ldrb	r3, [r7, #23]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10a      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a8:	4b5f      	ldr	r3, [pc, #380]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80035b6:	495c      	ldr	r1, [pc, #368]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	658b      	str	r3, [r1, #88]	; 0x58
 80035bc:	e001      	b.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d033      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035d8:	d01c      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80035da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035de:	d816      	bhi.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xce6>
 80035e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e4:	d003      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80035e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035ea:	d007      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80035ec:	e00f      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b4e      	ldr	r3, [pc, #312]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80035fa:	e00c      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3324      	adds	r3, #36	; 0x24
 8003600:	2101      	movs	r1, #1
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fc70 	bl	8003ee8 <RCCEx_PLL3_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800360c:	e003      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
      break;
 8003612:	e000      	b.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800361c:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800361e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003620:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	493f      	ldr	r1, [pc, #252]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800362c:	4313      	orrs	r3, r2
 800362e:	654b      	str	r3, [r1, #84]	; 0x54
 8003630:	e001      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003632:	7dfb      	ldrb	r3, [r7, #23]
 8003634:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d029      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800364a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800364e:	d007      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003650:	e00f      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003652:	4b35      	ldr	r3, [pc, #212]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	4a34      	ldr	r2, [pc, #208]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800365c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	2102      	movs	r1, #2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 fb8c 	bl	8003d84 <RCCEx_PLL2_Config>
 800366c:	4603      	mov	r3, r0
 800366e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
      break;
 8003676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003678:	7dfb      	ldrb	r3, [r7, #23]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368a:	4927      	ldr	r1, [pc, #156]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800368c:	4313      	orrs	r3, r2
 800368e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003690:	e001      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003692:	7dfb      	ldrb	r3, [r7, #23]
 8003694:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	3324      	adds	r3, #36	; 0x24
 80036a6:	2102      	movs	r1, #2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f000 fc1d 	bl	8003ee8 <RCCEx_PLL3_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d035      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036ce:	d017      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80036d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d4:	d811      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036da:	d013      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80036dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e0:	d80b      	bhi.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 80036e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036ea:	d106      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ec:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	4a0d      	ldr	r2, [pc, #52]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80036f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80036f8:	e007      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
      break;
 80036fe:	e004      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003700:	bf00      	nop
 8003702:	e002      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003704:	bf00      	nop
 8003706:	e000      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800370a:	7dfb      	ldrb	r3, [r7, #23]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371e:	4902      	ldr	r1, [pc, #8]	; (8003728 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003720:	4313      	orrs	r3, r2
 8003722:	654b      	str	r3, [r1, #84]	; 0x54
 8003724:	e004      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003726:	bf00      	nop
 8003728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372c:	7dfb      	ldrb	r3, [r7, #23]
 800372e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d008      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800373e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	492e      	ldr	r1, [pc, #184]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d009      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800375a:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003768:	4926      	ldr	r1, [pc, #152]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d008      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800377a:	4b22      	ldr	r3, [pc, #136]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800377c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800377e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003786:	491f      	ldr	r1, [pc, #124]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003788:	4313      	orrs	r3, r2
 800378a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00d      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003798:	4b1a      	ldr	r3, [pc, #104]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	4a19      	ldr	r2, [pc, #100]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800379e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037a2:	6113      	str	r3, [r2, #16]
 80037a4:	4b17      	ldr	r3, [pc, #92]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80037ae:	4915      	ldr	r1, [pc, #84]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	da08      	bge.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	490e      	ldr	r1, [pc, #56]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037da:	4b0a      	ldr	r3, [pc, #40]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80037ee:	7dbb      	ldrb	r3, [r7, #22]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d101      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	e000      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	58024400 	.word	0x58024400

08003808 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800380c:	f7ff f830 	bl	8002870 <HAL_RCC_GetHCLKFreq>
 8003810:	4602      	mov	r2, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4904      	ldr	r1, [pc, #16]	; (8003830 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800381e:	5ccb      	ldrb	r3, [r1, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	08005bd0 	.word	0x08005bd0

08003834 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003834:	b480      	push	{r7}
 8003836:	b089      	sub	sp, #36	; 0x24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800383c:	4ba1      	ldr	r3, [pc, #644]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003846:	4b9f      	ldr	r3, [pc, #636]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384a:	0b1b      	lsrs	r3, r3, #12
 800384c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003850:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003852:	4b9c      	ldr	r3, [pc, #624]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800385e:	4b99      	ldr	r3, [pc, #612]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003862:	08db      	lsrs	r3, r3, #3
 8003864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	fb02 f303 	mul.w	r3, r2, r3
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 8111 	beq.w	8003aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b02      	cmp	r3, #2
 8003886:	f000 8083 	beq.w	8003990 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b02      	cmp	r3, #2
 800388e:	f200 80a1 	bhi.w	80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d056      	beq.n	800394c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800389e:	e099      	b.n	80039d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a0:	4b88      	ldr	r3, [pc, #544]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0320 	and.w	r3, r3, #32
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d02d      	beq.n	8003908 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80038ac:	4b85      	ldr	r3, [pc, #532]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	08db      	lsrs	r3, r3, #3
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	4a84      	ldr	r2, [pc, #528]	; (8003ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	ee07 3a90 	vmov	s15, r3
 80038c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	ee07 3a90 	vmov	s15, r3
 80038ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038d6:	4b7b      	ldr	r3, [pc, #492]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038de:	ee07 3a90 	vmov	s15, r3
 80038e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80038ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80038ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003906:	e087      	b.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003912:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800391c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003922:	ee07 3a90 	vmov	s15, r3
 8003926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392a:	ed97 6a03 	vldr	s12, [r7, #12]
 800392e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800393e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003946:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800394a:	e065      	b.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003956:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800395a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800395e:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003966:	ee07 3a90 	vmov	s15, r3
 800396a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800396e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003972:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800397e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800398e:	e043      	b.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800399e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a2:	4b48      	ldr	r3, [pc, #288]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039aa:	ee07 3a90 	vmov	s15, r3
 80039ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039d2:	e021      	b.n	8003a18 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003ad4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ee:	ee07 3a90 	vmov	s15, r3
 80039f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003acc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a16:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003a18:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	0a5b      	lsrs	r3, r3, #9
 8003a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a3e:	ee17 2a90 	vmov	r2, s15
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003a46:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	0c1b      	lsrs	r3, r3, #16
 8003a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a6c:	ee17 2a90 	vmov	r2, s15
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003a74:	4b13      	ldr	r3, [pc, #76]	; (8003ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	0e1b      	lsrs	r3, r3, #24
 8003a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a7e:	ee07 3a90 	vmov	s15, r3
 8003a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a9a:	ee17 2a90 	vmov	r2, s15
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003aa2:	e008      	b.n	8003ab6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
}
 8003ab6:	bf00      	nop
 8003ab8:	3724      	adds	r7, #36	; 0x24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	58024400 	.word	0x58024400
 8003ac8:	03d09000 	.word	0x03d09000
 8003acc:	46000000 	.word	0x46000000
 8003ad0:	4c742400 	.word	0x4c742400
 8003ad4:	4a742400 	.word	0x4a742400
 8003ad8:	4bbebc20 	.word	0x4bbebc20

08003adc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ae4:	4ba1      	ldr	r3, [pc, #644]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003aee:	4b9f      	ldr	r3, [pc, #636]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	0d1b      	lsrs	r3, r3, #20
 8003af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003afa:	4b9c      	ldr	r3, [pc, #624]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003b06:	4b99      	ldr	r3, [pc, #612]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0a:	08db      	lsrs	r3, r3, #3
 8003b0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	fb02 f303 	mul.w	r3, r2, r3
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8111 	beq.w	8003d4c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	f000 8083 	beq.w	8003c38 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	f200 80a1 	bhi.w	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d056      	beq.n	8003bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b46:	e099      	b.n	8003c7c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b48:	4b88      	ldr	r3, [pc, #544]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d02d      	beq.n	8003bb0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003b54:	4b85      	ldr	r3, [pc, #532]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	08db      	lsrs	r3, r3, #3
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	4a84      	ldr	r2, [pc, #528]	; (8003d70 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003b60:	fa22 f303 	lsr.w	r3, r2, r3
 8003b64:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	ee07 3a90 	vmov	s15, r3
 8003b6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b7b      	ldr	r3, [pc, #492]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b92:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003bae:	e087      	b.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d78 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b6a      	ldr	r3, [pc, #424]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003bf2:	e065      	b.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b59      	ldr	r3, [pc, #356]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c36:	e043      	b.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003d80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003c7a:	e021      	b.n	8003cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003d7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b37      	ldr	r3, [pc, #220]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003d74 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003cbe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003cc0:	4b2a      	ldr	r3, [pc, #168]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	0a5b      	lsrs	r3, r3, #9
 8003cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ce6:	ee17 2a90 	vmov	r2, s15
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003cee:	4b1f      	ldr	r3, [pc, #124]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	0c1b      	lsrs	r3, r3, #16
 8003cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf8:	ee07 3a90 	vmov	s15, r3
 8003cfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d08:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d14:	ee17 2a90 	vmov	r2, s15
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	0e1b      	lsrs	r3, r3, #24
 8003d22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d36:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d42:	ee17 2a90 	vmov	r2, s15
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d4a:	e008      	b.n	8003d5e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
}
 8003d5e:	bf00      	nop
 8003d60:	3724      	adds	r7, #36	; 0x24
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	58024400 	.word	0x58024400
 8003d70:	03d09000 	.word	0x03d09000
 8003d74:	46000000 	.word	0x46000000
 8003d78:	4c742400 	.word	0x4c742400
 8003d7c:	4a742400 	.word	0x4a742400
 8003d80:	4bbebc20 	.word	0x4bbebc20

08003d84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
 8003d8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003d92:	4b53      	ldr	r3, [pc, #332]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d101      	bne.n	8003da2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e099      	b.n	8003ed6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003da2:	4b4f      	ldr	r3, [pc, #316]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a4e      	ldr	r2, [pc, #312]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003da8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003dac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dae:	f7fd fa65 	bl	800127c <HAL_GetTick>
 8003db2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003db4:	e008      	b.n	8003dc8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003db6:	f7fd fa61 	bl	800127c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e086      	b.n	8003ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dc8:	4b45      	ldr	r3, [pc, #276]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003dd4:	4b42      	ldr	r3, [pc, #264]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	493f      	ldr	r1, [pc, #252]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	628b      	str	r3, [r1, #40]	; 0x28
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	3b01      	subs	r3, #1
 8003dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	061b      	lsls	r3, r3, #24
 8003e14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003e18:	4931      	ldr	r1, [pc, #196]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e1e:	4b30      	ldr	r3, [pc, #192]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e30:	4b2b      	ldr	r3, [pc, #172]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f023 0220 	bic.w	r2, r3, #32
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	4928      	ldr	r1, [pc, #160]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e42:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a26      	ldr	r2, [pc, #152]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e48:	f023 0310 	bic.w	r3, r3, #16
 8003e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <RCCEx_PLL2_Config+0x160>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	69d2      	ldr	r2, [r2, #28]
 8003e5a:	00d2      	lsls	r2, r2, #3
 8003e5c:	4920      	ldr	r1, [pc, #128]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e66:	4a1e      	ldr	r2, [pc, #120]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	f043 0310 	orr.w	r3, r3, #16
 8003e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003e74:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	4a19      	ldr	r2, [pc, #100]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003e7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e80:	e00f      	b.n	8003ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003e88:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003e94:	e005      	b.n	8003ea2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eae:	f7fd f9e5 	bl	800127c <HAL_GetTick>
 8003eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003eb4:	e008      	b.n	8003ec8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003eb6:	f7fd f9e1 	bl	800127c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e006      	b.n	8003ed6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <RCCEx_PLL2_Config+0x15c>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f0      	beq.n	8003eb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	58024400 	.word	0x58024400
 8003ee4:	ffff0007 	.word	0xffff0007

08003ee8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ef6:	4b53      	ldr	r3, [pc, #332]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	f003 0303 	and.w	r3, r3, #3
 8003efe:	2b03      	cmp	r3, #3
 8003f00:	d101      	bne.n	8003f06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e099      	b.n	800403a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f06:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a4e      	ldr	r2, [pc, #312]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f12:	f7fd f9b3 	bl	800127c <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003f1a:	f7fd f9af 	bl	800127c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e086      	b.n	800403a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f2c:	4b45      	ldr	r3, [pc, #276]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f38:	4b42      	ldr	r3, [pc, #264]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	051b      	lsls	r3, r3, #20
 8003f46:	493f      	ldr	r1, [pc, #252]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	628b      	str	r3, [r1, #40]	; 0x28
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	3b01      	subs	r3, #1
 8003f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	025b      	lsls	r3, r3, #9
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	041b      	lsls	r3, r3, #16
 8003f6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	3b01      	subs	r3, #1
 8003f76:	061b      	lsls	r3, r3, #24
 8003f78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f7c:	4931      	ldr	r1, [pc, #196]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003f82:	4b30      	ldr	r3, [pc, #192]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	492d      	ldr	r1, [pc, #180]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003f94:	4b2b      	ldr	r3, [pc, #172]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	4928      	ldr	r1, [pc, #160]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fa6:	4b27      	ldr	r3, [pc, #156]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	4a26      	ldr	r2, [pc, #152]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003fb2:	4b24      	ldr	r3, [pc, #144]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <RCCEx_PLL3_Config+0x160>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	69d2      	ldr	r2, [r2, #28]
 8003fbe:	00d2      	lsls	r2, r2, #3
 8003fc0:	4920      	ldr	r1, [pc, #128]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003fc6:	4b1f      	ldr	r3, [pc, #124]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	4a1e      	ldr	r2, [pc, #120]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fe2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003fe4:	e00f      	b.n	8004006 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d106      	bne.n	8003ffa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003fec:	4b15      	ldr	r3, [pc, #84]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff0:	4a14      	ldr	r2, [pc, #80]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003ff2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ff6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003ff8:	e005      	b.n	8004006 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003ffa:	4b12      	ldr	r3, [pc, #72]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ffe:	4a11      	ldr	r2, [pc, #68]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8004000:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004004:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004006:	4b0f      	ldr	r3, [pc, #60]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 800400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fd f933 	bl	800127c <HAL_GetTick>
 8004016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004018:	e008      	b.n	800402c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800401a:	f7fd f92f 	bl	800127c <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e006      	b.n	800403a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800402c:	4b05      	ldr	r3, [pc, #20]	; (8004044 <RCCEx_PLL3_Config+0x15c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d0f0      	beq.n	800401a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	58024400 	.word	0x58024400
 8004048:	ffff0007 	.word	0xffff0007

0800404c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e042      	b.n	80040e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fc ff8d 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2224      	movs	r2, #36	; 0x24
 800407a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f82c 	bl	80040ec <UART_SetConfig>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d101      	bne.n	800409e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e022      	b.n	80040e4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fd80 	bl	8004bac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fe07 	bl	8004cf0 <UART_CheckIdleState>
 80040e2:	4603      	mov	r3, r0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040ec:	b5b0      	push	{r4, r5, r7, lr}
 80040ee:	b08e      	sub	sp, #56	; 0x38
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4313      	orrs	r3, r2
 8004110:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4bbf      	ldr	r3, [pc, #764]	; (8004418 <UART_SetConfig+0x32c>)
 800411a:	4013      	ands	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6812      	ldr	r2, [r2, #0]
 8004120:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004122:	430b      	orrs	r3, r1
 8004124:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68da      	ldr	r2, [r3, #12]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4ab5      	ldr	r2, [pc, #724]	; (800441c <UART_SetConfig+0x330>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d004      	beq.n	8004156 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004152:	4313      	orrs	r3, r2
 8004154:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689a      	ldr	r2, [r3, #8]
 800415c:	4bb0      	ldr	r3, [pc, #704]	; (8004420 <UART_SetConfig+0x334>)
 800415e:	4013      	ands	r3, r2
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6812      	ldr	r2, [r2, #0]
 8004164:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004166:	430b      	orrs	r3, r1
 8004168:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004170:	f023 010f 	bic.w	r1, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4aa7      	ldr	r2, [pc, #668]	; (8004424 <UART_SetConfig+0x338>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d176      	bne.n	8004278 <UART_SetConfig+0x18c>
 800418a:	4ba7      	ldr	r3, [pc, #668]	; (8004428 <UART_SetConfig+0x33c>)
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004192:	2b28      	cmp	r3, #40	; 0x28
 8004194:	d86c      	bhi.n	8004270 <UART_SetConfig+0x184>
 8004196:	a201      	add	r2, pc, #4	; (adr r2, 800419c <UART_SetConfig+0xb0>)
 8004198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419c:	08004241 	.word	0x08004241
 80041a0:	08004271 	.word	0x08004271
 80041a4:	08004271 	.word	0x08004271
 80041a8:	08004271 	.word	0x08004271
 80041ac:	08004271 	.word	0x08004271
 80041b0:	08004271 	.word	0x08004271
 80041b4:	08004271 	.word	0x08004271
 80041b8:	08004271 	.word	0x08004271
 80041bc:	08004249 	.word	0x08004249
 80041c0:	08004271 	.word	0x08004271
 80041c4:	08004271 	.word	0x08004271
 80041c8:	08004271 	.word	0x08004271
 80041cc:	08004271 	.word	0x08004271
 80041d0:	08004271 	.word	0x08004271
 80041d4:	08004271 	.word	0x08004271
 80041d8:	08004271 	.word	0x08004271
 80041dc:	08004251 	.word	0x08004251
 80041e0:	08004271 	.word	0x08004271
 80041e4:	08004271 	.word	0x08004271
 80041e8:	08004271 	.word	0x08004271
 80041ec:	08004271 	.word	0x08004271
 80041f0:	08004271 	.word	0x08004271
 80041f4:	08004271 	.word	0x08004271
 80041f8:	08004271 	.word	0x08004271
 80041fc:	08004259 	.word	0x08004259
 8004200:	08004271 	.word	0x08004271
 8004204:	08004271 	.word	0x08004271
 8004208:	08004271 	.word	0x08004271
 800420c:	08004271 	.word	0x08004271
 8004210:	08004271 	.word	0x08004271
 8004214:	08004271 	.word	0x08004271
 8004218:	08004271 	.word	0x08004271
 800421c:	08004261 	.word	0x08004261
 8004220:	08004271 	.word	0x08004271
 8004224:	08004271 	.word	0x08004271
 8004228:	08004271 	.word	0x08004271
 800422c:	08004271 	.word	0x08004271
 8004230:	08004271 	.word	0x08004271
 8004234:	08004271 	.word	0x08004271
 8004238:	08004271 	.word	0x08004271
 800423c:	08004269 	.word	0x08004269
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e222      	b.n	800468e <UART_SetConfig+0x5a2>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424e:	e21e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004256:	e21a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800425e:	e216      	b.n	800468e <UART_SetConfig+0x5a2>
 8004260:	2320      	movs	r3, #32
 8004262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004266:	e212      	b.n	800468e <UART_SetConfig+0x5a2>
 8004268:	2340      	movs	r3, #64	; 0x40
 800426a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800426e:	e20e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004270:	2380      	movs	r3, #128	; 0x80
 8004272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004276:	e20a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a6b      	ldr	r2, [pc, #428]	; (800442c <UART_SetConfig+0x340>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d130      	bne.n	80042e4 <UART_SetConfig+0x1f8>
 8004282:	4b69      	ldr	r3, [pc, #420]	; (8004428 <UART_SetConfig+0x33c>)
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	2b05      	cmp	r3, #5
 800428c:	d826      	bhi.n	80042dc <UART_SetConfig+0x1f0>
 800428e:	a201      	add	r2, pc, #4	; (adr r2, 8004294 <UART_SetConfig+0x1a8>)
 8004290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004294:	080042ad 	.word	0x080042ad
 8004298:	080042b5 	.word	0x080042b5
 800429c:	080042bd 	.word	0x080042bd
 80042a0:	080042c5 	.word	0x080042c5
 80042a4:	080042cd 	.word	0x080042cd
 80042a8:	080042d5 	.word	0x080042d5
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e1ec      	b.n	800468e <UART_SetConfig+0x5a2>
 80042b4:	2304      	movs	r3, #4
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ba:	e1e8      	b.n	800468e <UART_SetConfig+0x5a2>
 80042bc:	2308      	movs	r3, #8
 80042be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c2:	e1e4      	b.n	800468e <UART_SetConfig+0x5a2>
 80042c4:	2310      	movs	r3, #16
 80042c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ca:	e1e0      	b.n	800468e <UART_SetConfig+0x5a2>
 80042cc:	2320      	movs	r3, #32
 80042ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d2:	e1dc      	b.n	800468e <UART_SetConfig+0x5a2>
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042da:	e1d8      	b.n	800468e <UART_SetConfig+0x5a2>
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042e2:	e1d4      	b.n	800468e <UART_SetConfig+0x5a2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a51      	ldr	r2, [pc, #324]	; (8004430 <UART_SetConfig+0x344>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d130      	bne.n	8004350 <UART_SetConfig+0x264>
 80042ee:	4b4e      	ldr	r3, [pc, #312]	; (8004428 <UART_SetConfig+0x33c>)
 80042f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d826      	bhi.n	8004348 <UART_SetConfig+0x25c>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <UART_SetConfig+0x214>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004319 	.word	0x08004319
 8004304:	08004321 	.word	0x08004321
 8004308:	08004329 	.word	0x08004329
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	2300      	movs	r3, #0
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431e:	e1b6      	b.n	800468e <UART_SetConfig+0x5a2>
 8004320:	2304      	movs	r3, #4
 8004322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004326:	e1b2      	b.n	800468e <UART_SetConfig+0x5a2>
 8004328:	2308      	movs	r3, #8
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432e:	e1ae      	b.n	800468e <UART_SetConfig+0x5a2>
 8004330:	2310      	movs	r3, #16
 8004332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004336:	e1aa      	b.n	800468e <UART_SetConfig+0x5a2>
 8004338:	2320      	movs	r3, #32
 800433a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433e:	e1a6      	b.n	800468e <UART_SetConfig+0x5a2>
 8004340:	2340      	movs	r3, #64	; 0x40
 8004342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004346:	e1a2      	b.n	800468e <UART_SetConfig+0x5a2>
 8004348:	2380      	movs	r3, #128	; 0x80
 800434a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800434e:	e19e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a37      	ldr	r2, [pc, #220]	; (8004434 <UART_SetConfig+0x348>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d130      	bne.n	80043bc <UART_SetConfig+0x2d0>
 800435a:	4b33      	ldr	r3, [pc, #204]	; (8004428 <UART_SetConfig+0x33c>)
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	2b05      	cmp	r3, #5
 8004364:	d826      	bhi.n	80043b4 <UART_SetConfig+0x2c8>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x280>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	08004385 	.word	0x08004385
 8004370:	0800438d 	.word	0x0800438d
 8004374:	08004395 	.word	0x08004395
 8004378:	0800439d 	.word	0x0800439d
 800437c:	080043a5 	.word	0x080043a5
 8004380:	080043ad 	.word	0x080043ad
 8004384:	2300      	movs	r3, #0
 8004386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438a:	e180      	b.n	800468e <UART_SetConfig+0x5a2>
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004392:	e17c      	b.n	800468e <UART_SetConfig+0x5a2>
 8004394:	2308      	movs	r3, #8
 8004396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439a:	e178      	b.n	800468e <UART_SetConfig+0x5a2>
 800439c:	2310      	movs	r3, #16
 800439e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043a2:	e174      	b.n	800468e <UART_SetConfig+0x5a2>
 80043a4:	2320      	movs	r3, #32
 80043a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043aa:	e170      	b.n	800468e <UART_SetConfig+0x5a2>
 80043ac:	2340      	movs	r3, #64	; 0x40
 80043ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043b2:	e16c      	b.n	800468e <UART_SetConfig+0x5a2>
 80043b4:	2380      	movs	r3, #128	; 0x80
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ba:	e168      	b.n	800468e <UART_SetConfig+0x5a2>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	; (8004438 <UART_SetConfig+0x34c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d142      	bne.n	800444c <UART_SetConfig+0x360>
 80043c6:	4b18      	ldr	r3, [pc, #96]	; (8004428 <UART_SetConfig+0x33c>)
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d838      	bhi.n	8004444 <UART_SetConfig+0x358>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x2ec>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043f1 	.word	0x080043f1
 80043dc:	080043f9 	.word	0x080043f9
 80043e0:	08004401 	.word	0x08004401
 80043e4:	08004409 	.word	0x08004409
 80043e8:	08004411 	.word	0x08004411
 80043ec:	0800443d 	.word	0x0800443d
 80043f0:	2300      	movs	r3, #0
 80043f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f6:	e14a      	b.n	800468e <UART_SetConfig+0x5a2>
 80043f8:	2304      	movs	r3, #4
 80043fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fe:	e146      	b.n	800468e <UART_SetConfig+0x5a2>
 8004400:	2308      	movs	r3, #8
 8004402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004406:	e142      	b.n	800468e <UART_SetConfig+0x5a2>
 8004408:	2310      	movs	r3, #16
 800440a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440e:	e13e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004410:	2320      	movs	r3, #32
 8004412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004416:	e13a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004418:	cfff69f3 	.word	0xcfff69f3
 800441c:	58000c00 	.word	0x58000c00
 8004420:	11fff4ff 	.word	0x11fff4ff
 8004424:	40011000 	.word	0x40011000
 8004428:	58024400 	.word	0x58024400
 800442c:	40004400 	.word	0x40004400
 8004430:	40004800 	.word	0x40004800
 8004434:	40004c00 	.word	0x40004c00
 8004438:	40005000 	.word	0x40005000
 800443c:	2340      	movs	r3, #64	; 0x40
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004442:	e124      	b.n	800468e <UART_SetConfig+0x5a2>
 8004444:	2380      	movs	r3, #128	; 0x80
 8004446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444a:	e120      	b.n	800468e <UART_SetConfig+0x5a2>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4acc      	ldr	r2, [pc, #816]	; (8004784 <UART_SetConfig+0x698>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d176      	bne.n	8004544 <UART_SetConfig+0x458>
 8004456:	4bcc      	ldr	r3, [pc, #816]	; (8004788 <UART_SetConfig+0x69c>)
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800445e:	2b28      	cmp	r3, #40	; 0x28
 8004460:	d86c      	bhi.n	800453c <UART_SetConfig+0x450>
 8004462:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <UART_SetConfig+0x37c>)
 8004464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004468:	0800450d 	.word	0x0800450d
 800446c:	0800453d 	.word	0x0800453d
 8004470:	0800453d 	.word	0x0800453d
 8004474:	0800453d 	.word	0x0800453d
 8004478:	0800453d 	.word	0x0800453d
 800447c:	0800453d 	.word	0x0800453d
 8004480:	0800453d 	.word	0x0800453d
 8004484:	0800453d 	.word	0x0800453d
 8004488:	08004515 	.word	0x08004515
 800448c:	0800453d 	.word	0x0800453d
 8004490:	0800453d 	.word	0x0800453d
 8004494:	0800453d 	.word	0x0800453d
 8004498:	0800453d 	.word	0x0800453d
 800449c:	0800453d 	.word	0x0800453d
 80044a0:	0800453d 	.word	0x0800453d
 80044a4:	0800453d 	.word	0x0800453d
 80044a8:	0800451d 	.word	0x0800451d
 80044ac:	0800453d 	.word	0x0800453d
 80044b0:	0800453d 	.word	0x0800453d
 80044b4:	0800453d 	.word	0x0800453d
 80044b8:	0800453d 	.word	0x0800453d
 80044bc:	0800453d 	.word	0x0800453d
 80044c0:	0800453d 	.word	0x0800453d
 80044c4:	0800453d 	.word	0x0800453d
 80044c8:	08004525 	.word	0x08004525
 80044cc:	0800453d 	.word	0x0800453d
 80044d0:	0800453d 	.word	0x0800453d
 80044d4:	0800453d 	.word	0x0800453d
 80044d8:	0800453d 	.word	0x0800453d
 80044dc:	0800453d 	.word	0x0800453d
 80044e0:	0800453d 	.word	0x0800453d
 80044e4:	0800453d 	.word	0x0800453d
 80044e8:	0800452d 	.word	0x0800452d
 80044ec:	0800453d 	.word	0x0800453d
 80044f0:	0800453d 	.word	0x0800453d
 80044f4:	0800453d 	.word	0x0800453d
 80044f8:	0800453d 	.word	0x0800453d
 80044fc:	0800453d 	.word	0x0800453d
 8004500:	0800453d 	.word	0x0800453d
 8004504:	0800453d 	.word	0x0800453d
 8004508:	08004535 	.word	0x08004535
 800450c:	2301      	movs	r3, #1
 800450e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004512:	e0bc      	b.n	800468e <UART_SetConfig+0x5a2>
 8004514:	2304      	movs	r3, #4
 8004516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800451a:	e0b8      	b.n	800468e <UART_SetConfig+0x5a2>
 800451c:	2308      	movs	r3, #8
 800451e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004522:	e0b4      	b.n	800468e <UART_SetConfig+0x5a2>
 8004524:	2310      	movs	r3, #16
 8004526:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800452a:	e0b0      	b.n	800468e <UART_SetConfig+0x5a2>
 800452c:	2320      	movs	r3, #32
 800452e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004532:	e0ac      	b.n	800468e <UART_SetConfig+0x5a2>
 8004534:	2340      	movs	r3, #64	; 0x40
 8004536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800453a:	e0a8      	b.n	800468e <UART_SetConfig+0x5a2>
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004542:	e0a4      	b.n	800468e <UART_SetConfig+0x5a2>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a90      	ldr	r2, [pc, #576]	; (800478c <UART_SetConfig+0x6a0>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d130      	bne.n	80045b0 <UART_SetConfig+0x4c4>
 800454e:	4b8e      	ldr	r3, [pc, #568]	; (8004788 <UART_SetConfig+0x69c>)
 8004550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	2b05      	cmp	r3, #5
 8004558:	d826      	bhi.n	80045a8 <UART_SetConfig+0x4bc>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <UART_SetConfig+0x474>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	08004579 	.word	0x08004579
 8004564:	08004581 	.word	0x08004581
 8004568:	08004589 	.word	0x08004589
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	2300      	movs	r3, #0
 800457a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800457e:	e086      	b.n	800468e <UART_SetConfig+0x5a2>
 8004580:	2304      	movs	r3, #4
 8004582:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004586:	e082      	b.n	800468e <UART_SetConfig+0x5a2>
 8004588:	2308      	movs	r3, #8
 800458a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800458e:	e07e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004590:	2310      	movs	r3, #16
 8004592:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004596:	e07a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004598:	2320      	movs	r3, #32
 800459a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800459e:	e076      	b.n	800468e <UART_SetConfig+0x5a2>
 80045a0:	2340      	movs	r3, #64	; 0x40
 80045a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045a6:	e072      	b.n	800468e <UART_SetConfig+0x5a2>
 80045a8:	2380      	movs	r3, #128	; 0x80
 80045aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ae:	e06e      	b.n	800468e <UART_SetConfig+0x5a2>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a76      	ldr	r2, [pc, #472]	; (8004790 <UART_SetConfig+0x6a4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d130      	bne.n	800461c <UART_SetConfig+0x530>
 80045ba:	4b73      	ldr	r3, [pc, #460]	; (8004788 <UART_SetConfig+0x69c>)
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	2b05      	cmp	r3, #5
 80045c4:	d826      	bhi.n	8004614 <UART_SetConfig+0x528>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0x4e0>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045ed 	.word	0x080045ed
 80045d4:	080045f5 	.word	0x080045f5
 80045d8:	080045fd 	.word	0x080045fd
 80045dc:	08004605 	.word	0x08004605
 80045e0:	0800460d 	.word	0x0800460d
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045ea:	e050      	b.n	800468e <UART_SetConfig+0x5a2>
 80045ec:	2304      	movs	r3, #4
 80045ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045f2:	e04c      	b.n	800468e <UART_SetConfig+0x5a2>
 80045f4:	2308      	movs	r3, #8
 80045f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80045fa:	e048      	b.n	800468e <UART_SetConfig+0x5a2>
 80045fc:	2310      	movs	r3, #16
 80045fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004602:	e044      	b.n	800468e <UART_SetConfig+0x5a2>
 8004604:	2320      	movs	r3, #32
 8004606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800460a:	e040      	b.n	800468e <UART_SetConfig+0x5a2>
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004612:	e03c      	b.n	800468e <UART_SetConfig+0x5a2>
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800461a:	e038      	b.n	800468e <UART_SetConfig+0x5a2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a5c      	ldr	r2, [pc, #368]	; (8004794 <UART_SetConfig+0x6a8>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d130      	bne.n	8004688 <UART_SetConfig+0x59c>
 8004626:	4b58      	ldr	r3, [pc, #352]	; (8004788 <UART_SetConfig+0x69c>)
 8004628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462a:	f003 0307 	and.w	r3, r3, #7
 800462e:	2b05      	cmp	r3, #5
 8004630:	d826      	bhi.n	8004680 <UART_SetConfig+0x594>
 8004632:	a201      	add	r2, pc, #4	; (adr r2, 8004638 <UART_SetConfig+0x54c>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	08004651 	.word	0x08004651
 800463c:	08004659 	.word	0x08004659
 8004640:	08004661 	.word	0x08004661
 8004644:	08004669 	.word	0x08004669
 8004648:	08004671 	.word	0x08004671
 800464c:	08004679 	.word	0x08004679
 8004650:	2302      	movs	r3, #2
 8004652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004656:	e01a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004658:	2304      	movs	r3, #4
 800465a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800465e:	e016      	b.n	800468e <UART_SetConfig+0x5a2>
 8004660:	2308      	movs	r3, #8
 8004662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004666:	e012      	b.n	800468e <UART_SetConfig+0x5a2>
 8004668:	2310      	movs	r3, #16
 800466a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800466e:	e00e      	b.n	800468e <UART_SetConfig+0x5a2>
 8004670:	2320      	movs	r3, #32
 8004672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004676:	e00a      	b.n	800468e <UART_SetConfig+0x5a2>
 8004678:	2340      	movs	r3, #64	; 0x40
 800467a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800467e:	e006      	b.n	800468e <UART_SetConfig+0x5a2>
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004686:	e002      	b.n	800468e <UART_SetConfig+0x5a2>
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a40      	ldr	r2, [pc, #256]	; (8004794 <UART_SetConfig+0x6a8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	f040 80ef 	bne.w	8004878 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800469a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800469e:	2b20      	cmp	r3, #32
 80046a0:	dc46      	bgt.n	8004730 <UART_SetConfig+0x644>
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	f2c0 8081 	blt.w	80047aa <UART_SetConfig+0x6be>
 80046a8:	3b02      	subs	r3, #2
 80046aa:	2b1e      	cmp	r3, #30
 80046ac:	d87d      	bhi.n	80047aa <UART_SetConfig+0x6be>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x5c8>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	08004737 	.word	0x08004737
 80046b8:	080047ab 	.word	0x080047ab
 80046bc:	0800473f 	.word	0x0800473f
 80046c0:	080047ab 	.word	0x080047ab
 80046c4:	080047ab 	.word	0x080047ab
 80046c8:	080047ab 	.word	0x080047ab
 80046cc:	0800474f 	.word	0x0800474f
 80046d0:	080047ab 	.word	0x080047ab
 80046d4:	080047ab 	.word	0x080047ab
 80046d8:	080047ab 	.word	0x080047ab
 80046dc:	080047ab 	.word	0x080047ab
 80046e0:	080047ab 	.word	0x080047ab
 80046e4:	080047ab 	.word	0x080047ab
 80046e8:	080047ab 	.word	0x080047ab
 80046ec:	0800475f 	.word	0x0800475f
 80046f0:	080047ab 	.word	0x080047ab
 80046f4:	080047ab 	.word	0x080047ab
 80046f8:	080047ab 	.word	0x080047ab
 80046fc:	080047ab 	.word	0x080047ab
 8004700:	080047ab 	.word	0x080047ab
 8004704:	080047ab 	.word	0x080047ab
 8004708:	080047ab 	.word	0x080047ab
 800470c:	080047ab 	.word	0x080047ab
 8004710:	080047ab 	.word	0x080047ab
 8004714:	080047ab 	.word	0x080047ab
 8004718:	080047ab 	.word	0x080047ab
 800471c:	080047ab 	.word	0x080047ab
 8004720:	080047ab 	.word	0x080047ab
 8004724:	080047ab 	.word	0x080047ab
 8004728:	080047ab 	.word	0x080047ab
 800472c:	0800479d 	.word	0x0800479d
 8004730:	2b40      	cmp	r3, #64	; 0x40
 8004732:	d036      	beq.n	80047a2 <UART_SetConfig+0x6b6>
 8004734:	e039      	b.n	80047aa <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004736:	f7ff f867 	bl	8003808 <HAL_RCCEx_GetD3PCLK1Freq>
 800473a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800473c:	e03b      	b.n	80047b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800473e:	f107 0314 	add.w	r3, r7, #20
 8004742:	4618      	mov	r0, r3
 8004744:	f7ff f876 	bl	8003834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800474c:	e033      	b.n	80047b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800474e:	f107 0308 	add.w	r3, r7, #8
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff f9c2 	bl	8003adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800475c:	e02b      	b.n	80047b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800475e:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <UART_SetConfig+0x69c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0320 	and.w	r3, r3, #32
 8004766:	2b00      	cmp	r3, #0
 8004768:	d009      	beq.n	800477e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <UART_SetConfig+0x69c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	08db      	lsrs	r3, r3, #3
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	4a08      	ldr	r2, [pc, #32]	; (8004798 <UART_SetConfig+0x6ac>)
 8004776:	fa22 f303 	lsr.w	r3, r2, r3
 800477a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800477c:	e01b      	b.n	80047b6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800477e:	4b06      	ldr	r3, [pc, #24]	; (8004798 <UART_SetConfig+0x6ac>)
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004782:	e018      	b.n	80047b6 <UART_SetConfig+0x6ca>
 8004784:	40011400 	.word	0x40011400
 8004788:	58024400 	.word	0x58024400
 800478c:	40007800 	.word	0x40007800
 8004790:	40007c00 	.word	0x40007c00
 8004794:	58000c00 	.word	0x58000c00
 8004798:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800479c:	4bc4      	ldr	r3, [pc, #784]	; (8004ab0 <UART_SetConfig+0x9c4>)
 800479e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	f000 81da 	beq.w	8004b72 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	4abc      	ldr	r2, [pc, #752]	; (8004ab4 <UART_SetConfig+0x9c8>)
 80047c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c8:	461a      	mov	r2, r3
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047d0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	4613      	mov	r3, r2
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	4413      	add	r3, r2
 80047dc:	6a3a      	ldr	r2, [r7, #32]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d305      	bcc.n	80047ee <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d903      	bls.n	80047f6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80047f4:	e1bd      	b.n	8004b72 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f8:	4618      	mov	r0, r3
 80047fa:	f04f 0100 	mov.w	r1, #0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	4aac      	ldr	r2, [pc, #688]	; (8004ab4 <UART_SetConfig+0x9c8>)
 8004804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004808:	b29a      	uxth	r2, r3
 800480a:	f04f 0300 	mov.w	r3, #0
 800480e:	f7fb fdbf 	bl	8000390 <__aeabi_uldivmod>
 8004812:	4602      	mov	r2, r0
 8004814:	460b      	mov	r3, r1
 8004816:	4610      	mov	r0, r2
 8004818:	4619      	mov	r1, r3
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	020b      	lsls	r3, r1, #8
 8004824:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004828:	0202      	lsls	r2, r0, #8
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	6849      	ldr	r1, [r1, #4]
 800482e:	0849      	lsrs	r1, r1, #1
 8004830:	4608      	mov	r0, r1
 8004832:	f04f 0100 	mov.w	r1, #0
 8004836:	1814      	adds	r4, r2, r0
 8004838:	eb43 0501 	adc.w	r5, r3, r1
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	461a      	mov	r2, r3
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	4620      	mov	r0, r4
 8004848:	4629      	mov	r1, r5
 800484a:	f7fb fda1 	bl	8000390 <__aeabi_uldivmod>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	4613      	mov	r3, r2
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004858:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800485c:	d308      	bcc.n	8004870 <UART_SetConfig+0x784>
 800485e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004864:	d204      	bcs.n	8004870 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	e180      	b.n	8004b72 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004876:	e17c      	b.n	8004b72 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004880:	f040 80be 	bne.w	8004a00 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004884:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004888:	2b20      	cmp	r3, #32
 800488a:	dc49      	bgt.n	8004920 <UART_SetConfig+0x834>
 800488c:	2b00      	cmp	r3, #0
 800488e:	db7c      	blt.n	800498a <UART_SetConfig+0x89e>
 8004890:	2b20      	cmp	r3, #32
 8004892:	d87a      	bhi.n	800498a <UART_SetConfig+0x89e>
 8004894:	a201      	add	r2, pc, #4	; (adr r2, 800489c <UART_SetConfig+0x7b0>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	08004927 	.word	0x08004927
 80048a0:	0800492f 	.word	0x0800492f
 80048a4:	0800498b 	.word	0x0800498b
 80048a8:	0800498b 	.word	0x0800498b
 80048ac:	08004937 	.word	0x08004937
 80048b0:	0800498b 	.word	0x0800498b
 80048b4:	0800498b 	.word	0x0800498b
 80048b8:	0800498b 	.word	0x0800498b
 80048bc:	08004947 	.word	0x08004947
 80048c0:	0800498b 	.word	0x0800498b
 80048c4:	0800498b 	.word	0x0800498b
 80048c8:	0800498b 	.word	0x0800498b
 80048cc:	0800498b 	.word	0x0800498b
 80048d0:	0800498b 	.word	0x0800498b
 80048d4:	0800498b 	.word	0x0800498b
 80048d8:	0800498b 	.word	0x0800498b
 80048dc:	08004957 	.word	0x08004957
 80048e0:	0800498b 	.word	0x0800498b
 80048e4:	0800498b 	.word	0x0800498b
 80048e8:	0800498b 	.word	0x0800498b
 80048ec:	0800498b 	.word	0x0800498b
 80048f0:	0800498b 	.word	0x0800498b
 80048f4:	0800498b 	.word	0x0800498b
 80048f8:	0800498b 	.word	0x0800498b
 80048fc:	0800498b 	.word	0x0800498b
 8004900:	0800498b 	.word	0x0800498b
 8004904:	0800498b 	.word	0x0800498b
 8004908:	0800498b 	.word	0x0800498b
 800490c:	0800498b 	.word	0x0800498b
 8004910:	0800498b 	.word	0x0800498b
 8004914:	0800498b 	.word	0x0800498b
 8004918:	0800498b 	.word	0x0800498b
 800491c:	0800497d 	.word	0x0800497d
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d02e      	beq.n	8004982 <UART_SetConfig+0x896>
 8004924:	e031      	b.n	800498a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004926:	f7fd ffd3 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 800492a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800492c:	e033      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800492e:	f7fd ffe5 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8004932:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004934:	e02f      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004936:	f107 0314 	add.w	r3, r7, #20
 800493a:	4618      	mov	r0, r3
 800493c:	f7fe ff7a 	bl	8003834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004944:	e027      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004946:	f107 0308 	add.w	r3, r7, #8
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff f8c6 	bl	8003adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004954:	e01f      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004956:	4b58      	ldr	r3, [pc, #352]	; (8004ab8 <UART_SetConfig+0x9cc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d009      	beq.n	8004976 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004962:	4b55      	ldr	r3, [pc, #340]	; (8004ab8 <UART_SetConfig+0x9cc>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	08db      	lsrs	r3, r3, #3
 8004968:	f003 0303 	and.w	r3, r3, #3
 800496c:	4a53      	ldr	r2, [pc, #332]	; (8004abc <UART_SetConfig+0x9d0>)
 800496e:	fa22 f303 	lsr.w	r3, r2, r3
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004974:	e00f      	b.n	8004996 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004976:	4b51      	ldr	r3, [pc, #324]	; (8004abc <UART_SetConfig+0x9d0>)
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800497a:	e00c      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800497c:	4b4c      	ldr	r3, [pc, #304]	; (8004ab0 <UART_SetConfig+0x9c4>)
 800497e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004980:	e009      	b.n	8004996 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004988:	e005      	b.n	8004996 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800498a:	2300      	movs	r3, #0
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 80ea 	beq.w	8004b72 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	4a44      	ldr	r2, [pc, #272]	; (8004ab4 <UART_SetConfig+0x9c8>)
 80049a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a8:	461a      	mov	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80049b0:	005a      	lsls	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	085b      	lsrs	r3, r3, #1
 80049b8:	441a      	add	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d916      	bls.n	80049f8 <UART_SetConfig+0x90c>
 80049ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049d0:	d212      	bcs.n	80049f8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	f023 030f 	bic.w	r3, r3, #15
 80049da:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	f003 0307 	and.w	r3, r3, #7
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049ea:	4313      	orrs	r3, r2
 80049ec:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049f4:	60da      	str	r2, [r3, #12]
 80049f6:	e0bc      	b.n	8004b72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80049fe:	e0b8      	b.n	8004b72 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004a04:	2b20      	cmp	r3, #32
 8004a06:	dc4b      	bgt.n	8004aa0 <UART_SetConfig+0x9b4>
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f2c0 8087 	blt.w	8004b1c <UART_SetConfig+0xa30>
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	f200 8084 	bhi.w	8004b1c <UART_SetConfig+0xa30>
 8004a14:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x930>)
 8004a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1a:	bf00      	nop
 8004a1c:	08004aa7 	.word	0x08004aa7
 8004a20:	08004ac1 	.word	0x08004ac1
 8004a24:	08004b1d 	.word	0x08004b1d
 8004a28:	08004b1d 	.word	0x08004b1d
 8004a2c:	08004ac9 	.word	0x08004ac9
 8004a30:	08004b1d 	.word	0x08004b1d
 8004a34:	08004b1d 	.word	0x08004b1d
 8004a38:	08004b1d 	.word	0x08004b1d
 8004a3c:	08004ad9 	.word	0x08004ad9
 8004a40:	08004b1d 	.word	0x08004b1d
 8004a44:	08004b1d 	.word	0x08004b1d
 8004a48:	08004b1d 	.word	0x08004b1d
 8004a4c:	08004b1d 	.word	0x08004b1d
 8004a50:	08004b1d 	.word	0x08004b1d
 8004a54:	08004b1d 	.word	0x08004b1d
 8004a58:	08004b1d 	.word	0x08004b1d
 8004a5c:	08004ae9 	.word	0x08004ae9
 8004a60:	08004b1d 	.word	0x08004b1d
 8004a64:	08004b1d 	.word	0x08004b1d
 8004a68:	08004b1d 	.word	0x08004b1d
 8004a6c:	08004b1d 	.word	0x08004b1d
 8004a70:	08004b1d 	.word	0x08004b1d
 8004a74:	08004b1d 	.word	0x08004b1d
 8004a78:	08004b1d 	.word	0x08004b1d
 8004a7c:	08004b1d 	.word	0x08004b1d
 8004a80:	08004b1d 	.word	0x08004b1d
 8004a84:	08004b1d 	.word	0x08004b1d
 8004a88:	08004b1d 	.word	0x08004b1d
 8004a8c:	08004b1d 	.word	0x08004b1d
 8004a90:	08004b1d 	.word	0x08004b1d
 8004a94:	08004b1d 	.word	0x08004b1d
 8004a98:	08004b1d 	.word	0x08004b1d
 8004a9c:	08004b0f 	.word	0x08004b0f
 8004aa0:	2b40      	cmp	r3, #64	; 0x40
 8004aa2:	d037      	beq.n	8004b14 <UART_SetConfig+0xa28>
 8004aa4:	e03a      	b.n	8004b1c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa6:	f7fd ff13 	bl	80028d0 <HAL_RCC_GetPCLK1Freq>
 8004aaa:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004aac:	e03c      	b.n	8004b28 <UART_SetConfig+0xa3c>
 8004aae:	bf00      	nop
 8004ab0:	003d0900 	.word	0x003d0900
 8004ab4:	08005be0 	.word	0x08005be0
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ac0:	f7fd ff1c 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8004ac4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004ac6:	e02f      	b.n	8004b28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fe feb1 	bl	8003834 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ad6:	e027      	b.n	8004b28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad8:	f107 0308 	add.w	r3, r7, #8
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fffd 	bl	8003adc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ae6:	e01f      	b.n	8004b28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae8:	4b2c      	ldr	r3, [pc, #176]	; (8004b9c <UART_SetConfig+0xab0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0320 	and.w	r3, r3, #32
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004af4:	4b29      	ldr	r3, [pc, #164]	; (8004b9c <UART_SetConfig+0xab0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	08db      	lsrs	r3, r3, #3
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	4a28      	ldr	r2, [pc, #160]	; (8004ba0 <UART_SetConfig+0xab4>)
 8004b00:	fa22 f303 	lsr.w	r3, r2, r3
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b06:	e00f      	b.n	8004b28 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8004b08:	4b25      	ldr	r3, [pc, #148]	; (8004ba0 <UART_SetConfig+0xab4>)
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b0c:	e00c      	b.n	8004b28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b0e:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <UART_SetConfig+0xab8>)
 8004b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b12:	e009      	b.n	8004b28 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b1a:	e005      	b.n	8004b28 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004b26:	bf00      	nop
    }

    if (pclk != 0U)
 8004b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d021      	beq.n	8004b72 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <UART_SetConfig+0xabc>)
 8004b34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	441a      	add	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	2b0f      	cmp	r3, #15
 8004b56:	d909      	bls.n	8004b6c <UART_SetConfig+0xa80>
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b5e:	d205      	bcs.n	8004b6c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	e002      	b.n	8004b72 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004b8e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3738      	adds	r7, #56	; 0x38
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bdb0      	pop	{r4, r5, r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	58024400 	.word	0x58024400
 8004ba0:	03d09000 	.word	0x03d09000
 8004ba4:	003d0900 	.word	0x003d0900
 8004ba8:	08005be0 	.word	0x08005be0

08004bac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	f003 0302 	and.w	r3, r3, #2
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00a      	beq.n	8004bf8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	f003 0304 	and.w	r3, r3, #4
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	f003 0308 	and.w	r3, r3, #8
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	f003 0310 	and.w	r3, r3, #16
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d00a      	beq.n	8004c5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00a      	beq.n	8004c80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01a      	beq.n	8004cc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004caa:	d10a      	bne.n	8004cc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	605a      	str	r2, [r3, #4]
  }
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d00:	f7fc fabc 	bl	800127c <HAL_GetTick>
 8004d04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d10e      	bne.n	8004d32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f82f 	bl	8004d86 <UART_WaitOnFlagUntilTimeout>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d001      	beq.n	8004d32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e025      	b.n	8004d7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b04      	cmp	r3, #4
 8004d3e:	d10e      	bne.n	8004d5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f819 	bl	8004d86 <UART_WaitOnFlagUntilTimeout>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d86:	b580      	push	{r7, lr}
 8004d88:	b09c      	sub	sp, #112	; 0x70
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	60f8      	str	r0, [r7, #12]
 8004d8e:	60b9      	str	r1, [r7, #8]
 8004d90:	603b      	str	r3, [r7, #0]
 8004d92:	4613      	mov	r3, r2
 8004d94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d96:	e0a9      	b.n	8004eec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9e:	f000 80a5 	beq.w	8004eec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da2:	f7fc fa6b 	bl	800127c <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004db2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d140      	bne.n	8004e3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dc0:	e853 3f00 	ldrex	r3, [r3]
 8004dc4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dcc:	667b      	str	r3, [r7, #100]	; 0x64
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dd8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ddc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1e6      	bne.n	8004db8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3308      	adds	r3, #8
 8004df0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df4:	e853 3f00 	ldrex	r3, [r3]
 8004df8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dfc:	f023 0301 	bic.w	r3, r3, #1
 8004e00:	663b      	str	r3, [r7, #96]	; 0x60
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	3308      	adds	r3, #8
 8004e08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004e0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004e0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e12:	e841 2300 	strex	r3, r2, [r1]
 8004e16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d1e5      	bne.n	8004dea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e069      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0304 	and.w	r3, r3, #4
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d051      	beq.n	8004eec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	69db      	ldr	r3, [r3, #28]
 8004e4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e56:	d149      	bne.n	8004eec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6a:	e853 3f00 	ldrex	r3, [r3]
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
 8004e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e88:	e841 2300 	strex	r3, r2, [r1]
 8004e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d1e6      	bne.n	8004e62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	e853 3f00 	ldrex	r3, [r3]
 8004ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004eb4:	623a      	str	r2, [r7, #32]
 8004eb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb8:	69f9      	ldr	r1, [r7, #28]
 8004eba:	6a3a      	ldr	r2, [r7, #32]
 8004ebc:	e841 2300 	strex	r3, r2, [r1]
 8004ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1e5      	bne.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2220      	movs	r2, #32
 8004ed4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e010      	b.n	8004f0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	69da      	ldr	r2, [r3, #28]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	461a      	mov	r2, r3
 8004f04:	79fb      	ldrb	r3, [r7, #7]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	f43f af46 	beq.w	8004d98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3770      	adds	r7, #112	; 0x70
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b085      	sub	sp, #20
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_UARTEx_DisableFifoMode+0x16>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e027      	b.n	8004f7c <HAL_UARTEx_DisableFifoMode+0x66>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2224      	movs	r2, #36	; 0x24
 8004f38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e02d      	b.n	8004ffc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2224      	movs	r2, #36	; 0x24
 8004fac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f022 0201 	bic.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f84f 	bl	8005080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005018:	2302      	movs	r3, #2
 800501a:	e02d      	b.n	8005078 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	; 0x24
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f811 	bl	8005080 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800508c:	2b00      	cmp	r3, #0
 800508e:	d108      	bne.n	80050a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050a0:	e031      	b.n	8005106 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050a2:	2310      	movs	r3, #16
 80050a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050a6:	2310      	movs	r3, #16
 80050a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	0e5b      	lsrs	r3, r3, #25
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	0f5b      	lsrs	r3, r3, #29
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050ca:	7bbb      	ldrb	r3, [r7, #14]
 80050cc:	7b3a      	ldrb	r2, [r7, #12]
 80050ce:	4911      	ldr	r1, [pc, #68]	; (8005114 <UARTEx_SetNbDataToProcess+0x94>)
 80050d0:	5c8a      	ldrb	r2, [r1, r2]
 80050d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80050d6:	7b3a      	ldrb	r2, [r7, #12]
 80050d8:	490f      	ldr	r1, [pc, #60]	; (8005118 <UARTEx_SetNbDataToProcess+0x98>)
 80050da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80050dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	7b7a      	ldrb	r2, [r7, #13]
 80050ec:	4909      	ldr	r1, [pc, #36]	; (8005114 <UARTEx_SetNbDataToProcess+0x94>)
 80050ee:	5c8a      	ldrb	r2, [r1, r2]
 80050f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80050f4:	7b7a      	ldrb	r2, [r7, #13]
 80050f6:	4908      	ldr	r1, [pc, #32]	; (8005118 <UARTEx_SetNbDataToProcess+0x98>)
 80050f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80050fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005106:	bf00      	nop
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	08005bf8 	.word	0x08005bf8
 8005118:	08005c00 	.word	0x08005c00

0800511c <atoi>:
 800511c:	220a      	movs	r2, #10
 800511e:	2100      	movs	r1, #0
 8005120:	f000 b8ea 	b.w	80052f8 <strtol>

08005124 <__errno>:
 8005124:	4b01      	ldr	r3, [pc, #4]	; (800512c <__errno+0x8>)
 8005126:	6818      	ldr	r0, [r3, #0]
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	24000010 	.word	0x24000010

08005130 <__libc_init_array>:
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4d0d      	ldr	r5, [pc, #52]	; (8005168 <__libc_init_array+0x38>)
 8005134:	4c0d      	ldr	r4, [pc, #52]	; (800516c <__libc_init_array+0x3c>)
 8005136:	1b64      	subs	r4, r4, r5
 8005138:	10a4      	asrs	r4, r4, #2
 800513a:	2600      	movs	r6, #0
 800513c:	42a6      	cmp	r6, r4
 800513e:	d109      	bne.n	8005154 <__libc_init_array+0x24>
 8005140:	4d0b      	ldr	r5, [pc, #44]	; (8005170 <__libc_init_array+0x40>)
 8005142:	4c0c      	ldr	r4, [pc, #48]	; (8005174 <__libc_init_array+0x44>)
 8005144:	f000 fcf0 	bl	8005b28 <_init>
 8005148:	1b64      	subs	r4, r4, r5
 800514a:	10a4      	asrs	r4, r4, #2
 800514c:	2600      	movs	r6, #0
 800514e:	42a6      	cmp	r6, r4
 8005150:	d105      	bne.n	800515e <__libc_init_array+0x2e>
 8005152:	bd70      	pop	{r4, r5, r6, pc}
 8005154:	f855 3b04 	ldr.w	r3, [r5], #4
 8005158:	4798      	blx	r3
 800515a:	3601      	adds	r6, #1
 800515c:	e7ee      	b.n	800513c <__libc_init_array+0xc>
 800515e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005162:	4798      	blx	r3
 8005164:	3601      	adds	r6, #1
 8005166:	e7f2      	b.n	800514e <__libc_init_array+0x1e>
 8005168:	08005d44 	.word	0x08005d44
 800516c:	08005d44 	.word	0x08005d44
 8005170:	08005d44 	.word	0x08005d44
 8005174:	08005d48 	.word	0x08005d48

08005178 <memset>:
 8005178:	4402      	add	r2, r0
 800517a:	4603      	mov	r3, r0
 800517c:	4293      	cmp	r3, r2
 800517e:	d100      	bne.n	8005182 <memset+0xa>
 8005180:	4770      	bx	lr
 8005182:	f803 1b01 	strb.w	r1, [r3], #1
 8005186:	e7f9      	b.n	800517c <memset+0x4>

08005188 <sniprintf>:
 8005188:	b40c      	push	{r2, r3}
 800518a:	b530      	push	{r4, r5, lr}
 800518c:	4b17      	ldr	r3, [pc, #92]	; (80051ec <sniprintf+0x64>)
 800518e:	1e0c      	subs	r4, r1, #0
 8005190:	681d      	ldr	r5, [r3, #0]
 8005192:	b09d      	sub	sp, #116	; 0x74
 8005194:	da08      	bge.n	80051a8 <sniprintf+0x20>
 8005196:	238b      	movs	r3, #139	; 0x8b
 8005198:	602b      	str	r3, [r5, #0]
 800519a:	f04f 30ff 	mov.w	r0, #4294967295
 800519e:	b01d      	add	sp, #116	; 0x74
 80051a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051a4:	b002      	add	sp, #8
 80051a6:	4770      	bx	lr
 80051a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80051ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80051b0:	bf14      	ite	ne
 80051b2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80051b6:	4623      	moveq	r3, r4
 80051b8:	9304      	str	r3, [sp, #16]
 80051ba:	9307      	str	r3, [sp, #28]
 80051bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80051c0:	9002      	str	r0, [sp, #8]
 80051c2:	9006      	str	r0, [sp, #24]
 80051c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80051c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051ca:	ab21      	add	r3, sp, #132	; 0x84
 80051cc:	a902      	add	r1, sp, #8
 80051ce:	4628      	mov	r0, r5
 80051d0:	9301      	str	r3, [sp, #4]
 80051d2:	f000 f8f7 	bl	80053c4 <_svfiprintf_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	bfbc      	itt	lt
 80051da:	238b      	movlt	r3, #139	; 0x8b
 80051dc:	602b      	strlt	r3, [r5, #0]
 80051de:	2c00      	cmp	r4, #0
 80051e0:	d0dd      	beq.n	800519e <sniprintf+0x16>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	2200      	movs	r2, #0
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e7d9      	b.n	800519e <sniprintf+0x16>
 80051ea:	bf00      	nop
 80051ec:	24000010 	.word	0x24000010

080051f0 <_strtol_l.isra.0>:
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051f6:	d001      	beq.n	80051fc <_strtol_l.isra.0+0xc>
 80051f8:	2b24      	cmp	r3, #36	; 0x24
 80051fa:	d906      	bls.n	800520a <_strtol_l.isra.0+0x1a>
 80051fc:	f7ff ff92 	bl	8005124 <__errno>
 8005200:	2316      	movs	r3, #22
 8005202:	6003      	str	r3, [r0, #0]
 8005204:	2000      	movs	r0, #0
 8005206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520a:	4f3a      	ldr	r7, [pc, #232]	; (80052f4 <_strtol_l.isra.0+0x104>)
 800520c:	468e      	mov	lr, r1
 800520e:	4676      	mov	r6, lr
 8005210:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005214:	5de5      	ldrb	r5, [r4, r7]
 8005216:	f015 0508 	ands.w	r5, r5, #8
 800521a:	d1f8      	bne.n	800520e <_strtol_l.isra.0+0x1e>
 800521c:	2c2d      	cmp	r4, #45	; 0x2d
 800521e:	d134      	bne.n	800528a <_strtol_l.isra.0+0x9a>
 8005220:	f89e 4000 	ldrb.w	r4, [lr]
 8005224:	f04f 0801 	mov.w	r8, #1
 8005228:	f106 0e02 	add.w	lr, r6, #2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d05c      	beq.n	80052ea <_strtol_l.isra.0+0xfa>
 8005230:	2b10      	cmp	r3, #16
 8005232:	d10c      	bne.n	800524e <_strtol_l.isra.0+0x5e>
 8005234:	2c30      	cmp	r4, #48	; 0x30
 8005236:	d10a      	bne.n	800524e <_strtol_l.isra.0+0x5e>
 8005238:	f89e 4000 	ldrb.w	r4, [lr]
 800523c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005240:	2c58      	cmp	r4, #88	; 0x58
 8005242:	d14d      	bne.n	80052e0 <_strtol_l.isra.0+0xf0>
 8005244:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005248:	2310      	movs	r3, #16
 800524a:	f10e 0e02 	add.w	lr, lr, #2
 800524e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005252:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005256:	2600      	movs	r6, #0
 8005258:	fbbc f9f3 	udiv	r9, ip, r3
 800525c:	4635      	mov	r5, r6
 800525e:	fb03 ca19 	mls	sl, r3, r9, ip
 8005262:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005266:	2f09      	cmp	r7, #9
 8005268:	d818      	bhi.n	800529c <_strtol_l.isra.0+0xac>
 800526a:	463c      	mov	r4, r7
 800526c:	42a3      	cmp	r3, r4
 800526e:	dd24      	ble.n	80052ba <_strtol_l.isra.0+0xca>
 8005270:	2e00      	cmp	r6, #0
 8005272:	db1f      	blt.n	80052b4 <_strtol_l.isra.0+0xc4>
 8005274:	45a9      	cmp	r9, r5
 8005276:	d31d      	bcc.n	80052b4 <_strtol_l.isra.0+0xc4>
 8005278:	d101      	bne.n	800527e <_strtol_l.isra.0+0x8e>
 800527a:	45a2      	cmp	sl, r4
 800527c:	db1a      	blt.n	80052b4 <_strtol_l.isra.0+0xc4>
 800527e:	fb05 4503 	mla	r5, r5, r3, r4
 8005282:	2601      	movs	r6, #1
 8005284:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005288:	e7eb      	b.n	8005262 <_strtol_l.isra.0+0x72>
 800528a:	2c2b      	cmp	r4, #43	; 0x2b
 800528c:	bf08      	it	eq
 800528e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005292:	46a8      	mov	r8, r5
 8005294:	bf08      	it	eq
 8005296:	f106 0e02 	addeq.w	lr, r6, #2
 800529a:	e7c7      	b.n	800522c <_strtol_l.isra.0+0x3c>
 800529c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80052a0:	2f19      	cmp	r7, #25
 80052a2:	d801      	bhi.n	80052a8 <_strtol_l.isra.0+0xb8>
 80052a4:	3c37      	subs	r4, #55	; 0x37
 80052a6:	e7e1      	b.n	800526c <_strtol_l.isra.0+0x7c>
 80052a8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80052ac:	2f19      	cmp	r7, #25
 80052ae:	d804      	bhi.n	80052ba <_strtol_l.isra.0+0xca>
 80052b0:	3c57      	subs	r4, #87	; 0x57
 80052b2:	e7db      	b.n	800526c <_strtol_l.isra.0+0x7c>
 80052b4:	f04f 36ff 	mov.w	r6, #4294967295
 80052b8:	e7e4      	b.n	8005284 <_strtol_l.isra.0+0x94>
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	da05      	bge.n	80052ca <_strtol_l.isra.0+0xda>
 80052be:	2322      	movs	r3, #34	; 0x22
 80052c0:	6003      	str	r3, [r0, #0]
 80052c2:	4665      	mov	r5, ip
 80052c4:	b942      	cbnz	r2, 80052d8 <_strtol_l.isra.0+0xe8>
 80052c6:	4628      	mov	r0, r5
 80052c8:	e79d      	b.n	8005206 <_strtol_l.isra.0+0x16>
 80052ca:	f1b8 0f00 	cmp.w	r8, #0
 80052ce:	d000      	beq.n	80052d2 <_strtol_l.isra.0+0xe2>
 80052d0:	426d      	negs	r5, r5
 80052d2:	2a00      	cmp	r2, #0
 80052d4:	d0f7      	beq.n	80052c6 <_strtol_l.isra.0+0xd6>
 80052d6:	b10e      	cbz	r6, 80052dc <_strtol_l.isra.0+0xec>
 80052d8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80052dc:	6011      	str	r1, [r2, #0]
 80052de:	e7f2      	b.n	80052c6 <_strtol_l.isra.0+0xd6>
 80052e0:	2430      	movs	r4, #48	; 0x30
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1b3      	bne.n	800524e <_strtol_l.isra.0+0x5e>
 80052e6:	2308      	movs	r3, #8
 80052e8:	e7b1      	b.n	800524e <_strtol_l.isra.0+0x5e>
 80052ea:	2c30      	cmp	r4, #48	; 0x30
 80052ec:	d0a4      	beq.n	8005238 <_strtol_l.isra.0+0x48>
 80052ee:	230a      	movs	r3, #10
 80052f0:	e7ad      	b.n	800524e <_strtol_l.isra.0+0x5e>
 80052f2:	bf00      	nop
 80052f4:	08005c09 	.word	0x08005c09

080052f8 <strtol>:
 80052f8:	4613      	mov	r3, r2
 80052fa:	460a      	mov	r2, r1
 80052fc:	4601      	mov	r1, r0
 80052fe:	4802      	ldr	r0, [pc, #8]	; (8005308 <strtol+0x10>)
 8005300:	6800      	ldr	r0, [r0, #0]
 8005302:	f7ff bf75 	b.w	80051f0 <_strtol_l.isra.0>
 8005306:	bf00      	nop
 8005308:	24000010 	.word	0x24000010

0800530c <__ssputs_r>:
 800530c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005310:	688e      	ldr	r6, [r1, #8]
 8005312:	429e      	cmp	r6, r3
 8005314:	4682      	mov	sl, r0
 8005316:	460c      	mov	r4, r1
 8005318:	4690      	mov	r8, r2
 800531a:	461f      	mov	r7, r3
 800531c:	d838      	bhi.n	8005390 <__ssputs_r+0x84>
 800531e:	898a      	ldrh	r2, [r1, #12]
 8005320:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005324:	d032      	beq.n	800538c <__ssputs_r+0x80>
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	6909      	ldr	r1, [r1, #16]
 800532a:	eba5 0901 	sub.w	r9, r5, r1
 800532e:	6965      	ldr	r5, [r4, #20]
 8005330:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005334:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005338:	3301      	adds	r3, #1
 800533a:	444b      	add	r3, r9
 800533c:	106d      	asrs	r5, r5, #1
 800533e:	429d      	cmp	r5, r3
 8005340:	bf38      	it	cc
 8005342:	461d      	movcc	r5, r3
 8005344:	0553      	lsls	r3, r2, #21
 8005346:	d531      	bpl.n	80053ac <__ssputs_r+0xa0>
 8005348:	4629      	mov	r1, r5
 800534a:	f000 fb47 	bl	80059dc <_malloc_r>
 800534e:	4606      	mov	r6, r0
 8005350:	b950      	cbnz	r0, 8005368 <__ssputs_r+0x5c>
 8005352:	230c      	movs	r3, #12
 8005354:	f8ca 3000 	str.w	r3, [sl]
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535e:	81a3      	strh	r3, [r4, #12]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	6921      	ldr	r1, [r4, #16]
 800536a:	464a      	mov	r2, r9
 800536c:	f000 fabe 	bl	80058ec <memcpy>
 8005370:	89a3      	ldrh	r3, [r4, #12]
 8005372:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005376:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800537a:	81a3      	strh	r3, [r4, #12]
 800537c:	6126      	str	r6, [r4, #16]
 800537e:	6165      	str	r5, [r4, #20]
 8005380:	444e      	add	r6, r9
 8005382:	eba5 0509 	sub.w	r5, r5, r9
 8005386:	6026      	str	r6, [r4, #0]
 8005388:	60a5      	str	r5, [r4, #8]
 800538a:	463e      	mov	r6, r7
 800538c:	42be      	cmp	r6, r7
 800538e:	d900      	bls.n	8005392 <__ssputs_r+0x86>
 8005390:	463e      	mov	r6, r7
 8005392:	4632      	mov	r2, r6
 8005394:	6820      	ldr	r0, [r4, #0]
 8005396:	4641      	mov	r1, r8
 8005398:	f000 fab6 	bl	8005908 <memmove>
 800539c:	68a3      	ldr	r3, [r4, #8]
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	1b9b      	subs	r3, r3, r6
 80053a2:	4432      	add	r2, r6
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	6022      	str	r2, [r4, #0]
 80053a8:	2000      	movs	r0, #0
 80053aa:	e7db      	b.n	8005364 <__ssputs_r+0x58>
 80053ac:	462a      	mov	r2, r5
 80053ae:	f000 fb6f 	bl	8005a90 <_realloc_r>
 80053b2:	4606      	mov	r6, r0
 80053b4:	2800      	cmp	r0, #0
 80053b6:	d1e1      	bne.n	800537c <__ssputs_r+0x70>
 80053b8:	6921      	ldr	r1, [r4, #16]
 80053ba:	4650      	mov	r0, sl
 80053bc:	f000 fabe 	bl	800593c <_free_r>
 80053c0:	e7c7      	b.n	8005352 <__ssputs_r+0x46>
	...

080053c4 <_svfiprintf_r>:
 80053c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c8:	4698      	mov	r8, r3
 80053ca:	898b      	ldrh	r3, [r1, #12]
 80053cc:	061b      	lsls	r3, r3, #24
 80053ce:	b09d      	sub	sp, #116	; 0x74
 80053d0:	4607      	mov	r7, r0
 80053d2:	460d      	mov	r5, r1
 80053d4:	4614      	mov	r4, r2
 80053d6:	d50e      	bpl.n	80053f6 <_svfiprintf_r+0x32>
 80053d8:	690b      	ldr	r3, [r1, #16]
 80053da:	b963      	cbnz	r3, 80053f6 <_svfiprintf_r+0x32>
 80053dc:	2140      	movs	r1, #64	; 0x40
 80053de:	f000 fafd 	bl	80059dc <_malloc_r>
 80053e2:	6028      	str	r0, [r5, #0]
 80053e4:	6128      	str	r0, [r5, #16]
 80053e6:	b920      	cbnz	r0, 80053f2 <_svfiprintf_r+0x2e>
 80053e8:	230c      	movs	r3, #12
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	f04f 30ff 	mov.w	r0, #4294967295
 80053f0:	e0d1      	b.n	8005596 <_svfiprintf_r+0x1d2>
 80053f2:	2340      	movs	r3, #64	; 0x40
 80053f4:	616b      	str	r3, [r5, #20]
 80053f6:	2300      	movs	r3, #0
 80053f8:	9309      	str	r3, [sp, #36]	; 0x24
 80053fa:	2320      	movs	r3, #32
 80053fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005400:	f8cd 800c 	str.w	r8, [sp, #12]
 8005404:	2330      	movs	r3, #48	; 0x30
 8005406:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80055b0 <_svfiprintf_r+0x1ec>
 800540a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800540e:	f04f 0901 	mov.w	r9, #1
 8005412:	4623      	mov	r3, r4
 8005414:	469a      	mov	sl, r3
 8005416:	f813 2b01 	ldrb.w	r2, [r3], #1
 800541a:	b10a      	cbz	r2, 8005420 <_svfiprintf_r+0x5c>
 800541c:	2a25      	cmp	r2, #37	; 0x25
 800541e:	d1f9      	bne.n	8005414 <_svfiprintf_r+0x50>
 8005420:	ebba 0b04 	subs.w	fp, sl, r4
 8005424:	d00b      	beq.n	800543e <_svfiprintf_r+0x7a>
 8005426:	465b      	mov	r3, fp
 8005428:	4622      	mov	r2, r4
 800542a:	4629      	mov	r1, r5
 800542c:	4638      	mov	r0, r7
 800542e:	f7ff ff6d 	bl	800530c <__ssputs_r>
 8005432:	3001      	adds	r0, #1
 8005434:	f000 80aa 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005438:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800543a:	445a      	add	r2, fp
 800543c:	9209      	str	r2, [sp, #36]	; 0x24
 800543e:	f89a 3000 	ldrb.w	r3, [sl]
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80a2 	beq.w	800558c <_svfiprintf_r+0x1c8>
 8005448:	2300      	movs	r3, #0
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005452:	f10a 0a01 	add.w	sl, sl, #1
 8005456:	9304      	str	r3, [sp, #16]
 8005458:	9307      	str	r3, [sp, #28]
 800545a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800545e:	931a      	str	r3, [sp, #104]	; 0x68
 8005460:	4654      	mov	r4, sl
 8005462:	2205      	movs	r2, #5
 8005464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005468:	4851      	ldr	r0, [pc, #324]	; (80055b0 <_svfiprintf_r+0x1ec>)
 800546a:	f7fa ff41 	bl	80002f0 <memchr>
 800546e:	9a04      	ldr	r2, [sp, #16]
 8005470:	b9d8      	cbnz	r0, 80054aa <_svfiprintf_r+0xe6>
 8005472:	06d0      	lsls	r0, r2, #27
 8005474:	bf44      	itt	mi
 8005476:	2320      	movmi	r3, #32
 8005478:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800547c:	0711      	lsls	r1, r2, #28
 800547e:	bf44      	itt	mi
 8005480:	232b      	movmi	r3, #43	; 0x2b
 8005482:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005486:	f89a 3000 	ldrb.w	r3, [sl]
 800548a:	2b2a      	cmp	r3, #42	; 0x2a
 800548c:	d015      	beq.n	80054ba <_svfiprintf_r+0xf6>
 800548e:	9a07      	ldr	r2, [sp, #28]
 8005490:	4654      	mov	r4, sl
 8005492:	2000      	movs	r0, #0
 8005494:	f04f 0c0a 	mov.w	ip, #10
 8005498:	4621      	mov	r1, r4
 800549a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800549e:	3b30      	subs	r3, #48	; 0x30
 80054a0:	2b09      	cmp	r3, #9
 80054a2:	d94e      	bls.n	8005542 <_svfiprintf_r+0x17e>
 80054a4:	b1b0      	cbz	r0, 80054d4 <_svfiprintf_r+0x110>
 80054a6:	9207      	str	r2, [sp, #28]
 80054a8:	e014      	b.n	80054d4 <_svfiprintf_r+0x110>
 80054aa:	eba0 0308 	sub.w	r3, r0, r8
 80054ae:	fa09 f303 	lsl.w	r3, r9, r3
 80054b2:	4313      	orrs	r3, r2
 80054b4:	9304      	str	r3, [sp, #16]
 80054b6:	46a2      	mov	sl, r4
 80054b8:	e7d2      	b.n	8005460 <_svfiprintf_r+0x9c>
 80054ba:	9b03      	ldr	r3, [sp, #12]
 80054bc:	1d19      	adds	r1, r3, #4
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	9103      	str	r1, [sp, #12]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfbb      	ittet	lt
 80054c6:	425b      	neglt	r3, r3
 80054c8:	f042 0202 	orrlt.w	r2, r2, #2
 80054cc:	9307      	strge	r3, [sp, #28]
 80054ce:	9307      	strlt	r3, [sp, #28]
 80054d0:	bfb8      	it	lt
 80054d2:	9204      	strlt	r2, [sp, #16]
 80054d4:	7823      	ldrb	r3, [r4, #0]
 80054d6:	2b2e      	cmp	r3, #46	; 0x2e
 80054d8:	d10c      	bne.n	80054f4 <_svfiprintf_r+0x130>
 80054da:	7863      	ldrb	r3, [r4, #1]
 80054dc:	2b2a      	cmp	r3, #42	; 0x2a
 80054de:	d135      	bne.n	800554c <_svfiprintf_r+0x188>
 80054e0:	9b03      	ldr	r3, [sp, #12]
 80054e2:	1d1a      	adds	r2, r3, #4
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	9203      	str	r2, [sp, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	bfb8      	it	lt
 80054ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80054f0:	3402      	adds	r4, #2
 80054f2:	9305      	str	r3, [sp, #20]
 80054f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055c0 <_svfiprintf_r+0x1fc>
 80054f8:	7821      	ldrb	r1, [r4, #0]
 80054fa:	2203      	movs	r2, #3
 80054fc:	4650      	mov	r0, sl
 80054fe:	f7fa fef7 	bl	80002f0 <memchr>
 8005502:	b140      	cbz	r0, 8005516 <_svfiprintf_r+0x152>
 8005504:	2340      	movs	r3, #64	; 0x40
 8005506:	eba0 000a 	sub.w	r0, r0, sl
 800550a:	fa03 f000 	lsl.w	r0, r3, r0
 800550e:	9b04      	ldr	r3, [sp, #16]
 8005510:	4303      	orrs	r3, r0
 8005512:	3401      	adds	r4, #1
 8005514:	9304      	str	r3, [sp, #16]
 8005516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551a:	4826      	ldr	r0, [pc, #152]	; (80055b4 <_svfiprintf_r+0x1f0>)
 800551c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005520:	2206      	movs	r2, #6
 8005522:	f7fa fee5 	bl	80002f0 <memchr>
 8005526:	2800      	cmp	r0, #0
 8005528:	d038      	beq.n	800559c <_svfiprintf_r+0x1d8>
 800552a:	4b23      	ldr	r3, [pc, #140]	; (80055b8 <_svfiprintf_r+0x1f4>)
 800552c:	bb1b      	cbnz	r3, 8005576 <_svfiprintf_r+0x1b2>
 800552e:	9b03      	ldr	r3, [sp, #12]
 8005530:	3307      	adds	r3, #7
 8005532:	f023 0307 	bic.w	r3, r3, #7
 8005536:	3308      	adds	r3, #8
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	4433      	add	r3, r6
 800553e:	9309      	str	r3, [sp, #36]	; 0x24
 8005540:	e767      	b.n	8005412 <_svfiprintf_r+0x4e>
 8005542:	fb0c 3202 	mla	r2, ip, r2, r3
 8005546:	460c      	mov	r4, r1
 8005548:	2001      	movs	r0, #1
 800554a:	e7a5      	b.n	8005498 <_svfiprintf_r+0xd4>
 800554c:	2300      	movs	r3, #0
 800554e:	3401      	adds	r4, #1
 8005550:	9305      	str	r3, [sp, #20]
 8005552:	4619      	mov	r1, r3
 8005554:	f04f 0c0a 	mov.w	ip, #10
 8005558:	4620      	mov	r0, r4
 800555a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800555e:	3a30      	subs	r2, #48	; 0x30
 8005560:	2a09      	cmp	r2, #9
 8005562:	d903      	bls.n	800556c <_svfiprintf_r+0x1a8>
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0c5      	beq.n	80054f4 <_svfiprintf_r+0x130>
 8005568:	9105      	str	r1, [sp, #20]
 800556a:	e7c3      	b.n	80054f4 <_svfiprintf_r+0x130>
 800556c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005570:	4604      	mov	r4, r0
 8005572:	2301      	movs	r3, #1
 8005574:	e7f0      	b.n	8005558 <_svfiprintf_r+0x194>
 8005576:	ab03      	add	r3, sp, #12
 8005578:	9300      	str	r3, [sp, #0]
 800557a:	462a      	mov	r2, r5
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <_svfiprintf_r+0x1f8>)
 800557e:	a904      	add	r1, sp, #16
 8005580:	4638      	mov	r0, r7
 8005582:	f3af 8000 	nop.w
 8005586:	1c42      	adds	r2, r0, #1
 8005588:	4606      	mov	r6, r0
 800558a:	d1d6      	bne.n	800553a <_svfiprintf_r+0x176>
 800558c:	89ab      	ldrh	r3, [r5, #12]
 800558e:	065b      	lsls	r3, r3, #25
 8005590:	f53f af2c 	bmi.w	80053ec <_svfiprintf_r+0x28>
 8005594:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005596:	b01d      	add	sp, #116	; 0x74
 8005598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559c:	ab03      	add	r3, sp, #12
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	462a      	mov	r2, r5
 80055a2:	4b06      	ldr	r3, [pc, #24]	; (80055bc <_svfiprintf_r+0x1f8>)
 80055a4:	a904      	add	r1, sp, #16
 80055a6:	4638      	mov	r0, r7
 80055a8:	f000 f87a 	bl	80056a0 <_printf_i>
 80055ac:	e7eb      	b.n	8005586 <_svfiprintf_r+0x1c2>
 80055ae:	bf00      	nop
 80055b0:	08005d09 	.word	0x08005d09
 80055b4:	08005d13 	.word	0x08005d13
 80055b8:	00000000 	.word	0x00000000
 80055bc:	0800530d 	.word	0x0800530d
 80055c0:	08005d0f 	.word	0x08005d0f

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4699      	mov	r9, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005610:	1e13      	subs	r3, r2, #0
 8005612:	6822      	ldr	r2, [r4, #0]
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005620:	4649      	mov	r1, r9
 8005622:	4638      	mov	r0, r7
 8005624:	47c0      	blx	r8
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	68e5      	ldr	r5, [r4, #12]
 800562e:	6832      	ldr	r2, [r6, #0]
 8005630:	f003 0306 	and.w	r3, r3, #6
 8005634:	2b04      	cmp	r3, #4
 8005636:	bf08      	it	eq
 8005638:	1aad      	subeq	r5, r5, r2
 800563a:	68a3      	ldr	r3, [r4, #8]
 800563c:	6922      	ldr	r2, [r4, #16]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4649      	mov	r1, r9
 8005660:	4638      	mov	r0, r7
 8005662:	47c0      	blx	r8
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	; 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4649      	mov	r1, r9
 8005692:	4638      	mov	r0, r7
 8005694:	47c0      	blx	r8
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	460c      	mov	r4, r1
 80056a6:	4691      	mov	r9, r2
 80056a8:	7e27      	ldrb	r7, [r4, #24]
 80056aa:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056ac:	2f78      	cmp	r7, #120	; 0x78
 80056ae:	4680      	mov	r8, r0
 80056b0:	469a      	mov	sl, r3
 80056b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	; 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d8 	beq.w	8005872 <_printf_i+0x1d2>
 80056c2:	2f58      	cmp	r7, #88	; 0x58
 80056c4:	f000 80a3 	beq.w	800580e <_printf_i+0x16e>
 80056c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a001      	add	r0, pc, #4	; (adr r0, 80056e0 <_printf_i+0x40>)
 80056dc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	08005859 	.word	0x08005859
 8005710:	0800577d 	.word	0x0800577d
 8005714:	0800583b 	.word	0x0800583b
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800587b 	.word	0x0800587b
 8005724:	080056c9 	.word	0x080056c9
 8005728:	0800577d 	.word	0x0800577d
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	08005843 	.word	0x08005843
 8005738:	680b      	ldr	r3, [r1, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	600a      	str	r2, [r1, #0]
 8005740:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e0a3      	b.n	8005894 <_printf_i+0x1f4>
 800574c:	6825      	ldr	r5, [r4, #0]
 800574e:	6808      	ldr	r0, [r1, #0]
 8005750:	062e      	lsls	r6, r5, #24
 8005752:	f100 0304 	add.w	r3, r0, #4
 8005756:	d50a      	bpl.n	800576e <_printf_i+0xce>
 8005758:	6805      	ldr	r5, [r0, #0]
 800575a:	600b      	str	r3, [r1, #0]
 800575c:	2d00      	cmp	r5, #0
 800575e:	da03      	bge.n	8005768 <_printf_i+0xc8>
 8005760:	232d      	movs	r3, #45	; 0x2d
 8005762:	426d      	negs	r5, r5
 8005764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005768:	485e      	ldr	r0, [pc, #376]	; (80058e4 <_printf_i+0x244>)
 800576a:	230a      	movs	r3, #10
 800576c:	e019      	b.n	80057a2 <_printf_i+0x102>
 800576e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005772:	6805      	ldr	r5, [r0, #0]
 8005774:	600b      	str	r3, [r1, #0]
 8005776:	bf18      	it	ne
 8005778:	b22d      	sxthne	r5, r5
 800577a:	e7ef      	b.n	800575c <_printf_i+0xbc>
 800577c:	680b      	ldr	r3, [r1, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	1d18      	adds	r0, r3, #4
 8005782:	6008      	str	r0, [r1, #0]
 8005784:	0628      	lsls	r0, r5, #24
 8005786:	d501      	bpl.n	800578c <_printf_i+0xec>
 8005788:	681d      	ldr	r5, [r3, #0]
 800578a:	e002      	b.n	8005792 <_printf_i+0xf2>
 800578c:	0669      	lsls	r1, r5, #25
 800578e:	d5fb      	bpl.n	8005788 <_printf_i+0xe8>
 8005790:	881d      	ldrh	r5, [r3, #0]
 8005792:	4854      	ldr	r0, [pc, #336]	; (80058e4 <_printf_i+0x244>)
 8005794:	2f6f      	cmp	r7, #111	; 0x6f
 8005796:	bf0c      	ite	eq
 8005798:	2308      	moveq	r3, #8
 800579a:	230a      	movne	r3, #10
 800579c:	2100      	movs	r1, #0
 800579e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057a2:	6866      	ldr	r6, [r4, #4]
 80057a4:	60a6      	str	r6, [r4, #8]
 80057a6:	2e00      	cmp	r6, #0
 80057a8:	bfa2      	ittt	ge
 80057aa:	6821      	ldrge	r1, [r4, #0]
 80057ac:	f021 0104 	bicge.w	r1, r1, #4
 80057b0:	6021      	strge	r1, [r4, #0]
 80057b2:	b90d      	cbnz	r5, 80057b8 <_printf_i+0x118>
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	d04d      	beq.n	8005854 <_printf_i+0x1b4>
 80057b8:	4616      	mov	r6, r2
 80057ba:	fbb5 f1f3 	udiv	r1, r5, r3
 80057be:	fb03 5711 	mls	r7, r3, r1, r5
 80057c2:	5dc7      	ldrb	r7, [r0, r7]
 80057c4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c8:	462f      	mov	r7, r5
 80057ca:	42bb      	cmp	r3, r7
 80057cc:	460d      	mov	r5, r1
 80057ce:	d9f4      	bls.n	80057ba <_printf_i+0x11a>
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10b      	bne.n	80057ec <_printf_i+0x14c>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	07df      	lsls	r7, r3, #31
 80057d8:	d508      	bpl.n	80057ec <_printf_i+0x14c>
 80057da:	6923      	ldr	r3, [r4, #16]
 80057dc:	6861      	ldr	r1, [r4, #4]
 80057de:	4299      	cmp	r1, r3
 80057e0:	bfde      	ittt	le
 80057e2:	2330      	movle	r3, #48	; 0x30
 80057e4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057ec:	1b92      	subs	r2, r2, r6
 80057ee:	6122      	str	r2, [r4, #16]
 80057f0:	f8cd a000 	str.w	sl, [sp]
 80057f4:	464b      	mov	r3, r9
 80057f6:	aa03      	add	r2, sp, #12
 80057f8:	4621      	mov	r1, r4
 80057fa:	4640      	mov	r0, r8
 80057fc:	f7ff fee2 	bl	80055c4 <_printf_common>
 8005800:	3001      	adds	r0, #1
 8005802:	d14c      	bne.n	800589e <_printf_i+0x1fe>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b004      	add	sp, #16
 800580a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800580e:	4835      	ldr	r0, [pc, #212]	; (80058e4 <_printf_i+0x244>)
 8005810:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	680e      	ldr	r6, [r1, #0]
 8005818:	061f      	lsls	r7, r3, #24
 800581a:	f856 5b04 	ldr.w	r5, [r6], #4
 800581e:	600e      	str	r6, [r1, #0]
 8005820:	d514      	bpl.n	800584c <_printf_i+0x1ac>
 8005822:	07d9      	lsls	r1, r3, #31
 8005824:	bf44      	itt	mi
 8005826:	f043 0320 	orrmi.w	r3, r3, #32
 800582a:	6023      	strmi	r3, [r4, #0]
 800582c:	b91d      	cbnz	r5, 8005836 <_printf_i+0x196>
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	f023 0320 	bic.w	r3, r3, #32
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	2310      	movs	r3, #16
 8005838:	e7b0      	b.n	800579c <_printf_i+0xfc>
 800583a:	6823      	ldr	r3, [r4, #0]
 800583c:	f043 0320 	orr.w	r3, r3, #32
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	2378      	movs	r3, #120	; 0x78
 8005844:	4828      	ldr	r0, [pc, #160]	; (80058e8 <_printf_i+0x248>)
 8005846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800584a:	e7e3      	b.n	8005814 <_printf_i+0x174>
 800584c:	065e      	lsls	r6, r3, #25
 800584e:	bf48      	it	mi
 8005850:	b2ad      	uxthmi	r5, r5
 8005852:	e7e6      	b.n	8005822 <_printf_i+0x182>
 8005854:	4616      	mov	r6, r2
 8005856:	e7bb      	b.n	80057d0 <_printf_i+0x130>
 8005858:	680b      	ldr	r3, [r1, #0]
 800585a:	6826      	ldr	r6, [r4, #0]
 800585c:	6960      	ldr	r0, [r4, #20]
 800585e:	1d1d      	adds	r5, r3, #4
 8005860:	600d      	str	r5, [r1, #0]
 8005862:	0635      	lsls	r5, r6, #24
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	d501      	bpl.n	800586c <_printf_i+0x1cc>
 8005868:	6018      	str	r0, [r3, #0]
 800586a:	e002      	b.n	8005872 <_printf_i+0x1d2>
 800586c:	0671      	lsls	r1, r6, #25
 800586e:	d5fb      	bpl.n	8005868 <_printf_i+0x1c8>
 8005870:	8018      	strh	r0, [r3, #0]
 8005872:	2300      	movs	r3, #0
 8005874:	6123      	str	r3, [r4, #16]
 8005876:	4616      	mov	r6, r2
 8005878:	e7ba      	b.n	80057f0 <_printf_i+0x150>
 800587a:	680b      	ldr	r3, [r1, #0]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	600a      	str	r2, [r1, #0]
 8005880:	681e      	ldr	r6, [r3, #0]
 8005882:	6862      	ldr	r2, [r4, #4]
 8005884:	2100      	movs	r1, #0
 8005886:	4630      	mov	r0, r6
 8005888:	f7fa fd32 	bl	80002f0 <memchr>
 800588c:	b108      	cbz	r0, 8005892 <_printf_i+0x1f2>
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	6863      	ldr	r3, [r4, #4]
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	2300      	movs	r3, #0
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	e7a8      	b.n	80057f0 <_printf_i+0x150>
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	4632      	mov	r2, r6
 80058a2:	4649      	mov	r1, r9
 80058a4:	4640      	mov	r0, r8
 80058a6:	47d0      	blx	sl
 80058a8:	3001      	adds	r0, #1
 80058aa:	d0ab      	beq.n	8005804 <_printf_i+0x164>
 80058ac:	6823      	ldr	r3, [r4, #0]
 80058ae:	079b      	lsls	r3, r3, #30
 80058b0:	d413      	bmi.n	80058da <_printf_i+0x23a>
 80058b2:	68e0      	ldr	r0, [r4, #12]
 80058b4:	9b03      	ldr	r3, [sp, #12]
 80058b6:	4298      	cmp	r0, r3
 80058b8:	bfb8      	it	lt
 80058ba:	4618      	movlt	r0, r3
 80058bc:	e7a4      	b.n	8005808 <_printf_i+0x168>
 80058be:	2301      	movs	r3, #1
 80058c0:	4632      	mov	r2, r6
 80058c2:	4649      	mov	r1, r9
 80058c4:	4640      	mov	r0, r8
 80058c6:	47d0      	blx	sl
 80058c8:	3001      	adds	r0, #1
 80058ca:	d09b      	beq.n	8005804 <_printf_i+0x164>
 80058cc:	3501      	adds	r5, #1
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	9903      	ldr	r1, [sp, #12]
 80058d2:	1a5b      	subs	r3, r3, r1
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dcf2      	bgt.n	80058be <_printf_i+0x21e>
 80058d8:	e7eb      	b.n	80058b2 <_printf_i+0x212>
 80058da:	2500      	movs	r5, #0
 80058dc:	f104 0619 	add.w	r6, r4, #25
 80058e0:	e7f5      	b.n	80058ce <_printf_i+0x22e>
 80058e2:	bf00      	nop
 80058e4:	08005d1a 	.word	0x08005d1a
 80058e8:	08005d2b 	.word	0x08005d2b

080058ec <memcpy>:
 80058ec:	440a      	add	r2, r1
 80058ee:	4291      	cmp	r1, r2
 80058f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80058f4:	d100      	bne.n	80058f8 <memcpy+0xc>
 80058f6:	4770      	bx	lr
 80058f8:	b510      	push	{r4, lr}
 80058fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005902:	4291      	cmp	r1, r2
 8005904:	d1f9      	bne.n	80058fa <memcpy+0xe>
 8005906:	bd10      	pop	{r4, pc}

08005908 <memmove>:
 8005908:	4288      	cmp	r0, r1
 800590a:	b510      	push	{r4, lr}
 800590c:	eb01 0402 	add.w	r4, r1, r2
 8005910:	d902      	bls.n	8005918 <memmove+0x10>
 8005912:	4284      	cmp	r4, r0
 8005914:	4623      	mov	r3, r4
 8005916:	d807      	bhi.n	8005928 <memmove+0x20>
 8005918:	1e43      	subs	r3, r0, #1
 800591a:	42a1      	cmp	r1, r4
 800591c:	d008      	beq.n	8005930 <memmove+0x28>
 800591e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005926:	e7f8      	b.n	800591a <memmove+0x12>
 8005928:	4402      	add	r2, r0
 800592a:	4601      	mov	r1, r0
 800592c:	428a      	cmp	r2, r1
 800592e:	d100      	bne.n	8005932 <memmove+0x2a>
 8005930:	bd10      	pop	{r4, pc}
 8005932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800593a:	e7f7      	b.n	800592c <memmove+0x24>

0800593c <_free_r>:
 800593c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800593e:	2900      	cmp	r1, #0
 8005940:	d048      	beq.n	80059d4 <_free_r+0x98>
 8005942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005946:	9001      	str	r0, [sp, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	f1a1 0404 	sub.w	r4, r1, #4
 800594e:	bfb8      	it	lt
 8005950:	18e4      	addlt	r4, r4, r3
 8005952:	f000 f8d3 	bl	8005afc <__malloc_lock>
 8005956:	4a20      	ldr	r2, [pc, #128]	; (80059d8 <_free_r+0x9c>)
 8005958:	9801      	ldr	r0, [sp, #4]
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	4615      	mov	r5, r2
 800595e:	b933      	cbnz	r3, 800596e <_free_r+0x32>
 8005960:	6063      	str	r3, [r4, #4]
 8005962:	6014      	str	r4, [r2, #0]
 8005964:	b003      	add	sp, #12
 8005966:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800596a:	f000 b8cd 	b.w	8005b08 <__malloc_unlock>
 800596e:	42a3      	cmp	r3, r4
 8005970:	d90b      	bls.n	800598a <_free_r+0x4e>
 8005972:	6821      	ldr	r1, [r4, #0]
 8005974:	1862      	adds	r2, r4, r1
 8005976:	4293      	cmp	r3, r2
 8005978:	bf04      	itt	eq
 800597a:	681a      	ldreq	r2, [r3, #0]
 800597c:	685b      	ldreq	r3, [r3, #4]
 800597e:	6063      	str	r3, [r4, #4]
 8005980:	bf04      	itt	eq
 8005982:	1852      	addeq	r2, r2, r1
 8005984:	6022      	streq	r2, [r4, #0]
 8005986:	602c      	str	r4, [r5, #0]
 8005988:	e7ec      	b.n	8005964 <_free_r+0x28>
 800598a:	461a      	mov	r2, r3
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	b10b      	cbz	r3, 8005994 <_free_r+0x58>
 8005990:	42a3      	cmp	r3, r4
 8005992:	d9fa      	bls.n	800598a <_free_r+0x4e>
 8005994:	6811      	ldr	r1, [r2, #0]
 8005996:	1855      	adds	r5, r2, r1
 8005998:	42a5      	cmp	r5, r4
 800599a:	d10b      	bne.n	80059b4 <_free_r+0x78>
 800599c:	6824      	ldr	r4, [r4, #0]
 800599e:	4421      	add	r1, r4
 80059a0:	1854      	adds	r4, r2, r1
 80059a2:	42a3      	cmp	r3, r4
 80059a4:	6011      	str	r1, [r2, #0]
 80059a6:	d1dd      	bne.n	8005964 <_free_r+0x28>
 80059a8:	681c      	ldr	r4, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	6053      	str	r3, [r2, #4]
 80059ae:	4421      	add	r1, r4
 80059b0:	6011      	str	r1, [r2, #0]
 80059b2:	e7d7      	b.n	8005964 <_free_r+0x28>
 80059b4:	d902      	bls.n	80059bc <_free_r+0x80>
 80059b6:	230c      	movs	r3, #12
 80059b8:	6003      	str	r3, [r0, #0]
 80059ba:	e7d3      	b.n	8005964 <_free_r+0x28>
 80059bc:	6825      	ldr	r5, [r4, #0]
 80059be:	1961      	adds	r1, r4, r5
 80059c0:	428b      	cmp	r3, r1
 80059c2:	bf04      	itt	eq
 80059c4:	6819      	ldreq	r1, [r3, #0]
 80059c6:	685b      	ldreq	r3, [r3, #4]
 80059c8:	6063      	str	r3, [r4, #4]
 80059ca:	bf04      	itt	eq
 80059cc:	1949      	addeq	r1, r1, r5
 80059ce:	6021      	streq	r1, [r4, #0]
 80059d0:	6054      	str	r4, [r2, #4]
 80059d2:	e7c7      	b.n	8005964 <_free_r+0x28>
 80059d4:	b003      	add	sp, #12
 80059d6:	bd30      	pop	{r4, r5, pc}
 80059d8:	2400012c 	.word	0x2400012c

080059dc <_malloc_r>:
 80059dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059de:	1ccd      	adds	r5, r1, #3
 80059e0:	f025 0503 	bic.w	r5, r5, #3
 80059e4:	3508      	adds	r5, #8
 80059e6:	2d0c      	cmp	r5, #12
 80059e8:	bf38      	it	cc
 80059ea:	250c      	movcc	r5, #12
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	4606      	mov	r6, r0
 80059f0:	db01      	blt.n	80059f6 <_malloc_r+0x1a>
 80059f2:	42a9      	cmp	r1, r5
 80059f4:	d903      	bls.n	80059fe <_malloc_r+0x22>
 80059f6:	230c      	movs	r3, #12
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	2000      	movs	r0, #0
 80059fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059fe:	f000 f87d 	bl	8005afc <__malloc_lock>
 8005a02:	4921      	ldr	r1, [pc, #132]	; (8005a88 <_malloc_r+0xac>)
 8005a04:	680a      	ldr	r2, [r1, #0]
 8005a06:	4614      	mov	r4, r2
 8005a08:	b99c      	cbnz	r4, 8005a32 <_malloc_r+0x56>
 8005a0a:	4f20      	ldr	r7, [pc, #128]	; (8005a8c <_malloc_r+0xb0>)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	b923      	cbnz	r3, 8005a1a <_malloc_r+0x3e>
 8005a10:	4621      	mov	r1, r4
 8005a12:	4630      	mov	r0, r6
 8005a14:	f000 f862 	bl	8005adc <_sbrk_r>
 8005a18:	6038      	str	r0, [r7, #0]
 8005a1a:	4629      	mov	r1, r5
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 f85d 	bl	8005adc <_sbrk_r>
 8005a22:	1c43      	adds	r3, r0, #1
 8005a24:	d123      	bne.n	8005a6e <_malloc_r+0x92>
 8005a26:	230c      	movs	r3, #12
 8005a28:	6033      	str	r3, [r6, #0]
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f000 f86c 	bl	8005b08 <__malloc_unlock>
 8005a30:	e7e3      	b.n	80059fa <_malloc_r+0x1e>
 8005a32:	6823      	ldr	r3, [r4, #0]
 8005a34:	1b5b      	subs	r3, r3, r5
 8005a36:	d417      	bmi.n	8005a68 <_malloc_r+0x8c>
 8005a38:	2b0b      	cmp	r3, #11
 8005a3a:	d903      	bls.n	8005a44 <_malloc_r+0x68>
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	441c      	add	r4, r3
 8005a40:	6025      	str	r5, [r4, #0]
 8005a42:	e004      	b.n	8005a4e <_malloc_r+0x72>
 8005a44:	6863      	ldr	r3, [r4, #4]
 8005a46:	42a2      	cmp	r2, r4
 8005a48:	bf0c      	ite	eq
 8005a4a:	600b      	streq	r3, [r1, #0]
 8005a4c:	6053      	strne	r3, [r2, #4]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	f000 f85a 	bl	8005b08 <__malloc_unlock>
 8005a54:	f104 000b 	add.w	r0, r4, #11
 8005a58:	1d23      	adds	r3, r4, #4
 8005a5a:	f020 0007 	bic.w	r0, r0, #7
 8005a5e:	1ac2      	subs	r2, r0, r3
 8005a60:	d0cc      	beq.n	80059fc <_malloc_r+0x20>
 8005a62:	1a1b      	subs	r3, r3, r0
 8005a64:	50a3      	str	r3, [r4, r2]
 8005a66:	e7c9      	b.n	80059fc <_malloc_r+0x20>
 8005a68:	4622      	mov	r2, r4
 8005a6a:	6864      	ldr	r4, [r4, #4]
 8005a6c:	e7cc      	b.n	8005a08 <_malloc_r+0x2c>
 8005a6e:	1cc4      	adds	r4, r0, #3
 8005a70:	f024 0403 	bic.w	r4, r4, #3
 8005a74:	42a0      	cmp	r0, r4
 8005a76:	d0e3      	beq.n	8005a40 <_malloc_r+0x64>
 8005a78:	1a21      	subs	r1, r4, r0
 8005a7a:	4630      	mov	r0, r6
 8005a7c:	f000 f82e 	bl	8005adc <_sbrk_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d1dd      	bne.n	8005a40 <_malloc_r+0x64>
 8005a84:	e7cf      	b.n	8005a26 <_malloc_r+0x4a>
 8005a86:	bf00      	nop
 8005a88:	2400012c 	.word	0x2400012c
 8005a8c:	24000130 	.word	0x24000130

08005a90 <_realloc_r>:
 8005a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a92:	4607      	mov	r7, r0
 8005a94:	4614      	mov	r4, r2
 8005a96:	460e      	mov	r6, r1
 8005a98:	b921      	cbnz	r1, 8005aa4 <_realloc_r+0x14>
 8005a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a9e:	4611      	mov	r1, r2
 8005aa0:	f7ff bf9c 	b.w	80059dc <_malloc_r>
 8005aa4:	b922      	cbnz	r2, 8005ab0 <_realloc_r+0x20>
 8005aa6:	f7ff ff49 	bl	800593c <_free_r>
 8005aaa:	4625      	mov	r5, r4
 8005aac:	4628      	mov	r0, r5
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	f000 f830 	bl	8005b14 <_malloc_usable_size_r>
 8005ab4:	42a0      	cmp	r0, r4
 8005ab6:	d20f      	bcs.n	8005ad8 <_realloc_r+0x48>
 8005ab8:	4621      	mov	r1, r4
 8005aba:	4638      	mov	r0, r7
 8005abc:	f7ff ff8e 	bl	80059dc <_malloc_r>
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	2800      	cmp	r0, #0
 8005ac4:	d0f2      	beq.n	8005aac <_realloc_r+0x1c>
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4622      	mov	r2, r4
 8005aca:	f7ff ff0f 	bl	80058ec <memcpy>
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4638      	mov	r0, r7
 8005ad2:	f7ff ff33 	bl	800593c <_free_r>
 8005ad6:	e7e9      	b.n	8005aac <_realloc_r+0x1c>
 8005ad8:	4635      	mov	r5, r6
 8005ada:	e7e7      	b.n	8005aac <_realloc_r+0x1c>

08005adc <_sbrk_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d06      	ldr	r5, [pc, #24]	; (8005af8 <_sbrk_r+0x1c>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	f7fb fae2 	bl	80010b0 <_sbrk>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_sbrk_r+0x1a>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_sbrk_r+0x1a>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	24000138 	.word	0x24000138

08005afc <__malloc_lock>:
 8005afc:	4801      	ldr	r0, [pc, #4]	; (8005b04 <__malloc_lock+0x8>)
 8005afe:	f000 b811 	b.w	8005b24 <__retarget_lock_acquire_recursive>
 8005b02:	bf00      	nop
 8005b04:	24000140 	.word	0x24000140

08005b08 <__malloc_unlock>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__malloc_unlock+0x8>)
 8005b0a:	f000 b80c 	b.w	8005b26 <__retarget_lock_release_recursive>
 8005b0e:	bf00      	nop
 8005b10:	24000140 	.word	0x24000140

08005b14 <_malloc_usable_size_r>:
 8005b14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b18:	1f18      	subs	r0, r3, #4
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	bfbc      	itt	lt
 8005b1e:	580b      	ldrlt	r3, [r1, r0]
 8005b20:	18c0      	addlt	r0, r0, r3
 8005b22:	4770      	bx	lr

08005b24 <__retarget_lock_acquire_recursive>:
 8005b24:	4770      	bx	lr

08005b26 <__retarget_lock_release_recursive>:
 8005b26:	4770      	bx	lr

08005b28 <_init>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr

08005b34 <_fini>:
 8005b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b36:	bf00      	nop
 8005b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b3a:	bc08      	pop	{r3}
 8005b3c:	469e      	mov	lr, r3
 8005b3e:	4770      	bx	lr
