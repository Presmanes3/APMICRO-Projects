
Practicas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cdc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08004f74  08004f74  00014f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050c0  080050c0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c8  080050c8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c8  080050c8  000150c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050cc  080050cc  000150cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  080050d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000074  08005144  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000124  08005144  00020124  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aece  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d4  00000000  00000000  0003af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0003d848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a68  00000000  00000000  0003e358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000411d6  00000000  00000000  0003edc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f055  00000000  00000000  0007ff96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197631  00000000  00000000  0008efeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022661c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dc8  00000000  00000000  00226670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000074 	.word	0x24000074
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004f5c 	.word	0x08004f5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000078 	.word	0x24000078
 80002d4:	08004f5c 	.word	0x08004f5c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <_Z9Practica2v>:
#define APB4ENR_HSE_EN (1 << 25)

#define GPIOA_9_UART 18
#define GPIOA_10_UART 20

void Practica2() {
 8000704:	b590      	push	{r4, r7, lr}
 8000706:	b08b      	sub	sp, #44	; 0x2c
 8000708:	af00      	add	r7, sp, #0

	// Ejercicio 2.1
	RCC->APB2ENR |= UART1_EN;
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <_Z9Practica2v+0x114>)
 800070c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000710:	4a41      	ldr	r2, [pc, #260]	; (8000818 <_Z9Practica2v+0x114>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

	// Ejercicio 2.2
	RCC->APB4ENR |= APB4ENR_HSE_EN;
 800071a:	4b3f      	ldr	r3, [pc, #252]	; (8000818 <_Z9Practica2v+0x114>)
 800071c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000720:	4a3d      	ldr	r2, [pc, #244]	; (8000818 <_Z9Practica2v+0x114>)
 8000722:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000726:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4

	GPIOA->MODER = 0xABFFFFFF;
 800072a:	4b3c      	ldr	r3, [pc, #240]	; (800081c <_Z9Practica2v+0x118>)
 800072c:	f06f 42a8 	mvn.w	r2, #1409286144	; 0x54000000
 8000730:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((0x01 << GPIOA_9_UART) | (0x01 << GPIOA_10_UART));
 8000732:	4b3a      	ldr	r3, [pc, #232]	; (800081c <_Z9Practica2v+0x118>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a39      	ldr	r2, [pc, #228]	; (800081c <_Z9Practica2v+0x118>)
 8000738:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
 800073c:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[1] |= (0x00000000 | (0x07 << 4) | (0x07 << 8));
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <_Z9Practica2v+0x118>)
 8000740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000742:	4a36      	ldr	r2, [pc, #216]	; (800081c <_Z9Practica2v+0x118>)
 8000744:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 8000748:	6253      	str	r3, [r2, #36]	; 0x24

// Ejercicio 2.3
	USART1->CR1 |= (1 << 29) + (1 << 3) + (1 << 2) + (1 << 0);
 800074a:	4b35      	ldr	r3, [pc, #212]	; (8000820 <_Z9Practica2v+0x11c>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4934      	ldr	r1, [pc, #208]	; (8000820 <_Z9Practica2v+0x11c>)
 8000750:	4b34      	ldr	r3, [pc, #208]	; (8000824 <_Z9Practica2v+0x120>)
 8000752:	4313      	orrs	r3, r2
 8000754:	600b      	str	r3, [r1, #0]
	USART1->BRR = 556;
 8000756:	4b32      	ldr	r3, [pc, #200]	; (8000820 <_Z9Practica2v+0x11c>)
 8000758:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800075c:	60da      	str	r2, [r3, #12]

// Ejercicio 2.4

	char str[13] = "Hola Mundo\r\n";
 800075e:	4b32      	ldr	r3, [pc, #200]	; (8000828 <_Z9Practica2v+0x124>)
 8000760:	1d3c      	adds	r4, r7, #4
 8000762:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000764:	c407      	stmia	r4!, {r0, r1, r2}
 8000766:	7023      	strb	r3, [r4, #0]

	uint32_t timeStart = HAL_GetTick();
 8000768:	f000 fbe4 	bl	8000f34 <HAL_GetTick>
 800076c:	6238      	str	r0, [r7, #32]
	while (HAL_GetTick() - timeStart < 1000) {
 800076e:	f000 fbe1 	bl	8000f34 <HAL_GetTick>
 8000772:	4602      	mov	r2, r0
 8000774:	6a3b      	ldr	r3, [r7, #32]
 8000776:	1ad3      	subs	r3, r2, r3
 8000778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800077c:	4293      	cmp	r3, r2
 800077e:	bf94      	ite	ls
 8000780:	2301      	movls	r3, #1
 8000782:	2300      	movhi	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d024      	beq.n	80007d4 <_Z9Practica2v+0xd0>
//	while (true) {

		for (uint8_t x = 0; x < 11; x++) {
 800078a:	2300      	movs	r3, #0
 800078c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000794:	2b0a      	cmp	r3, #10
 8000796:	d8ea      	bhi.n	800076e <_Z9Practica2v+0x6a>
			USART1->TDR = str[x];
 8000798:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800079c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80007a0:	4413      	add	r3, r2
 80007a2:	f813 2c24 	ldrb.w	r2, [r3, #-36]
 80007a6:	4b1e      	ldr	r3, [pc, #120]	; (8000820 <_Z9Practica2v+0x11c>)
 80007a8:	629a      	str	r2, [r3, #40]	; 0x28

			bool byte_sent = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	74fb      	strb	r3, [r7, #19]

			do {
				byte_sent = ((USART1->ISR >> 7) & 0x01);
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <_Z9Practica2v+0x11c>)
 80007b0:	69db      	ldr	r3, [r3, #28]
 80007b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	bf14      	ite	ne
 80007ba:	2301      	movne	r3, #1
 80007bc:	2300      	moveq	r3, #0
 80007be:	74fb      	strb	r3, [r7, #19]
			} while (!byte_sent);
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d100      	bne.n	80007c8 <_Z9Practica2v+0xc4>
			do {
 80007c6:	e7f2      	b.n	80007ae <_Z9Practica2v+0xaa>
		for (uint8_t x = 0; x < 11; x++) {
 80007c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007cc:	3301      	adds	r3, #1
 80007ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007d2:	e7dd      	b.n	8000790 <_Z9Practica2v+0x8c>

// Ejercicio 2.5

// Configuramos los pines para salida

	timeStart = HAL_GetTick();
 80007d4:	f000 fbae 	bl	8000f34 <HAL_GetTick>
 80007d8:	6238      	str	r0, [r7, #32]

	while (true) {
		char *number;
		bool byte_received = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	77fb      	strb	r3, [r7, #31]

		do {
			byte_received = ((USART1->ISR >> 5) & 0x01);
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <_Z9Practica2v+0x11c>)
 80007e0:	69db      	ldr	r3, [r3, #28]
 80007e2:	f003 0320 	and.w	r3, r3, #32
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	bf14      	ite	ne
 80007ea:	2301      	movne	r3, #1
 80007ec:	2300      	moveq	r3, #0
 80007ee:	77fb      	strb	r3, [r7, #31]
		} while (!byte_received);
 80007f0:	7ffb      	ldrb	r3, [r7, #31]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d100      	bne.n	80007f8 <_Z9Practica2v+0xf4>
		do {
 80007f6:	e7f2      	b.n	80007de <_Z9Practica2v+0xda>

		*number = USART1->RDR;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <_Z9Practica2v+0x11c>)
 80007fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	69bb      	ldr	r3, [r7, #24]
 8000800:	701a      	strb	r2, [r3, #0]

		int number_int = atoi(number);
 8000802:	69b8      	ldr	r0, [r7, #24]
 8000804:	f004 fae6 	bl	8004dd4 <atoi>
 8000808:	6178      	str	r0, [r7, #20]

		change_led_state(number_int, 1);
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	b2db      	uxtb	r3, r3
 800080e:	2101      	movs	r1, #1
 8000810:	4618      	mov	r0, r3
 8000812:	f000 f80b 	bl	800082c <_Z16change_led_statehh>
	}
 8000816:	e7e0      	b.n	80007da <_Z9Practica2v+0xd6>
 8000818:	58024400 	.word	0x58024400
 800081c:	58020000 	.word	0x58020000
 8000820:	40011000 	.word	0x40011000
 8000824:	2000000d 	.word	0x2000000d
 8000828:	08004f74 	.word	0x08004f74

0800082c <_Z16change_led_statehh>:
	RCC->AHB4ENR |= GPIO_I_EN;

	GPIOI_MODER = GPIO_I_MODE_VAL;
}

void change_led_state(uint8_t pin, uint8_t mode) {
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	460a      	mov	r2, r1
 8000836:	71fb      	strb	r3, [r7, #7]
 8000838:	4613      	mov	r3, r2
 800083a:	71bb      	strb	r3, [r7, #6]
	uint8_t offset = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]

	switch (pin) {
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	3b01      	subs	r3, #1
 8000844:	2b03      	cmp	r3, #3
 8000846:	d817      	bhi.n	8000878 <_Z16change_led_statehh+0x4c>
 8000848:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <_Z16change_led_statehh+0x24>)
 800084a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084e:	bf00      	nop
 8000850:	08000861 	.word	0x08000861
 8000854:	08000867 	.word	0x08000867
 8000858:	0800086d 	.word	0x0800086d
 800085c:	08000873 	.word	0x08000873
		case 1: {
			offset = 15;
 8000860:	230f      	movs	r3, #15
 8000862:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000864:	e009      	b.n	800087a <_Z16change_led_statehh+0x4e>

		case 2: {
			offset = 14;
 8000866:	230e      	movs	r3, #14
 8000868:	73fb      	strb	r3, [r7, #15]
		}
		break;
 800086a:	e006      	b.n	800087a <_Z16change_led_statehh+0x4e>

		case 3: {
			offset = 13;
 800086c:	230d      	movs	r3, #13
 800086e:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000870:	e003      	b.n	800087a <_Z16change_led_statehh+0x4e>

		case 4: {
			offset = 12;
 8000872:	230c      	movs	r3, #12
 8000874:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8000876:	e000      	b.n	800087a <_Z16change_led_statehh+0x4e>

		default:
		break;
 8000878:	bf00      	nop
	}

	if (mode == 1)
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	2b01      	cmp	r3, #1
 800087e:	d10a      	bne.n	8000896 <_Z16change_led_statehh+0x6a>
		GPIOI->ODR |= (1 << offset);
 8000880:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <_Z16change_led_statehh+0x8c>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	7bfa      	ldrb	r2, [r7, #15]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	4611      	mov	r1, r2
 800088e:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <_Z16change_led_statehh+0x8c>)
 8000890:	430b      	orrs	r3, r1
 8000892:	6153      	str	r3, [r2, #20]
	else
		GPIOI->ODR &= ~(1 << offset);

}
 8000894:	e00a      	b.n	80008ac <_Z16change_led_statehh+0x80>
		GPIOI->ODR &= ~(1 << offset);
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <_Z16change_led_statehh+0x8c>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	7bfa      	ldrb	r2, [r7, #15]
 800089c:	2101      	movs	r1, #1
 800089e:	fa01 f202 	lsl.w	r2, r1, r2
 80008a2:	43d2      	mvns	r2, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <_Z16change_led_statehh+0x8c>)
 80008a8:	400b      	ands	r3, r1
 80008aa:	6153      	str	r3, [r2, #20]
}
 80008ac:	bf00      	nop
 80008ae:	3714      	adds	r7, #20
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	58022000 	.word	0x58022000

080008bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80008c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c6:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <main+0xb0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d006      	beq.n	80008e2 <main+0x26>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	dd01      	ble.n	80008e2 <main+0x26>
 80008de:	2301      	movs	r3, #1
 80008e0:	e000      	b.n	80008e4 <main+0x28>
 80008e2:	2300      	movs	r3, #0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d000      	beq.n	80008ea <main+0x2e>
 80008e8:	e7ee      	b.n	80008c8 <main+0xc>
		;
	if (timeout < 0) {
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	da01      	bge.n	80008f4 <main+0x38>
		Error_Handler();
 80008f0:	f000 f9c0 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80008f4:	f000 fa98 	bl	8000e28 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80008f8:	f000 f83a 	bl	8000970 <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80008fc:	f000 f8d6 	bl	8000aac <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000900:	4b1a      	ldr	r3, [pc, #104]	; (800096c <main+0xb0>)
 8000902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000906:	4a19      	ldr	r2, [pc, #100]	; (800096c <main+0xb0>)
 8000908:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000910:	4b16      	ldr	r3, [pc, #88]	; (800096c <main+0xb0>)
 8000912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800091e:	2000      	movs	r0, #0
 8000920:	f000 fdb4 	bl	800148c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000924:	2100      	movs	r1, #0
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fdca 	bl	80014c0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800092c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000930:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <main+0xb0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800093a:	2b00      	cmp	r3, #0
 800093c:	d106      	bne.n	800094c <main+0x90>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dd01      	ble.n	800094c <main+0x90>
 8000948:	2301      	movs	r3, #1
 800094a:	e000      	b.n	800094e <main+0x92>
 800094c:	2300      	movs	r3, #0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d000      	beq.n	8000954 <main+0x98>
 8000952:	e7ee      	b.n	8000932 <main+0x76>
		;
	if (timeout < 0) {
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	da01      	bge.n	800095e <main+0xa2>
		Error_Handler();
 800095a:	f000 f98b 	bl	8000c74 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800095e:	f000 f937 	bl	8000bd0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8000962:	f000 f8d5 	bl	8000b10 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	// ===== CORREGIDA =====
//	Practica1();
	// =====================
	Practica2();
 8000966:	f7ff fecd 	bl	8000704 <_Z9Practica2v>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800096a:	e7fe      	b.n	800096a <main+0xae>
 800096c:	58024400 	.word	0x58024400

08000970 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b09c      	sub	sp, #112	; 0x70
 8000974:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097a:	224c      	movs	r2, #76	; 0x4c
 800097c:	2100      	movs	r1, #0
 800097e:	4618      	mov	r0, r3
 8000980:	f004 fa56 	bl	8004e30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2220      	movs	r2, #32
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fa50 	bl	8004e30 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000990:	2004      	movs	r0, #4
 8000992:	f000 fda9 	bl	80014e8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000996:	2300      	movs	r3, #0
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <_Z18SystemClock_Configv+0x130>)
 800099c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800099e:	4a40      	ldr	r2, [pc, #256]	; (8000aa0 <_Z18SystemClock_Configv+0x130>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80009a6:	4b3e      	ldr	r3, [pc, #248]	; (8000aa0 <_Z18SystemClock_Configv+0x130>)
 80009a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	603b      	str	r3, [r7, #0]
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <_Z18SystemClock_Configv+0x134>)
 80009b2:	699b      	ldr	r3, [r3, #24]
 80009b4:	4a3b      	ldr	r2, [pc, #236]	; (8000aa4 <_Z18SystemClock_Configv+0x134>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6193      	str	r3, [r2, #24]
 80009bc:	4b39      	ldr	r3, [pc, #228]	; (8000aa4 <_Z18SystemClock_Configv+0x134>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80009c8:	4b36      	ldr	r3, [pc, #216]	; (8000aa4 <_Z18SystemClock_Configv+0x134>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009d4:	bf14      	ite	ne
 80009d6:	2301      	movne	r3, #1
 80009d8:	2300      	moveq	r3, #0
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d000      	beq.n	80009e2 <_Z18SystemClock_Configv+0x72>
 80009e0:	e7f2      	b.n	80009c8 <_Z18SystemClock_Configv+0x58>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <_Z18SystemClock_Configv+0x138>)
 80009e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e6:	f023 0303 	bic.w	r3, r3, #3
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <_Z18SystemClock_Configv+0x138>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 80009f2:	230b      	movs	r3, #11
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009fa:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009fc:	2301      	movs	r3, #1
 80009fe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000a10:	2305      	movs	r3, #5
 8000a12:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 8000a14:	2330      	movs	r3, #48	; 0x30
 8000a16:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000a1c:	2305      	movs	r3, #5
 8000a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a24:	2308      	movs	r3, #8
 8000a26:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fdb1 	bl	800159c <HAL_RCC_OscConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	bf14      	ite	ne
 8000a40:	2301      	movne	r3, #1
 8000a42:	2300      	moveq	r3, #0
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <_Z18SystemClock_Configv+0xde>
		Error_Handler();
 8000a4a:	f000 f913 	bl	8000c74 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000a4e:	233f      	movs	r3, #63	; 0x3f
 8000a50:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f001 f9be 	bl	8001df4 <HAL_RCC_ClockConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bf14      	ite	ne
 8000a7e:	2301      	movne	r3, #1
 8000a80:	2300      	moveq	r3, #0
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <_Z18SystemClock_Configv+0x11c>
		Error_Handler();
 8000a88:	f000 f8f4 	bl	8000c74 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a90:	2100      	movs	r1, #0
 8000a92:	2000      	movs	r0, #0
 8000a94:	f001 fb64 	bl	8002160 <HAL_RCC_MCOConfig>
}
 8000a98:	bf00      	nop
 8000a9a:	3770      	adds	r7, #112	; 0x70
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58000400 	.word	0x58000400
 8000aa4:	58024800 	.word	0x58024800
 8000aa8:	58024400 	.word	0x58024400

08000aac <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b0b0      	sub	sp, #192	; 0xc0
 8000ab0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	22c0      	movs	r2, #192	; 0xc0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f004 f9b9 	bl	8004e30 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000abe:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000ac2:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000ac8:	230c      	movs	r3, #12
 8000aca:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ad8:	23c0      	movs	r3, #192	; 0xc0
 8000ada:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000adc:	2320      	movs	r3, #32
 8000ade:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000aea:	463b      	mov	r3, r7
 8000aec:	4618      	mov	r0, r3
 8000aee:	f001 fd77 	bl	80025e0 <HAL_RCCEx_PeriphCLKConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	bf14      	ite	ne
 8000af8:	2301      	movne	r3, #1
 8000afa:	2300      	moveq	r3, #0
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <_Z24PeriphCommonClock_Configv+0x5a>
		Error_Handler();
 8000b02:	f000 f8b7 	bl	8000c74 <Error_Handler>
	}
}
 8000b06:	bf00      	nop
 8000b08:	37c0      	adds	r7, #192	; 0xc0
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000b18:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b29      	ldr	r3, [pc, #164]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b27      	ldr	r3, [pc, #156]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b26      	ldr	r3, [pc, #152]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b23      	ldr	r3, [pc, #140]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b21      	ldr	r3, [pc, #132]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b1d      	ldr	r3, [pc, #116]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b58:	481b      	ldr	r0, [pc, #108]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b5a:	f003 f8d3 	bl	8003d04 <HAL_UART_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	bf14      	ite	ne
 8000b64:	2301      	movne	r3, #1
 8000b66:	2300      	moveq	r3, #0
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 8000b6e:	f000 f881 	bl	8000c74 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b72:	2100      	movs	r1, #0
 8000b74:	4814      	ldr	r0, [pc, #80]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b76:	f004 f863 	bl	8004c40 <HAL_UARTEx_SetTxFifoThreshold>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	bf14      	ite	ne
 8000b80:	2301      	movne	r3, #1
 8000b82:	2300      	moveq	r3, #0
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 8000b8a:	f000 f873 	bl	8000c74 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b8e:	2100      	movs	r1, #0
 8000b90:	480d      	ldr	r0, [pc, #52]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b92:	f004 f893 	bl	8004cbc <HAL_UARTEx_SetRxFifoThreshold>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bf14      	ite	ne
 8000b9c:	2301      	movne	r3, #1
 8000b9e:	2300      	moveq	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 8000ba6:	f000 f865 	bl	8000c74 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000baa:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000bac:	f004 f80f 	bl	8004bce <HAL_UARTEx_DisableFifoMode>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf14      	ite	ne
 8000bb6:	2301      	movne	r3, #1
 8000bb8:	2300      	moveq	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 8000bc0:	f000 f858 	bl	8000c74 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000090 	.word	0x24000090
 8000bcc:	40011000 	.word	0x40011000

08000bd0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	60da      	str	r2, [r3, #12]
 8000be4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000bee:	f043 0304 	orr.w	r3, r3, #4
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c22:	4b12      	ldr	r3, [pc, #72]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c28:	4a10      	ldr	r2, [pc, #64]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <_ZL12MX_GPIO_Initv+0x9c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c44:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <_ZL12MX_GPIO_Initv+0xa0>)
 8000c5e:	f000 fa65 	bl	800112c <HAL_GPIO_Init>

}
 8000c62:	bf00      	nop
 8000c64:	3720      	adds	r7, #32
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020000 	.word	0x58020000

08000c74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c78:	b672      	cpsid	i
}
 8000c7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c7c:	e7fe      	b.n	8000c7c <Error_Handler+0x8>
	...

08000c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c8c:	4a08      	ldr	r2, [pc, #32]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c8e:	f043 0302 	orr.w	r3, r3, #2
 8000c92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c96:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_MspInit+0x30>)
 8000c98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c9c:	f003 0302 	and.w	r3, r3, #2
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	58024400 	.word	0x58024400

08000cb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b0ba      	sub	sp, #232	; 0xe8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ccc:	f107 0314 	add.w	r3, r7, #20
 8000cd0:	22c0      	movs	r2, #192	; 0xc0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f004 f8ab 	bl	8004e30 <memset>
  if(huart->Instance==USART1)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a25      	ldr	r2, [pc, #148]	; (8000d74 <HAL_UART_MspInit+0xc0>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d142      	bne.n	8000d6a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f001 fc74 	bl	80025e0 <HAL_RCCEx_PeriphCLKConfig>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cfe:	f7ff ffb9 	bl	8000c74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d12:	4b19      	ldr	r3, [pc, #100]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d18:	f003 0310 	and.w	r3, r3, #16
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d26:	4a14      	ldr	r2, [pc, #80]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_UART_MspInit+0xc4>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000d3e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d58:	2307      	movs	r3, #7
 8000d5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_UART_MspInit+0xc8>)
 8000d66:	f000 f9e1 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	37e8      	adds	r7, #232	; 0xe8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40011000 	.word	0x40011000
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020000 	.word	0x58020000

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <NMI_Handler+0x4>

08000d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <MemManage_Handler+0x4>

08000d92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <BusFault_Handler+0x4>

08000d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <UsageFault_Handler+0x4>

08000d9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr

08000dac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dcc:	f000 f89e 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000dd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd8:	f7ff fbfa 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ddc:	480c      	ldr	r0, [pc, #48]	; (8000e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dde:	490d      	ldr	r1, [pc, #52]	; (8000e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de0:	4a0d      	ldr	r2, [pc, #52]	; (8000e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de4:	e002      	b.n	8000dec <LoopCopyDataInit>

08000de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dea:	3304      	adds	r3, #4

08000dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df0:	d3f9      	bcc.n	8000de6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df2:	4a0a      	ldr	r2, [pc, #40]	; (8000e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df4:	4c0a      	ldr	r4, [pc, #40]	; (8000e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df8:	e001      	b.n	8000dfe <LoopFillZerobss>

08000dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dfc:	3204      	adds	r2, #4

08000dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e00:	d3fb      	bcc.n	8000dfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e02:	f003 fff1 	bl	8004de8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e06:	f7ff fd59 	bl	80008bc <main>
  bx  lr
 8000e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e0c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e14:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000e18:	080050d0 	.word	0x080050d0
  ldr r2, =_sbss
 8000e1c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000e20:	24000124 	.word	0x24000124

08000e24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e24:	e7fe      	b.n	8000e24 <ADC3_IRQHandler>
	...

08000e28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2e:	2003      	movs	r0, #3
 8000e30:	f000 f94a 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e34:	f001 f9fe 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_Init+0x68>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	f003 030f 	and.w	r3, r3, #15
 8000e44:	4913      	ldr	r1, [pc, #76]	; (8000e94 <HAL_Init+0x6c>)
 8000e46:	5ccb      	ldrb	r3, [r1, r3]
 8000e48:	f003 031f 	and.w	r3, r3, #31
 8000e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e52:	4b0f      	ldr	r3, [pc, #60]	; (8000e90 <HAL_Init+0x68>)
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_Init+0x6c>)
 8000e5c:	5cd3      	ldrb	r3, [r2, r3]
 8000e5e:	f003 031f 	and.w	r3, r3, #31
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	fa22 f303 	lsr.w	r3, r2, r3
 8000e68:	4a0b      	ldr	r2, [pc, #44]	; (8000e98 <HAL_Init+0x70>)
 8000e6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e6c:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <HAL_Init+0x74>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f814 	bl	8000ea0 <HAL_InitTick>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e002      	b.n	8000e88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e82:	f7ff fefd 	bl	8000c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400
 8000e94:	08004f84 	.word	0x08004f84
 8000e98:	24000004 	.word	0x24000004
 8000e9c:	24000000 	.word	0x24000000

08000ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e021      	b.n	8000ef8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <HAL_InitTick+0x64>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f921 	bl	8001112 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f8f9 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <HAL_InitTick+0x68>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2400000c 	.word	0x2400000c
 8000f04:	24000000 	.word	0x24000000
 8000f08:	24000008 	.word	0x24000008

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2400000c 	.word	0x2400000c
 8000f30:	24000120 	.word	0x24000120

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	24000120 	.word	0x24000120

08000f4c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f50:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <HAL_GetREVID+0x14>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	0c1b      	lsrs	r3, r3, #16
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	5c001000 	.word	0x5c001000

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f8c:	4b06      	ldr	r3, [pc, #24]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f92:	4a04      	ldr	r2, [pc, #16]	; (8000fa4 <__NVIC_SetPriorityGrouping+0x40>)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	60d3      	str	r3, [r2, #12]
}
 8000f98:	bf00      	nop
 8000f9a:	3714      	adds	r7, #20
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	05fa0000 	.word	0x05fa0000

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	88fb      	ldrh	r3, [r7, #6]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff47 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010ec:	f7ff ff5e 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	68b9      	ldr	r1, [r7, #8]
 80010f6:	6978      	ldr	r0, [r7, #20]
 80010f8:	f7ff ff90 	bl	800101c <NVIC_EncodePriority>
 80010fc:	4602      	mov	r2, r0
 80010fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff5f 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110a:	bf00      	nop
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffb2 	bl	8001084 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	; 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800113a:	4b89      	ldr	r3, [pc, #548]	; (8001360 <HAL_GPIO_Init+0x234>)
 800113c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800113e:	e194      	b.n	800146a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	2101      	movs	r1, #1
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	2b00      	cmp	r3, #0
 8001154:	f000 8186 	beq.w	8001464 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	2b01      	cmp	r3, #1
 8001162:	d005      	beq.n	8001170 <HAL_GPIO_Init+0x44>
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d130      	bne.n	80011d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	2203      	movs	r2, #3
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4013      	ands	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	68da      	ldr	r2, [r3, #12]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011a6:	2201      	movs	r2, #1
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	091b      	lsrs	r3, r3, #4
 80011bc:	f003 0201 	and.w	r2, r3, #1
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0303 	and.w	r3, r3, #3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d017      	beq.n	800120e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	2203      	movs	r2, #3
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d123      	bne.n	8001262 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	08da      	lsrs	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	3208      	adds	r2, #8
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	69b9      	ldr	r1, [r7, #24]
 800125e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	2203      	movs	r2, #3
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f003 0203 	and.w	r2, r3, #3
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	f000 80e0 	beq.w	8001464 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012aa:	4a2e      	ldr	r2, [pc, #184]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <HAL_GPIO_Init+0x238>)
 80012b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c2:	4a29      	ldr	r2, [pc, #164]	; (8001368 <HAL_GPIO_Init+0x23c>)
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	220f      	movs	r2, #15
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a20      	ldr	r2, [pc, #128]	; (800136c <HAL_GPIO_Init+0x240>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d052      	beq.n	8001394 <HAL_GPIO_Init+0x268>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_GPIO_Init+0x244>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d031      	beq.n	800135a <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1e      	ldr	r2, [pc, #120]	; (8001374 <HAL_GPIO_Init+0x248>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x22a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x24c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a1c      	ldr	r2, [pc, #112]	; (800137c <HAL_GPIO_Init+0x250>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_GPIO_Init+0x254>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a1a      	ldr	r2, [pc, #104]	; (8001384 <HAL_GPIO_Init+0x258>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x21a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a19      	ldr	r2, [pc, #100]	; (8001388 <HAL_GPIO_Init+0x25c>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x216>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a18      	ldr	r2, [pc, #96]	; (800138c <HAL_GPIO_Init+0x260>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x212>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a17      	ldr	r2, [pc, #92]	; (8001390 <HAL_GPIO_Init+0x264>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20e>
 8001336:	2309      	movs	r3, #9
 8001338:	e02d      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800133a:	230a      	movs	r3, #10
 800133c:	e02b      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800133e:	2308      	movs	r3, #8
 8001340:	e029      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001342:	2307      	movs	r3, #7
 8001344:	e027      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001346:	2306      	movs	r3, #6
 8001348:	e025      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800134a:	2305      	movs	r3, #5
 800134c:	e023      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800134e:	2304      	movs	r3, #4
 8001350:	e021      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001352:	2303      	movs	r3, #3
 8001354:	e01f      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 8001356:	2302      	movs	r3, #2
 8001358:	e01d      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800135a:	2301      	movs	r3, #1
 800135c:	e01b      	b.n	8001396 <HAL_GPIO_Init+0x26a>
 800135e:	bf00      	nop
 8001360:	58000080 	.word	0x58000080
 8001364:	58024400 	.word	0x58024400
 8001368:	58000400 	.word	0x58000400
 800136c:	58020000 	.word	0x58020000
 8001370:	58020400 	.word	0x58020400
 8001374:	58020800 	.word	0x58020800
 8001378:	58020c00 	.word	0x58020c00
 800137c:	58021000 	.word	0x58021000
 8001380:	58021400 	.word	0x58021400
 8001384:	58021800 	.word	0x58021800
 8001388:	58021c00 	.word	0x58021c00
 800138c:	58022000 	.word	0x58022000
 8001390:	58022400 	.word	0x58022400
 8001394:	2300      	movs	r3, #0
 8001396:	69fa      	ldr	r2, [r7, #28]
 8001398:	f002 0203 	and.w	r2, r2, #3
 800139c:	0092      	lsls	r2, r2, #2
 800139e:	4093      	lsls	r3, r2
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a6:	4938      	ldr	r1, [pc, #224]	; (8001488 <HAL_GPIO_Init+0x35c>)
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001408:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3301      	adds	r3, #1
 8001468:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa22 f303 	lsr.w	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f47f ae63 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 800147a:	bf00      	nop
 800147c:	bf00      	nop
 800147e:	3724      	adds	r7, #36	; 0x24
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	58000400 	.word	0x58000400

0800148c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001494:	4a08      	ldr	r2, [pc, #32]	; (80014b8 <HAL_HSEM_FastTake+0x2c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3320      	adds	r3, #32
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_HSEM_FastTake+0x30>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d101      	bne.n	80014a8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e000      	b.n	80014aa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	58026400 	.word	0x58026400
 80014bc:	80000300 	.word	0x80000300

080014c0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014ca:	4906      	ldr	r1, [pc, #24]	; (80014e4 <HAL_HSEM_Release+0x24>)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	58026400 	.word	0x58026400

080014e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014f0:	4b29      	ldr	r3, [pc, #164]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d00a      	beq.n	8001512 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014fc:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d001      	beq.n	800150e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e040      	b.n	8001590 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e03e      	b.n	8001590 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800151a:	491f      	ldr	r1, [pc, #124]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001522:	f7ff fd07 	bl	8000f34 <HAL_GetTick>
 8001526:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001528:	e009      	b.n	800153e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800152a:	f7ff fd03 	bl	8000f34 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001538:	d901      	bls.n	800153e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e028      	b.n	8001590 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800154a:	d1ee      	bne.n	800152a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b1e      	cmp	r3, #30
 8001550:	d008      	beq.n	8001564 <HAL_PWREx_ConfigSupply+0x7c>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b2e      	cmp	r3, #46	; 0x2e
 8001556:	d005      	beq.n	8001564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b1d      	cmp	r3, #29
 800155c:	d002      	beq.n	8001564 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b2d      	cmp	r3, #45	; 0x2d
 8001562:	d114      	bne.n	800158e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001564:	f7ff fce6 	bl	8000f34 <HAL_GetTick>
 8001568:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800156a:	e009      	b.n	8001580 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800156c:	f7ff fce2 	bl	8000f34 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800157a:	d901      	bls.n	8001580 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e007      	b.n	8001590 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_PWREx_ConfigSupply+0xb0>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800158c:	d1ee      	bne.n	800156c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58024800 	.word	0x58024800

0800159c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08c      	sub	sp, #48	; 0x30
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d102      	bne.n	80015b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	f000 bc1c 	b.w	8001de8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8087 	beq.w	80016cc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015be:	4b9e      	ldr	r3, [pc, #632]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015c8:	4b9b      	ldr	r3, [pc, #620]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d007      	beq.n	80015e4 <HAL_RCC_OscConfig+0x48>
 80015d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d6:	2b18      	cmp	r3, #24
 80015d8:	d110      	bne.n	80015fc <HAL_RCC_OscConfig+0x60>
 80015da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d10b      	bne.n	80015fc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e4:	4b94      	ldr	r3, [pc, #592]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d06c      	beq.n	80016ca <HAL_RCC_OscConfig+0x12e>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d168      	bne.n	80016ca <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e3f5      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001604:	d106      	bne.n	8001614 <HAL_RCC_OscConfig+0x78>
 8001606:	4b8c      	ldr	r3, [pc, #560]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800160c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001610:	6013      	str	r3, [r2, #0]
 8001612:	e02e      	b.n	8001672 <HAL_RCC_OscConfig+0xd6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x9a>
 800161c:	4b86      	ldr	r3, [pc, #536]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a85      	ldr	r2, [pc, #532]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b83      	ldr	r3, [pc, #524]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a82      	ldr	r2, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]
 8001634:	e01d      	b.n	8001672 <HAL_RCC_OscConfig+0xd6>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800163e:	d10c      	bne.n	800165a <HAL_RCC_OscConfig+0xbe>
 8001640:	4b7d      	ldr	r3, [pc, #500]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a7c      	ldr	r2, [pc, #496]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	4b7a      	ldr	r3, [pc, #488]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a79      	ldr	r2, [pc, #484]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e00b      	b.n	8001672 <HAL_RCC_OscConfig+0xd6>
 800165a:	4b77      	ldr	r3, [pc, #476]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a76      	ldr	r2, [pc, #472]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b74      	ldr	r3, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800166c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001670:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d013      	beq.n	80016a2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167a:	f7ff fc5b 	bl	8000f34 <HAL_GetTick>
 800167e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001682:	f7ff fc57 	bl	8000f34 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b64      	cmp	r3, #100	; 0x64
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e3a9      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001694:	4b68      	ldr	r3, [pc, #416]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0xe6>
 80016a0:	e014      	b.n	80016cc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a2:	f7ff fc47 	bl	8000f34 <HAL_GetTick>
 80016a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff fc43 	bl	8000f34 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b64      	cmp	r3, #100	; 0x64
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e395      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80016bc:	4b5e      	ldr	r3, [pc, #376]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x10e>
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ca:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80ca 	beq.w	800186e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016da:	4b57      	ldr	r3, [pc, #348]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016e2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016e4:	4b54      	ldr	r3, [pc, #336]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80016e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016e8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d007      	beq.n	8001700 <HAL_RCC_OscConfig+0x164>
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	2b18      	cmp	r3, #24
 80016f4:	d156      	bne.n	80017a4 <HAL_RCC_OscConfig+0x208>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d151      	bne.n	80017a4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	4b4d      	ldr	r3, [pc, #308]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d005      	beq.n	8001718 <HAL_RCC_OscConfig+0x17c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e367      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001718:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 0219 	bic.w	r2, r3, #25
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	4944      	ldr	r1, [pc, #272]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800172a:	f7ff fc03 	bl	8000f34 <HAL_GetTick>
 800172e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fbff 	bl	8000f34 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e351      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001744:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0304 	and.w	r3, r3, #4
 800174c:	2b00      	cmp	r3, #0
 800174e:	d0f0      	beq.n	8001732 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001750:	f7ff fbfc 	bl	8000f4c <HAL_GetREVID>
 8001754:	4603      	mov	r3, r0
 8001756:	f241 0203 	movw	r2, #4099	; 0x1003
 800175a:	4293      	cmp	r3, r2
 800175c:	d817      	bhi.n	800178e <HAL_RCC_OscConfig+0x1f2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	d108      	bne.n	8001778 <HAL_RCC_OscConfig+0x1dc>
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800176e:	4a32      	ldr	r2, [pc, #200]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001776:	e07a      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001778:	4b2f      	ldr	r3, [pc, #188]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	031b      	lsls	r3, r3, #12
 8001786:	492c      	ldr	r1, [pc, #176]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001788:	4313      	orrs	r3, r2
 800178a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178c:	e06f      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178e:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	061b      	lsls	r3, r3, #24
 800179c:	4926      	ldr	r1, [pc, #152]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800179e:	4313      	orrs	r3, r2
 80017a0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017a2:	e064      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d047      	beq.n	800183c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017ac:	4b22      	ldr	r3, [pc, #136]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f023 0219 	bic.w	r2, r3, #25
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	491f      	ldr	r1, [pc, #124]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fbb9 	bl	8000f34 <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fbb5 	bl	8000f34 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e307      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017d8:	4b17      	ldr	r3, [pc, #92]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	f7ff fbb2 	bl	8000f4c <HAL_GetREVID>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f241 0203 	movw	r2, #4099	; 0x1003
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d817      	bhi.n	8001822 <HAL_RCC_OscConfig+0x286>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	2b40      	cmp	r3, #64	; 0x40
 80017f8:	d108      	bne.n	800180c <HAL_RCC_OscConfig+0x270>
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001802:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6053      	str	r3, [r2, #4]
 800180a:	e030      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	691b      	ldr	r3, [r3, #16]
 8001818:	031b      	lsls	r3, r3, #12
 800181a:	4907      	ldr	r1, [pc, #28]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 800181c:	4313      	orrs	r3, r2
 800181e:	604b      	str	r3, [r1, #4]
 8001820:	e025      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	061b      	lsls	r3, r3, #24
 8001830:	4901      	ldr	r1, [pc, #4]	; (8001838 <HAL_RCC_OscConfig+0x29c>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
 8001836:	e01a      	b.n	800186e <HAL_RCC_OscConfig+0x2d2>
 8001838:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800183c:	4b9e      	ldr	r3, [pc, #632]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a9d      	ldr	r2, [pc, #628]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001842:	f023 0301 	bic.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fb74 	bl	8000f34 <HAL_GetTick>
 800184c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fb70 	bl	8000f34 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e2c2      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001862:	4b95      	ldr	r3, [pc, #596]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	f000 80a9 	beq.w	80019ce <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 800187e:	691b      	ldr	r3, [r3, #16]
 8001880:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001884:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001886:	4b8c      	ldr	r3, [pc, #560]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b08      	cmp	r3, #8
 8001890:	d007      	beq.n	80018a2 <HAL_RCC_OscConfig+0x306>
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	2b18      	cmp	r3, #24
 8001896:	d13a      	bne.n	800190e <HAL_RCC_OscConfig+0x372>
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f003 0303 	and.w	r3, r3, #3
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d135      	bne.n	800190e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018a2:	4b85      	ldr	r3, [pc, #532]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_RCC_OscConfig+0x31e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	2b80      	cmp	r3, #128	; 0x80
 80018b4:	d001      	beq.n	80018ba <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e296      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018ba:	f7ff fb47 	bl	8000f4c <HAL_GetREVID>
 80018be:	4603      	mov	r3, r0
 80018c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d817      	bhi.n	80018f8 <HAL_RCC_OscConfig+0x35c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d108      	bne.n	80018e2 <HAL_RCC_OscConfig+0x346>
 80018d0:	4b79      	ldr	r3, [pc, #484]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018d8:	4a77      	ldr	r2, [pc, #476]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018de:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018e0:	e075      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018e2:	4b75      	ldr	r3, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6a1b      	ldr	r3, [r3, #32]
 80018ee:	069b      	lsls	r3, r3, #26
 80018f0:	4971      	ldr	r1, [pc, #452]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018f6:	e06a      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a1b      	ldr	r3, [r3, #32]
 8001904:	061b      	lsls	r3, r3, #24
 8001906:	496c      	ldr	r1, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001908:	4313      	orrs	r3, r2
 800190a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800190c:	e05f      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69db      	ldr	r3, [r3, #28]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d042      	beq.n	800199c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 800191c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fb07 	bl	8000f34 <HAL_GetTick>
 8001926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800192a:	f7ff fb03 	bl	8000f34 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e255      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800193c:	4b5e      	ldr	r3, [pc, #376]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001948:	f7ff fb00 	bl	8000f4c <HAL_GetREVID>
 800194c:	4603      	mov	r3, r0
 800194e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001952:	4293      	cmp	r3, r2
 8001954:	d817      	bhi.n	8001986 <HAL_RCC_OscConfig+0x3ea>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a1b      	ldr	r3, [r3, #32]
 800195a:	2b20      	cmp	r3, #32
 800195c:	d108      	bne.n	8001970 <HAL_RCC_OscConfig+0x3d4>
 800195e:	4b56      	ldr	r3, [pc, #344]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001966:	4a54      	ldr	r2, [pc, #336]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800196c:	6053      	str	r3, [r2, #4]
 800196e:	e02e      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
 8001970:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	069b      	lsls	r3, r3, #26
 800197e:	494e      	ldr	r1, [pc, #312]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001980:	4313      	orrs	r3, r2
 8001982:	604b      	str	r3, [r1, #4]
 8001984:	e023      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
 8001986:	4b4c      	ldr	r3, [pc, #304]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a1b      	ldr	r3, [r3, #32]
 8001992:	061b      	lsls	r3, r3, #24
 8001994:	4948      	ldr	r1, [pc, #288]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001996:	4313      	orrs	r3, r2
 8001998:	60cb      	str	r3, [r1, #12]
 800199a:	e018      	b.n	80019ce <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800199c:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a45      	ldr	r2, [pc, #276]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80019a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a8:	f7ff fac4 	bl	8000f34 <HAL_GetTick>
 80019ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80019b0:	f7ff fac0 	bl	8000f34 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e212      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019c2:	4b3d      	ldr	r3, [pc, #244]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0308 	and.w	r3, r3, #8
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d036      	beq.n	8001a48 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d019      	beq.n	8001a16 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e2:	4b35      	ldr	r3, [pc, #212]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80019e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019e6:	4a34      	ldr	r2, [pc, #208]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff faa1 	bl	8000f34 <HAL_GetTick>
 80019f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff fa9d 	bl	8000f34 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1ef      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x45a>
 8001a14:	e018      	b.n	8001a48 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a1a:	4a27      	ldr	r2, [pc, #156]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a1c:	f023 0301 	bic.w	r3, r3, #1
 8001a20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a22:	f7ff fa87 	bl	8000f34 <HAL_GetTick>
 8001a26:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a2a:	f7ff fa83 	bl	8000f34 <HAL_GetTick>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e1d5      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a40:	f003 0302 	and.w	r3, r3, #2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d039      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d019      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a15      	ldr	r2, [pc, #84]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a68:	f7ff fa64 	bl	8000f34 <HAL_GetTick>
 8001a6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a70:	f7ff fa60 	bl	8000f34 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e1b2      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4d4>
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a08      	ldr	r2, [pc, #32]	; (8001ab8 <HAL_RCC_OscConfig+0x51c>)
 8001a96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff fa4a 	bl	8000f34 <HAL_GetTick>
 8001aa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001aa4:	f7ff fa46 	bl	8000f34 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d904      	bls.n	8001abc <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e198      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
 8001ab6:	bf00      	nop
 8001ab8:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001abc:	4ba3      	ldr	r3, [pc, #652]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1ed      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 8081 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ad6:	4b9e      	ldr	r3, [pc, #632]	; (8001d50 <HAL_RCC_OscConfig+0x7b4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a9d      	ldr	r2, [pc, #628]	; (8001d50 <HAL_RCC_OscConfig+0x7b4>)
 8001adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ae2:	f7ff fa27 	bl	8000f34 <HAL_GetTick>
 8001ae6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001aea:	f7ff fa23 	bl	8000f34 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	; 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e175      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001afc:	4b94      	ldr	r3, [pc, #592]	; (8001d50 <HAL_RCC_OscConfig+0x7b4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0f0      	beq.n	8001aea <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d106      	bne.n	8001b1e <HAL_RCC_OscConfig+0x582>
 8001b10:	4b8e      	ldr	r3, [pc, #568]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a8d      	ldr	r2, [pc, #564]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b16:	f043 0301 	orr.w	r3, r3, #1
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1c:	e02d      	b.n	8001b7a <HAL_RCC_OscConfig+0x5de>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10c      	bne.n	8001b40 <HAL_RCC_OscConfig+0x5a4>
 8001b26:	4b89      	ldr	r3, [pc, #548]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2a:	4a88      	ldr	r2, [pc, #544]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b2c:	f023 0301 	bic.w	r3, r3, #1
 8001b30:	6713      	str	r3, [r2, #112]	; 0x70
 8001b32:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	4a85      	ldr	r2, [pc, #532]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b3e:	e01c      	b.n	8001b7a <HAL_RCC_OscConfig+0x5de>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d10c      	bne.n	8001b62 <HAL_RCC_OscConfig+0x5c6>
 8001b48:	4b80      	ldr	r3, [pc, #512]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4c:	4a7f      	ldr	r2, [pc, #508]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b4e:	f043 0304 	orr.w	r3, r3, #4
 8001b52:	6713      	str	r3, [r2, #112]	; 0x70
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a7c      	ldr	r2, [pc, #496]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e00b      	b.n	8001b7a <HAL_RCC_OscConfig+0x5de>
 8001b62:	4b7a      	ldr	r3, [pc, #488]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b66:	4a79      	ldr	r2, [pc, #484]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b68:	f023 0301 	bic.w	r3, r3, #1
 8001b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b6e:	4b77      	ldr	r3, [pc, #476]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	4a76      	ldr	r2, [pc, #472]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001b74:	f023 0304 	bic.w	r3, r3, #4
 8001b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d015      	beq.n	8001bae <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b82:	f7ff f9d7 	bl	8000f34 <HAL_GetTick>
 8001b86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b88:	e00a      	b.n	8001ba0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f9d3 	bl	8000f34 <HAL_GetTick>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e123      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba0:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0ee      	beq.n	8001b8a <HAL_RCC_OscConfig+0x5ee>
 8001bac:	e014      	b.n	8001bd8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff f9c1 	bl	8000f34 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f9bd 	bl	8000f34 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e10d      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bcc:	4b5f      	ldr	r3, [pc, #380]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8102 	beq.w	8001de6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001be2:	4b5a      	ldr	r3, [pc, #360]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bea:	2b18      	cmp	r3, #24
 8001bec:	f000 80bd 	beq.w	8001d6a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	f040 8095 	bne.w	8001d24 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfa:	4b54      	ldr	r3, [pc, #336]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a53      	ldr	r2, [pc, #332]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c06:	f7ff f995 	bl	8000f34 <HAL_GetTick>
 8001c0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff f991 	bl	8000f34 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0e3      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c20:	4b4a      	ldr	r3, [pc, #296]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c30:	4b48      	ldr	r3, [pc, #288]	; (8001d54 <HAL_RCC_OscConfig+0x7b8>)
 8001c32:	4013      	ands	r3, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c3c:	0112      	lsls	r2, r2, #4
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	4942      	ldr	r1, [pc, #264]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	628b      	str	r3, [r1, #40]	; 0x28
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c54:	3b01      	subs	r3, #1
 8001c56:	025b      	lsls	r3, r3, #9
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c60:	3b01      	subs	r3, #1
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c68:	431a      	orrs	r2, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	061b      	lsls	r3, r3, #24
 8001c72:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c76:	4935      	ldr	r1, [pc, #212]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c7c:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	f023 0301 	bic.w	r3, r3, #1
 8001c86:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c88:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <HAL_RCC_OscConfig+0x7bc>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c94:	00d2      	lsls	r2, r2, #3
 8001c96:	492d      	ldr	r1, [pc, #180]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c9c:	4b2b      	ldr	r3, [pc, #172]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	f023 020c 	bic.w	r2, r3, #12
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	4928      	ldr	r1, [pc, #160]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001caa:	4313      	orrs	r3, r2
 8001cac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001cae:	4b27      	ldr	r3, [pc, #156]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb2:	f023 0202 	bic.w	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	4924      	ldr	r1, [pc, #144]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001cc0:	4b22      	ldr	r3, [pc, #136]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc4:	4a21      	ldr	r2, [pc, #132]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ccc:	4b1f      	ldr	r3, [pc, #124]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd0:	4a1e      	ldr	r2, [pc, #120]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cd8:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cdc:	4a1b      	ldr	r2, [pc, #108]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	4a18      	ldr	r2, [pc, #96]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf0:	4b16      	ldr	r3, [pc, #88]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a15      	ldr	r2, [pc, #84]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001cf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff f91a 	bl	8000f34 <HAL_GetTick>
 8001d00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d04:	f7ff f916 	bl	8000f34 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e068      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0f0      	beq.n	8001d04 <HAL_RCC_OscConfig+0x768>
 8001d22:	e060      	b.n	8001de6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d24:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_RCC_OscConfig+0x7b0>)
 8001d2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f900 	bl	8000f34 <HAL_GetTick>
 8001d34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d36:	e011      	b.n	8001d5c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d38:	f7ff f8fc 	bl	8000f34 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d90a      	bls.n	8001d5c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e04e      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58024800 	.word	0x58024800
 8001d54:	fffffc0c 	.word	0xfffffc0c
 8001d58:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d5c:	4b24      	ldr	r3, [pc, #144]	; (8001df0 <HAL_RCC_OscConfig+0x854>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d1e7      	bne.n	8001d38 <HAL_RCC_OscConfig+0x79c>
 8001d68:	e03d      	b.n	8001de6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_RCC_OscConfig+0x854>)
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d70:	4b1f      	ldr	r3, [pc, #124]	; (8001df0 <HAL_RCC_OscConfig+0x854>)
 8001d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d74:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d031      	beq.n	8001de2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d12a      	bne.n	8001de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	091b      	lsrs	r3, r3, #4
 8001d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d122      	bne.n	8001de2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d11a      	bne.n	8001de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d111      	bne.n	8001de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d108      	bne.n	8001de2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	0e1b      	lsrs	r3, r3, #24
 8001dd4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ddc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d001      	beq.n	8001de6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	58024400 	.word	0x58024400

08001df4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e19c      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e08:	4b8a      	ldr	r3, [pc, #552]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 030f 	and.w	r3, r3, #15
 8001e10:	683a      	ldr	r2, [r7, #0]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d910      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e16:	4b87      	ldr	r3, [pc, #540]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 020f 	bic.w	r2, r3, #15
 8001e1e:	4985      	ldr	r1, [pc, #532]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b83      	ldr	r3, [pc, #524]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e184      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	4b7b      	ldr	r3, [pc, #492]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	699b      	ldr	r3, [r3, #24]
 8001e4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d908      	bls.n	8001e66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e54:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	4975      	ldr	r1, [pc, #468]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d010      	beq.n	8001e94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	4b70      	ldr	r3, [pc, #448]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d908      	bls.n	8001e94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e82:	4b6d      	ldr	r3, [pc, #436]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	496a      	ldr	r1, [pc, #424]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d010      	beq.n	8001ec2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699a      	ldr	r2, [r3, #24]
 8001ea4:	4b64      	ldr	r3, [pc, #400]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d908      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001eb0:	4b61      	ldr	r3, [pc, #388]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	495e      	ldr	r1, [pc, #376]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0320 	and.w	r3, r3, #32
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d010      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	69da      	ldr	r2, [r3, #28]
 8001ed2:	4b59      	ldr	r3, [pc, #356]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d908      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ede:	4b56      	ldr	r3, [pc, #344]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4953      	ldr	r1, [pc, #332]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d010      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68da      	ldr	r2, [r3, #12]
 8001f00:	4b4d      	ldr	r3, [pc, #308]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d908      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f023 020f 	bic.w	r2, r3, #15
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4947      	ldr	r1, [pc, #284]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d055      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	4940      	ldr	r1, [pc, #256]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d121      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0f6      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d107      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f5c:	4b36      	ldr	r3, [pc, #216]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d115      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ea      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d109      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0de      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f84:	4b2c      	ldr	r3, [pc, #176]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e0d6      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f94:	4b28      	ldr	r3, [pc, #160]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f023 0207 	bic.w	r2, r3, #7
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	4925      	ldr	r1, [pc, #148]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ffc5 	bl	8000f34 <HAL_GetTick>
 8001faa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7fe ffc1 	bl	8000f34 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e0be      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc4:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d1eb      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	490e      	ldr	r1, [pc, #56]	; (8002038 <HAL_RCC_ClockConfig+0x244>)
 8002000:	4313      	orrs	r3, r2
 8002002:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d214      	bcs.n	800203c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 020f 	bic.w	r2, r3, #15
 800201a:	4906      	ldr	r1, [pc, #24]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_RCC_ClockConfig+0x240>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e086      	b.n	8002142 <HAL_RCC_ClockConfig+0x34e>
 8002034:	52002000 	.word	0x52002000
 8002038:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d010      	beq.n	800206a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002054:	429a      	cmp	r2, r3
 8002056:	d208      	bcs.n	800206a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002058:	4b3c      	ldr	r3, [pc, #240]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	4939      	ldr	r1, [pc, #228]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 8002066:	4313      	orrs	r3, r2
 8002068:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695a      	ldr	r2, [r3, #20]
 800207a:	4b34      	ldr	r3, [pc, #208]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002082:	429a      	cmp	r2, r3
 8002084:	d208      	bcs.n	8002098 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002086:	4b31      	ldr	r3, [pc, #196]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	492e      	ldr	r1, [pc, #184]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 8002094:	4313      	orrs	r3, r2
 8002096:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	4b28      	ldr	r3, [pc, #160]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d208      	bcs.n	80020c6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020b4:	4b25      	ldr	r3, [pc, #148]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4922      	ldr	r1, [pc, #136]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0320 	and.w	r3, r3, #32
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69da      	ldr	r2, [r3, #28]
 80020d6:	4b1d      	ldr	r3, [pc, #116]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020de:	429a      	cmp	r2, r3
 80020e0:	d208      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	4917      	ldr	r1, [pc, #92]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020f4:	f000 f89e 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b14      	ldr	r3, [pc, #80]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 030f 	and.w	r3, r3, #15
 8002104:	4912      	ldr	r1, [pc, #72]	; (8002150 <HAL_RCC_ClockConfig+0x35c>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002112:	4b0e      	ldr	r3, [pc, #56]	; (800214c <HAL_RCC_ClockConfig+0x358>)
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_RCC_ClockConfig+0x35c>)
 800211c:	5cd3      	ldrb	r3, [r2, r3]
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <HAL_RCC_ClockConfig+0x360>)
 800212a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800212c:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_RCC_ClockConfig+0x364>)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002132:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_RCC_ClockConfig+0x368>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe feb2 	bl	8000ea0 <HAL_InitTick>
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002140:	7bfb      	ldrb	r3, [r7, #15]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	58024400 	.word	0x58024400
 8002150:	08004f84 	.word	0x08004f84
 8002154:	24000004 	.word	0x24000004
 8002158:	24000000 	.word	0x24000000
 800215c:	24000008 	.word	0x24000008

08002160 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	; 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12a      	bne.n	80021c8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002172:	4b2d      	ldr	r3, [pc, #180]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 8002174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002178:	4a2b      	ldr	r2, [pc, #172]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002182:	4b29      	ldr	r3, [pc, #164]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 8002184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
 800218e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002190:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002196:	2302      	movs	r3, #2
 8002198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	481f      	ldr	r0, [pc, #124]	; (800222c <HAL_RCC_MCOConfig+0xcc>)
 80021ae:	f7fe ffbd 	bl	800112c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80021ba:	68b9      	ldr	r1, [r7, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	430b      	orrs	r3, r1
 80021c0:	4919      	ldr	r1, [pc, #100]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80021c6:	e02a      	b.n	800221e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d8:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80021e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021f8:	2300      	movs	r3, #0
 80021fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	480b      	ldr	r0, [pc, #44]	; (8002230 <HAL_RCC_MCOConfig+0xd0>)
 8002204:	f7fe ff92 	bl	800112c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002208:	4b07      	ldr	r3, [pc, #28]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	01d9      	lsls	r1, r3, #7
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	430b      	orrs	r3, r1
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_MCOConfig+0xc8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	610b      	str	r3, [r1, #16]
}
 800221e:	bf00      	nop
 8002220:	3730      	adds	r7, #48	; 0x30
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	58024400 	.word	0x58024400
 800222c:	58020000 	.word	0x58020000
 8002230:	58020800 	.word	0x58020800

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	; 0x24
 8002238:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800223a:	4bb3      	ldr	r3, [pc, #716]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002242:	2b18      	cmp	r3, #24
 8002244:	f200 8155 	bhi.w	80024f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002248:	a201      	add	r2, pc, #4	; (adr r2, 8002250 <HAL_RCC_GetSysClockFreq+0x1c>)
 800224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224e:	bf00      	nop
 8002250:	080022b5 	.word	0x080022b5
 8002254:	080024f3 	.word	0x080024f3
 8002258:	080024f3 	.word	0x080024f3
 800225c:	080024f3 	.word	0x080024f3
 8002260:	080024f3 	.word	0x080024f3
 8002264:	080024f3 	.word	0x080024f3
 8002268:	080024f3 	.word	0x080024f3
 800226c:	080024f3 	.word	0x080024f3
 8002270:	080022db 	.word	0x080022db
 8002274:	080024f3 	.word	0x080024f3
 8002278:	080024f3 	.word	0x080024f3
 800227c:	080024f3 	.word	0x080024f3
 8002280:	080024f3 	.word	0x080024f3
 8002284:	080024f3 	.word	0x080024f3
 8002288:	080024f3 	.word	0x080024f3
 800228c:	080024f3 	.word	0x080024f3
 8002290:	080022e1 	.word	0x080022e1
 8002294:	080024f3 	.word	0x080024f3
 8002298:	080024f3 	.word	0x080024f3
 800229c:	080024f3 	.word	0x080024f3
 80022a0:	080024f3 	.word	0x080024f3
 80022a4:	080024f3 	.word	0x080024f3
 80022a8:	080024f3 	.word	0x080024f3
 80022ac:	080024f3 	.word	0x080024f3
 80022b0:	080022e7 	.word	0x080022e7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022b4:	4b94      	ldr	r3, [pc, #592]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0320 	and.w	r3, r3, #32
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d009      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022c0:	4b91      	ldr	r3, [pc, #580]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	08db      	lsrs	r3, r3, #3
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	4a90      	ldr	r2, [pc, #576]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
 80022d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022d2:	e111      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022d4:	4b8d      	ldr	r3, [pc, #564]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022d6:	61bb      	str	r3, [r7, #24]
    break;
 80022d8:	e10e      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022da:	4b8d      	ldr	r3, [pc, #564]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022dc:	61bb      	str	r3, [r7, #24]
    break;
 80022de:	e10b      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022e0:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022e2:	61bb      	str	r3, [r7, #24]
    break;
 80022e4:	e108      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022f0:	4b85      	ldr	r3, [pc, #532]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f4:	091b      	lsrs	r3, r3, #4
 80022f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022fa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022fc:	4b82      	ldr	r3, [pc, #520]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	f003 0301 	and.w	r3, r3, #1
 8002304:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002306:	4b80      	ldr	r3, [pc, #512]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80e1 	beq.w	80024ec <HAL_RCC_GetSysClockFreq+0x2b8>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f000 8083 	beq.w	8002438 <HAL_RCC_GetSysClockFreq+0x204>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b02      	cmp	r3, #2
 8002336:	f200 80a1 	bhi.w	800247c <HAL_RCC_GetSysClockFreq+0x248>
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x114>
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d056      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002346:	e099      	b.n	800247c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0320 	and.w	r3, r3, #32
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002354:	4b6c      	ldr	r3, [pc, #432]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	08db      	lsrs	r3, r3, #3
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	4a6b      	ldr	r2, [pc, #428]	; (800250c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	ee07 3a90 	vmov	s15, r3
 8002376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237e:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800238e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002392:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800239a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800239e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80023ae:	e087      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ba:	eddf 6a58 	vldr	s13, [pc, #352]	; 800251c <HAL_RCC_GetSysClockFreq+0x2e8>
 80023be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023c2:	4b51      	ldr	r3, [pc, #324]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ca:	ee07 3a90 	vmov	s15, r3
 80023ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023f2:	e065      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023fe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002406:	4b40      	ldr	r3, [pc, #256]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800240e:	ee07 3a90 	vmov	s15, r3
 8002412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002416:	ed97 6a02 	vldr	s12, [r7, #8]
 800241a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 800241e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800242a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800242e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002436:	e043      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	ee07 3a90 	vmov	s15, r3
 800243e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002442:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002524 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800244a:	4b2f      	ldr	r3, [pc, #188]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800245a:	ed97 6a02 	vldr	s12, [r7, #8]
 800245e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800246a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800246e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800247a:	e021      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002486:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002520 <HAL_RCC_GetSysClockFreq+0x2ec>
 800248a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800248e:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002496:	ee07 3a90 	vmov	s15, r3
 800249a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800249e:	ed97 6a02 	vldr	s12, [r7, #8]
 80024a2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002518 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80024be:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c4:	0a5b      	lsrs	r3, r3, #9
 80024c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ca:	3301      	adds	r3, #1
 80024cc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	ee07 3a90 	vmov	s15, r3
 80024d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e4:	ee17 3a90 	vmov	r3, s15
 80024e8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024ea:	e005      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
    break;
 80024f0:	e002      	b.n	80024f8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024f4:	61bb      	str	r3, [r7, #24]
    break;
 80024f6:	bf00      	nop
  }

  return sysclockfreq;
 80024f8:	69bb      	ldr	r3, [r7, #24]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	58024400 	.word	0x58024400
 800250c:	03d09000 	.word	0x03d09000
 8002510:	003d0900 	.word	0x003d0900
 8002514:	017d7840 	.word	0x017d7840
 8002518:	46000000 	.word	0x46000000
 800251c:	4c742400 	.word	0x4c742400
 8002520:	4a742400 	.word	0x4a742400
 8002524:	4bbebc20 	.word	0x4bbebc20

08002528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800252e:	f7ff fe81 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 8002532:	4602      	mov	r2, r0
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <HAL_RCC_GetHCLKFreq+0x50>)
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	490f      	ldr	r1, [pc, #60]	; (800257c <HAL_RCC_GetHCLKFreq+0x54>)
 8002540:	5ccb      	ldrb	r3, [r1, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	fa22 f303 	lsr.w	r3, r2, r3
 800254a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_GetHCLKFreq+0x50>)
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_RCC_GetHCLKFreq+0x54>)
 8002556:	5cd3      	ldrb	r3, [r2, r3]
 8002558:	f003 031f 	and.w	r3, r3, #31
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_RCC_GetHCLKFreq+0x58>)
 8002564:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002566:	4a07      	ldr	r2, [pc, #28]	; (8002584 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <HAL_RCC_GetHCLKFreq+0x58>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	58024400 	.word	0x58024400
 800257c:	08004f84 	.word	0x08004f84
 8002580:	24000004 	.word	0x24000004
 8002584:	24000000 	.word	0x24000000

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800258c:	f7ff ffcc 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	091b      	lsrs	r3, r3, #4
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	; (80025b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	58024400 	.word	0x58024400
 80025b0:	08004f84 	.word	0x08004f84

080025b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025b8:	f7ff ffb6 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	0a1b      	lsrs	r3, r3, #8
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	58024400 	.word	0x58024400
 80025dc:	08004f84 	.word	0x08004f84

080025e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ec:	2300      	movs	r3, #0
 80025ee:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d03f      	beq.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002600:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002604:	d02a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002606:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800260a:	d824      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800260c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002610:	d018      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002612:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002616:	d81e      	bhi.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002618:	2b00      	cmp	r3, #0
 800261a:	d003      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800261c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002620:	d007      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002622:	e018      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002624:	4bab      	ldr	r3, [pc, #684]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	4aaa      	ldr	r2, [pc, #680]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800262a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002630:	e015      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3304      	adds	r3, #4
 8002636:	2102      	movs	r1, #2
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f9ff 	bl	8003a3c <RCCEx_PLL2_Config>
 800263e:	4603      	mov	r3, r0
 8002640:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002642:	e00c      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3324      	adds	r3, #36	; 0x24
 8002648:	2102      	movs	r1, #2
 800264a:	4618      	mov	r0, r3
 800264c:	f001 faa8 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002654:	e003      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	75fb      	strb	r3, [r7, #23]
      break;
 800265a:	e000      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800265c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800265e:	7dfb      	ldrb	r3, [r7, #23]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d109      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002664:	4b9b      	ldr	r3, [pc, #620]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002670:	4998      	ldr	r1, [pc, #608]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002672:	4313      	orrs	r3, r2
 8002674:	650b      	str	r3, [r1, #80]	; 0x50
 8002676:	e001      	b.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002678:	7dfb      	ldrb	r3, [r7, #23]
 800267a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d03d      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268c:	2b04      	cmp	r3, #4
 800268e:	d826      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002690:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002696:	bf00      	nop
 8002698:	080026ad 	.word	0x080026ad
 800269c:	080026bb 	.word	0x080026bb
 80026a0:	080026cd 	.word	0x080026cd
 80026a4:	080026e5 	.word	0x080026e5
 80026a8:	080026e5 	.word	0x080026e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026ac:	4b89      	ldr	r3, [pc, #548]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	4a88      	ldr	r2, [pc, #544]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026b8:	e015      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 f9bb 	bl	8003a3c <RCCEx_PLL2_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026ca:	e00c      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3324      	adds	r3, #36	; 0x24
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f001 fa64 	bl	8003ba0 <RCCEx_PLL3_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	75fb      	strb	r3, [r7, #23]
      break;
 80026e2:	e000      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f0:	f023 0207 	bic.w	r2, r3, #7
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4976      	ldr	r1, [pc, #472]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	650b      	str	r3, [r1, #80]	; 0x50
 80026fe:	e001      	b.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d042      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002718:	d02b      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800271a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271e:	d825      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002720:	2bc0      	cmp	r3, #192	; 0xc0
 8002722:	d028      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002724:	2bc0      	cmp	r3, #192	; 0xc0
 8002726:	d821      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d016      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800272c:	2b80      	cmp	r3, #128	; 0x80
 800272e:	d81d      	bhi.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002730:	2b00      	cmp	r3, #0
 8002732:	d002      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002734:	2b40      	cmp	r3, #64	; 0x40
 8002736:	d007      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002738:	e018      	b.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273a:	4b66      	ldr	r3, [pc, #408]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800273c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273e:	4a65      	ldr	r2, [pc, #404]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002744:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002746:	e017      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	3304      	adds	r3, #4
 800274c:	2100      	movs	r1, #0
 800274e:	4618      	mov	r0, r3
 8002750:	f001 f974 	bl	8003a3c <RCCEx_PLL2_Config>
 8002754:	4603      	mov	r3, r0
 8002756:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002758:	e00e      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3324      	adds	r3, #36	; 0x24
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fa1d 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800276a:	e005      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	75fb      	strb	r3, [r7, #23]
      break;
 8002770:	e002      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002772:	bf00      	nop
 8002774:	e000      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002776:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800277e:	4b55      	ldr	r3, [pc, #340]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	4952      	ldr	r1, [pc, #328]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	650b      	str	r3, [r1, #80]	; 0x50
 8002790:	e001      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
 8002794:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d049      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80027a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027ac:	d030      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80027ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027b2:	d82a      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027b4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027b8:	d02c      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80027ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80027be:	d824      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027c4:	d018      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80027c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ca:	d81e      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d003      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80027d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027d4:	d007      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80027d6:	e018      	b.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d8:	4b3e      	ldr	r3, [pc, #248]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	4a3d      	ldr	r2, [pc, #244]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e4:	e017      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3304      	adds	r3, #4
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f925 	bl	8003a3c <RCCEx_PLL2_Config>
 80027f2:	4603      	mov	r3, r0
 80027f4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80027f6:	e00e      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	3324      	adds	r3, #36	; 0x24
 80027fc:	2100      	movs	r1, #0
 80027fe:	4618      	mov	r0, r3
 8002800:	f001 f9ce 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002804:	4603      	mov	r3, r0
 8002806:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002808:	e005      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002810:	bf00      	nop
 8002812:	e000      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002814:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002816:	7dfb      	ldrb	r3, [r7, #23]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10a      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800281c:	4b2d      	ldr	r3, [pc, #180]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002820:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800282a:	492a      	ldr	r1, [pc, #168]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800282c:	4313      	orrs	r3, r2
 800282e:	658b      	str	r3, [r1, #88]	; 0x58
 8002830:	e001      	b.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002832:	7dfb      	ldrb	r3, [r7, #23]
 8002834:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800283e:	2b00      	cmp	r3, #0
 8002840:	d04c      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002848:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800284c:	d030      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800284e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002852:	d82a      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002854:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002858:	d02c      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800285a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800285e:	d824      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002860:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002864:	d018      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286a:	d81e      	bhi.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002874:	d007      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002876:	e018      	b.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002878:	4b16      	ldr	r3, [pc, #88]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	4a15      	ldr	r2, [pc, #84]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800287e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002882:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002884:	e017      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3304      	adds	r3, #4
 800288a:	2100      	movs	r1, #0
 800288c:	4618      	mov	r0, r3
 800288e:	f001 f8d5 	bl	8003a3c <RCCEx_PLL2_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002896:	e00e      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3324      	adds	r3, #36	; 0x24
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 f97e 	bl	8003ba0 <RCCEx_PLL3_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80028a8:	e005      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	75fb      	strb	r3, [r7, #23]
      break;
 80028ae:	e002      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80028b0:	bf00      	nop
 80028b2:	e000      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80028b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b6:	7dfb      	ldrb	r3, [r7, #23]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80028bc:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028ca:	4902      	ldr	r1, [pc, #8]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	658b      	str	r3, [r1, #88]	; 0x58
 80028d0:	e004      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d032      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d01c      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028f0:	2b30      	cmp	r3, #48	; 0x30
 80028f2:	d817      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d00c      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d813      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d016      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002900:	2b10      	cmp	r3, #16
 8002902:	d10f      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002904:	4bb1      	ldr	r3, [pc, #708]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002908:	4ab0      	ldr	r2, [pc, #704]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002910:	e00e      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	2102      	movs	r1, #2
 8002918:	4618      	mov	r0, r3
 800291a:	f001 f88f 	bl	8003a3c <RCCEx_PLL2_Config>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002922:	e005      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	75fb      	strb	r3, [r7, #23]
      break;
 8002928:	e002      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800292e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d109      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002936:	4ba5      	ldr	r3, [pc, #660]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002942:	49a2      	ldr	r1, [pc, #648]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002944:	4313      	orrs	r3, r2
 8002946:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002948:	e001      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294a:	7dfb      	ldrb	r3, [r7, #23]
 800294c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d047      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002962:	d030      	beq.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002968:	d82a      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800296a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800296e:	d02c      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002974:	d824      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800297a:	d018      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002980:	d81e      	bhi.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d007      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800298c:	e018      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800298e:	4b8f      	ldr	r3, [pc, #572]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002992:	4a8e      	ldr	r2, [pc, #568]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800299a:	e017      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 f84a 	bl	8003a3c <RCCEx_PLL2_Config>
 80029a8:	4603      	mov	r3, r0
 80029aa:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029ac:	e00e      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	3324      	adds	r3, #36	; 0x24
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f001 f8f3 	bl	8003ba0 <RCCEx_PLL3_Config>
 80029ba:	4603      	mov	r3, r0
 80029bc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80029be:	e005      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
      break;
 80029c4:	e002      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80029ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029d2:	4b7e      	ldr	r3, [pc, #504]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029de:	497b      	ldr	r1, [pc, #492]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	650b      	str	r3, [r1, #80]	; 0x50
 80029e4:	e001      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e6:	7dfb      	ldrb	r3, [r7, #23]
 80029e8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d049      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029fe:	d02e      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a04:	d828      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a0a:	d02a      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a10:	d822      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a16:	d026      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002a1c:	d81c      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a22:	d010      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a28:	d816      	bhi.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01d      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a32:	d111      	bne.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3304      	adds	r3, #4
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f000 fffe 	bl	8003a3c <RCCEx_PLL2_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a44:	e012      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3324      	adds	r3, #36	; 0x24
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f001 f8a7 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a56:	e009      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e004      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a62:	bf00      	nop
 8002a64:	e002      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a66:	bf00      	nop
 8002a68:	e000      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a6c:	7dfb      	ldrb	r3, [r7, #23]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a72:	4b56      	ldr	r3, [pc, #344]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a7e:	4953      	ldr	r1, [pc, #332]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	650b      	str	r3, [r1, #80]	; 0x50
 8002a84:	e001      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a86:	7dfb      	ldrb	r3, [r7, #23]
 8002a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04b      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa0:	d02e      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa6:	d828      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aac:	d02a      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d822      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002ab8:	d026      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002abe:	d81c      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ac4:	d010      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aca:	d816      	bhi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d01d      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002ad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ad4:	d111      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	2101      	movs	r1, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 ffad 	bl	8003a3c <RCCEx_PLL2_Config>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ae6:	e012      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3324      	adds	r3, #36	; 0x24
 8002aec:	2101      	movs	r1, #1
 8002aee:	4618      	mov	r0, r3
 8002af0:	f001 f856 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002af8:	e009      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	75fb      	strb	r3, [r7, #23]
      break;
 8002afe:	e006      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b00:	bf00      	nop
 8002b02:	e004      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b04:	bf00      	nop
 8002b06:	e002      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002b0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b18:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b22:	492a      	ldr	r1, [pc, #168]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	658b      	str	r3, [r1, #88]	; 0x58
 8002b28:	e001      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d022      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002b42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b46:	d108      	bne.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 ff74 	bl	8003a3c <RCCEx_PLL2_Config>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002b58:	e003      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b5e:	e000      	b.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002b60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b62:	7dfb      	ldrb	r3, [r7, #23]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d109      	bne.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b68:	4b18      	ldr	r3, [pc, #96]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b74:	4915      	ldr	r1, [pc, #84]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b7a:	e001      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b7c:	7dfb      	ldrb	r3, [r7, #23]
 8002b7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d031      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b94:	d00e      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b9a:	d814      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d017      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002ba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ba4:	d10f      	bne.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bb2:	e00e      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 ff3e 	bl	8003a3c <RCCEx_PLL2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002bc4:	e005      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bca:	e002      	b.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002bcc:	58024400 	.word	0x58024400
      break;
 8002bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd2:	7dfb      	ldrb	r3, [r7, #23]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d109      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bd8:	4bbc      	ldr	r3, [pc, #752]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bdc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be4:	49b9      	ldr	r1, [pc, #740]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7dfb      	ldrb	r3, [r7, #23]
 8002bee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d032      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d81b      	bhi.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002c04:	a201      	add	r2, pc, #4	; (adr r2, 8002c0c <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0a:	bf00      	nop
 8002c0c:	08002c43 	.word	0x08002c43
 8002c10:	08002c1d 	.word	0x08002c1d
 8002c14:	08002c2b 	.word	0x08002c2b
 8002c18:	08002c43 	.word	0x08002c43
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c1c:	4bab      	ldr	r3, [pc, #684]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4aaa      	ldr	r2, [pc, #680]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c28:	e00c      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 ff03 	bl	8003a3c <RCCEx_PLL2_Config>
 8002c36:	4603      	mov	r3, r0
 8002c38:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c40:	e000      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002c42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c44:	7dfb      	ldrb	r3, [r7, #23]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c4a:	4ba0      	ldr	r3, [pc, #640]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4e:	f023 0203 	bic.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c56:	499d      	ldr	r1, [pc, #628]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c5c:	e001      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8086 	beq.w	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c70:	4b97      	ldr	r3, [pc, #604]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a96      	ldr	r2, [pc, #600]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c7c:	f7fe f95a 	bl	8000f34 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c82:	e009      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7fe f956 	bl	8000f34 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d902      	bls.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	75fb      	strb	r3, [r7, #23]
        break;
 8002c96:	e005      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c98:	4b8d      	ldr	r3, [pc, #564]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d166      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002caa:	4b88      	ldr	r3, [pc, #544]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d013      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbe:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cc8:	4b80      	ldr	r3, [pc, #512]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	4a7f      	ldr	r2, [pc, #508]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd4:	4b7d      	ldr	r3, [pc, #500]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a7c      	ldr	r2, [pc, #496]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ce0:	4a7a      	ldr	r2, [pc, #488]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf0:	d115      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf2:	f7fe f91f 	bl	8000f34 <HAL_GetTick>
 8002cf6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf8:	e00b      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cfa:	f7fe f91b 	bl	8000f34 <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d902      	bls.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	75fb      	strb	r3, [r7, #23]
            break;
 8002d10:	e005      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d12:	4b6e      	ldr	r3, [pc, #440]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ed      	beq.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d126      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d32:	d10d      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002d34:	4b65      	ldr	r3, [pc, #404]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d42:	0919      	lsrs	r1, r3, #4
 8002d44:	4b63      	ldr	r3, [pc, #396]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	4960      	ldr	r1, [pc, #384]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	610b      	str	r3, [r1, #16]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002d50:	4b5e      	ldr	r3, [pc, #376]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	4a5d      	ldr	r2, [pc, #372]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d56:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d5a:	6113      	str	r3, [r2, #16]
 8002d5c:	4b5b      	ldr	r3, [pc, #364]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d6a:	4958      	ldr	r1, [pc, #352]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	670b      	str	r3, [r1, #112]	; 0x70
 8002d70:	e004      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	75bb      	strb	r3, [r7, #22]
 8002d76:	e001      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d78:	7dfb      	ldrb	r3, [r7, #23]
 8002d7a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d07e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d8c:	2b28      	cmp	r3, #40	; 0x28
 8002d8e:	d867      	bhi.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002e67 	.word	0x08002e67
 8002d9c:	08002e61 	.word	0x08002e61
 8002da0:	08002e61 	.word	0x08002e61
 8002da4:	08002e61 	.word	0x08002e61
 8002da8:	08002e61 	.word	0x08002e61
 8002dac:	08002e61 	.word	0x08002e61
 8002db0:	08002e61 	.word	0x08002e61
 8002db4:	08002e61 	.word	0x08002e61
 8002db8:	08002e3d 	.word	0x08002e3d
 8002dbc:	08002e61 	.word	0x08002e61
 8002dc0:	08002e61 	.word	0x08002e61
 8002dc4:	08002e61 	.word	0x08002e61
 8002dc8:	08002e61 	.word	0x08002e61
 8002dcc:	08002e61 	.word	0x08002e61
 8002dd0:	08002e61 	.word	0x08002e61
 8002dd4:	08002e61 	.word	0x08002e61
 8002dd8:	08002e4f 	.word	0x08002e4f
 8002ddc:	08002e61 	.word	0x08002e61
 8002de0:	08002e61 	.word	0x08002e61
 8002de4:	08002e61 	.word	0x08002e61
 8002de8:	08002e61 	.word	0x08002e61
 8002dec:	08002e61 	.word	0x08002e61
 8002df0:	08002e61 	.word	0x08002e61
 8002df4:	08002e61 	.word	0x08002e61
 8002df8:	08002e67 	.word	0x08002e67
 8002dfc:	08002e61 	.word	0x08002e61
 8002e00:	08002e61 	.word	0x08002e61
 8002e04:	08002e61 	.word	0x08002e61
 8002e08:	08002e61 	.word	0x08002e61
 8002e0c:	08002e61 	.word	0x08002e61
 8002e10:	08002e61 	.word	0x08002e61
 8002e14:	08002e61 	.word	0x08002e61
 8002e18:	08002e67 	.word	0x08002e67
 8002e1c:	08002e61 	.word	0x08002e61
 8002e20:	08002e61 	.word	0x08002e61
 8002e24:	08002e61 	.word	0x08002e61
 8002e28:	08002e61 	.word	0x08002e61
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002e61 	.word	0x08002e61
 8002e34:	08002e61 	.word	0x08002e61
 8002e38:	08002e67 	.word	0x08002e67
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	2101      	movs	r1, #1
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fdfa 	bl	8003a3c <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e4c:	e00c      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3324      	adds	r3, #36	; 0x24
 8002e52:	2101      	movs	r1, #1
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fea3 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e5e:	e003      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	75fb      	strb	r3, [r7, #23]
      break;
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e68:	7dfb      	ldrb	r3, [r7, #23]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d109      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e72:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e7a:	4914      	ldr	r1, [pc, #80]	; (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e80:	e001      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e82:	7dfb      	ldrb	r3, [r7, #23]
 8002e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d03e      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e96:	2b05      	cmp	r3, #5
 8002e98:	d827      	bhi.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002e9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ef1 	.word	0x08002ef1
 8002ea4:	08002eb9 	.word	0x08002eb9
 8002ea8:	08002ed9 	.word	0x08002ed9
 8002eac:	08002ef1 	.word	0x08002ef1
 8002eb0:	08002ef1 	.word	0x08002ef1
 8002eb4:	08002ef1 	.word	0x08002ef1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3304      	adds	r3, #4
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fdbc 	bl	8003a3c <RCCEx_PLL2_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e013      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002eca:	bf00      	nop
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	58024800 	.word	0x58024800
 8002ed4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3324      	adds	r3, #36	; 0x24
 8002edc:	2101      	movs	r1, #1
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fe5e 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ee8:	e003      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	75fb      	strb	r3, [r7, #23]
      break;
 8002eee:	e000      	b.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d109      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ef8:	4b9f      	ldr	r3, [pc, #636]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efc:	f023 0207 	bic.w	r2, r3, #7
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f04:	499c      	ldr	r1, [pc, #624]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	654b      	str	r3, [r1, #84]	; 0x54
 8002f0a:	e001      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d039      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	2b05      	cmp	r3, #5
 8002f24:	d820      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f26:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2c:	08002f6f 	.word	0x08002f6f
 8002f30:	08002f45 	.word	0x08002f45
 8002f34:	08002f57 	.word	0x08002f57
 8002f38:	08002f6f 	.word	0x08002f6f
 8002f3c:	08002f6f 	.word	0x08002f6f
 8002f40:	08002f6f 	.word	0x08002f6f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	2101      	movs	r1, #1
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fd76 	bl	8003a3c <RCCEx_PLL2_Config>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f54:	e00c      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	3324      	adds	r3, #36	; 0x24
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 fe1f 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f66:	e003      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f6c:	e000      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002f6e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f76:	4b80      	ldr	r3, [pc, #512]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	f023 0207 	bic.w	r2, r3, #7
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f84:	497c      	ldr	r1, [pc, #496]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	658b      	str	r3, [r1, #88]	; 0x58
 8002f8a:	e001      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
 8002f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04b      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa6:	d02e      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002fa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fac:	d828      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d02a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb8:	d822      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fbe:	d026      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002fc0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fc4:	d81c      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fca:	d010      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fd0:	d816      	bhi.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01d      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002fd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fda:	d111      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 fd2a 	bl	8003a3c <RCCEx_PLL2_Config>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fec:	e012      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3324      	adds	r3, #36	; 0x24
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 fdd3 	bl	8003ba0 <RCCEx_PLL3_Config>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002ffe:	e009      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	75fb      	strb	r3, [r7, #23]
      break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003006:	bf00      	nop
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800300a:	bf00      	nop
 800300c:	e002      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800300e:	bf00      	nop
 8003010:	e000      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800301a:	4b57      	ldr	r3, [pc, #348]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800301c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	4953      	ldr	r1, [pc, #332]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800302a:	4313      	orrs	r3, r2
 800302c:	654b      	str	r3, [r1, #84]	; 0x54
 800302e:	e001      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d04b      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003046:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800304a:	d02e      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800304c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003050:	d828      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003056:	d02a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003058:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800305c:	d822      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800305e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003062:	d026      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003068:	d81c      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800306a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800306e:	d010      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003074:	d816      	bhi.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01d      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800307a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800307e:	d111      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3304      	adds	r3, #4
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fcd8 	bl	8003a3c <RCCEx_PLL2_Config>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003090:	e012      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3324      	adds	r3, #36	; 0x24
 8003096:	2102      	movs	r1, #2
 8003098:	4618      	mov	r0, r3
 800309a:	f000 fd81 	bl	8003ba0 <RCCEx_PLL3_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80030a2:	e009      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75fb      	strb	r3, [r7, #23]
      break;
 80030a8:	e006      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80030aa:	bf00      	nop
 80030ac:	e004      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80030ae:	bf00      	nop
 80030b0:	e002      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80030b2:	bf00      	nop
 80030b4:	e000      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80030b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b8:	7dfb      	ldrb	r3, [r7, #23]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80030be:	4b2e      	ldr	r3, [pc, #184]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030cc:	492a      	ldr	r1, [pc, #168]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	658b      	str	r3, [r1, #88]	; 0x58
 80030d2:	e001      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030d4:	7dfb      	ldrb	r3, [r7, #23]
 80030d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d04d      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ee:	d02e      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80030f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030f4:	d828      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030fa:	d02a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80030fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003100:	d822      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003102:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003106:	d026      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003108:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800310c:	d81c      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800310e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003112:	d010      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 8003114:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003118:	d816      	bhi.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	d111      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3304      	adds	r3, #4
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f000 fc86 	bl	8003a3c <RCCEx_PLL2_Config>
 8003130:	4603      	mov	r3, r0
 8003132:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003134:	e012      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3324      	adds	r3, #36	; 0x24
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f000 fd2f 	bl	8003ba0 <RCCEx_PLL3_Config>
 8003142:	4603      	mov	r3, r0
 8003144:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003146:	e009      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	75fb      	strb	r3, [r7, #23]
      break;
 800314c:	e006      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800314e:	bf00      	nop
 8003150:	e004      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003152:	bf00      	nop
 8003154:	e002      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003156:	bf00      	nop
 8003158:	e000      	b.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800315a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10c      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003162:	4b05      	ldr	r3, [pc, #20]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003166:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003170:	4901      	ldr	r1, [pc, #4]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003172:	4313      	orrs	r3, r2
 8003174:	658b      	str	r3, [r1, #88]	; 0x58
 8003176:	e003      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
 800317e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b00      	cmp	r3, #0
 800318a:	d01a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003196:	d10a      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3324      	adds	r3, #36	; 0x24
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fcfe 	bl	8003ba0 <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80031ae:	4b8c      	ldr	r3, [pc, #560]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031bc:	4988      	ldr	r1, [pc, #544]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0310 	and.w	r3, r3, #16
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d10a      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3324      	adds	r3, #36	; 0x24
 80031de:	2102      	movs	r1, #2
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 fcdd 	bl	8003ba0 <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031f0:	4b7b      	ldr	r3, [pc, #492]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031fe:	4978      	ldr	r1, [pc, #480]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003200:	4313      	orrs	r3, r2
 8003202:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d034      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800321a:	d01d      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800321c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003220:	d817      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800322a:	d009      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800322c:	e011      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fc01 	bl	8003a3c <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3324      	adds	r3, #36	; 0x24
 8003244:	2102      	movs	r1, #2
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fcaa 	bl	8003ba0 <RCCEx_PLL3_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10a      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003260:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800326e:	495c      	ldr	r1, [pc, #368]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003270:	4313      	orrs	r3, r2
 8003272:	658b      	str	r3, [r1, #88]	; 0x58
 8003274:	e001      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003276:	7dfb      	ldrb	r3, [r7, #23]
 8003278:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d033      	beq.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003290:	d01c      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003292:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003296:	d816      	bhi.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800329c:	d003      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800329e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032a2:	d007      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80032a4:	e00f      	b.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a6:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	4a4d      	ldr	r2, [pc, #308]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80032b2:	e00c      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3324      	adds	r3, #36	; 0x24
 80032b8:	2101      	movs	r1, #1
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 fc70 	bl	8003ba0 <RCCEx_PLL3_Config>
 80032c0:	4603      	mov	r3, r0
 80032c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	75fb      	strb	r3, [r7, #23]
      break;
 80032ca:	e000      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80032cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ce:	7dfb      	ldrb	r3, [r7, #23]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e2:	493f      	ldr	r1, [pc, #252]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	654b      	str	r3, [r1, #84]	; 0x54
 80032e8:	e001      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d029      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 8003302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003306:	d007      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003308:	e00f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800330a:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	4a34      	ldr	r2, [pc, #208]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003314:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003316:	e00b      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fb8c 	bl	8003a3c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003328:	e002      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
      break;
 800332e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003330:	7dfb      	ldrb	r3, [r7, #23]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d109      	bne.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003336:	4b2a      	ldr	r3, [pc, #168]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003342:	4927      	ldr	r1, [pc, #156]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003344:	4313      	orrs	r3, r2
 8003346:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003348:	e001      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334a:	7dfb      	ldrb	r3, [r7, #23]
 800334c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3324      	adds	r3, #36	; 0x24
 800335e:	2102      	movs	r1, #2
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fc1d 	bl	8003ba0 <RCCEx_PLL3_Config>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d035      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003382:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003386:	d017      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003388:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800338c:	d811      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800338e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003392:	d013      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003398:	d80b      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d010      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800339e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033a2:	d106      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	4a0d      	ldr	r2, [pc, #52]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80033b0:	e007      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	75fb      	strb	r3, [r7, #23]
      break;
 80033b6:	e004      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80033b8:	bf00      	nop
 80033ba:	e002      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80033bc:	bf00      	nop
 80033be:	e000      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80033c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10d      	bne.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4902      	ldr	r1, [pc, #8]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	654b      	str	r3, [r1, #84]	; 0x54
 80033dc:	e004      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80033de:	bf00      	nop
 80033e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033f4:	4b31      	ldr	r3, [pc, #196]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80033f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003400:	492e      	ldr	r1, [pc, #184]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d009      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003412:	4b2a      	ldr	r3, [pc, #168]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003420:	4926      	ldr	r1, [pc, #152]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003432:	4b22      	ldr	r3, [pc, #136]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343e:	491f      	ldr	r1, [pc, #124]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003440:	4313      	orrs	r3, r2
 8003442:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00d      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003450:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	4a19      	ldr	r2, [pc, #100]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003456:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800345a:	6113      	str	r3, [r2, #16]
 800345c:	4b17      	ldr	r3, [pc, #92]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003466:	4915      	ldr	r1, [pc, #84]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003468:	4313      	orrs	r3, r2
 800346a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	da08      	bge.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003478:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003480:	490e      	ldr	r1, [pc, #56]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003492:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003496:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a0:	4906      	ldr	r1, [pc, #24]	; (80034bc <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80034a6:	7dbb      	ldrb	r3, [r7, #22]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d101      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80034ac:	2300      	movs	r3, #0
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3718      	adds	r7, #24
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	58024400 	.word	0x58024400

080034c0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80034c4:	f7ff f830 	bl	8002528 <HAL_RCC_GetHCLKFreq>
 80034c8:	4602      	mov	r2, r0
 80034ca:	4b06      	ldr	r3, [pc, #24]	; (80034e4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	091b      	lsrs	r3, r3, #4
 80034d0:	f003 0307 	and.w	r3, r3, #7
 80034d4:	4904      	ldr	r1, [pc, #16]	; (80034e8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80034d6:	5ccb      	ldrb	r3, [r1, r3]
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	58024400 	.word	0x58024400
 80034e8:	08004f84 	.word	0x08004f84

080034ec <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034f4:	4ba1      	ldr	r3, [pc, #644]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034fe:	4b9f      	ldr	r3, [pc, #636]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	0b1b      	lsrs	r3, r3, #12
 8003504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003508:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800350a:	4b9c      	ldr	r3, [pc, #624]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003516:	4b99      	ldr	r3, [pc, #612]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	08db      	lsrs	r3, r3, #3
 800351c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	ee07 3a90 	vmov	s15, r3
 800352a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800352e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f000 8111 	beq.w	800375c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	f000 8083 	beq.w	8003648 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b02      	cmp	r3, #2
 8003546:	f200 80a1 	bhi.w	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d056      	beq.n	8003604 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003556:	e099      	b.n	800368c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d02d      	beq.n	80035c0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003564:	4b85      	ldr	r3, [pc, #532]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	4a84      	ldr	r2, [pc, #528]	; (8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
 8003574:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	ee07 3a90 	vmov	s15, r3
 800357c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	ee07 3a90 	vmov	s15, r3
 8003586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800358a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800358e:	4b7b      	ldr	r3, [pc, #492]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003596:	ee07 3a90 	vmov	s15, r3
 800359a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800359e:	ed97 6a03 	vldr	s12, [r7, #12]
 80035a2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80035be:	e087      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003788 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80035ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d2:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035da:	ee07 3a90 	vmov	s15, r3
 80035de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035e6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003602:	e065      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800360e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800378c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003616:	4b59      	ldr	r3, [pc, #356]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003626:	ed97 6a03 	vldr	s12, [r7, #12]
 800362a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800362e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800363e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003642:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003646:	e043      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	ee07 3a90 	vmov	s15, r3
 800364e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003652:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003790 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365a:	4b48      	ldr	r3, [pc, #288]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003662:	ee07 3a90 	vmov	s15, r3
 8003666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366a:	ed97 6a03 	vldr	s12, [r7, #12]
 800366e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800367e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800368a:	e021      	b.n	80036d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	ee07 3a90 	vmov	s15, r3
 8003692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003696:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800378c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800369a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800369e:	4b37      	ldr	r3, [pc, #220]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80036b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003784 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ce:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036d0:	4b2a      	ldr	r3, [pc, #168]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	0a5b      	lsrs	r3, r3, #9
 80036d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036da:	ee07 3a90 	vmov	s15, r3
 80036de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f6:	ee17 2a90 	vmov	r2, s15
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003702:	0c1b      	lsrs	r3, r3, #16
 8003704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003710:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003714:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003718:	edd7 6a07 	vldr	s13, [r7, #28]
 800371c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003720:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003724:	ee17 2a90 	vmov	r2, s15
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800372c:	4b13      	ldr	r3, [pc, #76]	; (800377c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800372e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003730:	0e1b      	lsrs	r3, r3, #24
 8003732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003736:	ee07 3a90 	vmov	s15, r3
 800373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003742:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003746:	edd7 6a07 	vldr	s13, [r7, #28]
 800374a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003752:	ee17 2a90 	vmov	r2, s15
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800375a:	e008      	b.n	800376e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
}
 800376e:	bf00      	nop
 8003770:	3724      	adds	r7, #36	; 0x24
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	58024400 	.word	0x58024400
 8003780:	03d09000 	.word	0x03d09000
 8003784:	46000000 	.word	0x46000000
 8003788:	4c742400 	.word	0x4c742400
 800378c:	4a742400 	.word	0x4a742400
 8003790:	4bbebc20 	.word	0x4bbebc20

08003794 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003794:	b480      	push	{r7}
 8003796:	b089      	sub	sp, #36	; 0x24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800379c:	4ba1      	ldr	r3, [pc, #644]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	f003 0303 	and.w	r3, r3, #3
 80037a4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80037a6:	4b9f      	ldr	r3, [pc, #636]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037aa:	0d1b      	lsrs	r3, r3, #20
 80037ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80037b2:	4b9c      	ldr	r3, [pc, #624]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b6:	0a1b      	lsrs	r3, r3, #8
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80037be:	4b99      	ldr	r3, [pc, #612]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	08db      	lsrs	r3, r3, #3
 80037c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	fb02 f303 	mul.w	r3, r2, r3
 80037ce:	ee07 3a90 	vmov	s15, r3
 80037d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8111 	beq.w	8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	f000 8083 	beq.w	80038f0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	f200 80a1 	bhi.w	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d056      	beq.n	80038ac <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037fe:	e099      	b.n	8003934 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003800:	4b88      	ldr	r3, [pc, #544]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d02d      	beq.n	8003868 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800380c:	4b85      	ldr	r3, [pc, #532]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	4a84      	ldr	r2, [pc, #528]	; (8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003818:	fa22 f303 	lsr.w	r3, r2, r3
 800381c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	ee07 3a90 	vmov	s15, r3
 8003824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	ee07 3a90 	vmov	s15, r3
 800382e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003832:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003836:	4b7b      	ldr	r3, [pc, #492]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003846:	ed97 6a03 	vldr	s12, [r7, #12]
 800384a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800384e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003852:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003856:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800385a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800385e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003862:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003866:	e087      	b.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	ee07 3a90 	vmov	s15, r3
 800386e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003872:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a30 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800388a:	ed97 6a03 	vldr	s12, [r7, #12]
 800388e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800389a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800389e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038aa:	e065      	b.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80038ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038be:	4b59      	ldr	r3, [pc, #356]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	ee07 3a90 	vmov	s15, r3
 80038ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80038d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ee:	e043      	b.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003902:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800390a:	ee07 3a90 	vmov	s15, r3
 800390e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003912:	ed97 6a03 	vldr	s12, [r7, #12]
 8003916:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800391a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800392a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003932:	e021      	b.n	8003978 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003946:	4b37      	ldr	r3, [pc, #220]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394e:	ee07 3a90 	vmov	s15, r3
 8003952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003956:	ed97 6a03 	vldr	s12, [r7, #12]
 800395a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a2c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800395e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800396a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003976:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003978:	4b2a      	ldr	r3, [pc, #168]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	0a5b      	lsrs	r3, r3, #9
 800397e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800398e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003992:	edd7 6a07 	vldr	s13, [r7, #28]
 8003996:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800399a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800399e:	ee17 2a90 	vmov	r2, s15
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80039a6:	4b1f      	ldr	r3, [pc, #124]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b0:	ee07 3a90 	vmov	s15, r3
 80039b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039cc:	ee17 2a90 	vmov	r2, s15
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039d4:	4b13      	ldr	r3, [pc, #76]	; (8003a24 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	0e1b      	lsrs	r3, r3, #24
 80039da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80039f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fa:	ee17 2a90 	vmov	r2, s15
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003a02:	e008      	b.n	8003a16 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	609a      	str	r2, [r3, #8]
}
 8003a16:	bf00      	nop
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	58024400 	.word	0x58024400
 8003a28:	03d09000 	.word	0x03d09000
 8003a2c:	46000000 	.word	0x46000000
 8003a30:	4c742400 	.word	0x4c742400
 8003a34:	4a742400 	.word	0x4a742400
 8003a38:	4bbebc20 	.word	0x4bbebc20

08003a3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a4a:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b03      	cmp	r3, #3
 8003a54:	d101      	bne.n	8003a5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e099      	b.n	8003b8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a5a:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a4e      	ldr	r2, [pc, #312]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a60:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a66:	f7fd fa65 	bl	8000f34 <HAL_GetTick>
 8003a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a6c:	e008      	b.n	8003a80 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a6e:	f7fd fa61 	bl	8000f34 <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d901      	bls.n	8003a80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e086      	b.n	8003b8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1f0      	bne.n	8003a6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a8c:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	031b      	lsls	r3, r3, #12
 8003a9a:	493f      	ldr	r1, [pc, #252]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	628b      	str	r3, [r1, #40]	; 0x28
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	025b      	lsls	r3, r3, #9
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ad0:	4931      	ldr	r1, [pc, #196]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ad6:	4b30      	ldr	r3, [pc, #192]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ada:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	492d      	ldr	r1, [pc, #180]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ae8:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f023 0220 	bic.w	r2, r3, #32
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4928      	ldr	r1, [pc, #160]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003afa:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b00:	f023 0310 	bic.w	r3, r3, #16
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b0a:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <RCCEx_PLL2_Config+0x160>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	69d2      	ldr	r2, [r2, #28]
 8003b12:	00d2      	lsls	r2, r2, #3
 8003b14:	4920      	ldr	r1, [pc, #128]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003b1a:	4b1f      	ldr	r3, [pc, #124]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b20:	f043 0310 	orr.w	r3, r3, #16
 8003b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d106      	bne.n	8003b3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b38:	e00f      	b.n	8003b5a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d106      	bne.n	8003b4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b40:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4a14      	ldr	r2, [pc, #80]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b4c:	e005      	b.n	8003b5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b52:	4a11      	ldr	r2, [pc, #68]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b58:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b66:	f7fd f9e5 	bl	8000f34 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b6c:	e008      	b.n	8003b80 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b6e:	f7fd f9e1 	bl	8000f34 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e006      	b.n	8003b8e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <RCCEx_PLL2_Config+0x15c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	ffff0007 	.word	0xffff0007

08003ba0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003baa:	2300      	movs	r3, #0
 8003bac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003bae:	4b53      	ldr	r3, [pc, #332]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d101      	bne.n	8003bbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e099      	b.n	8003cf2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003bbe:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bca:	f7fd f9b3 	bl	8000f34 <HAL_GetTick>
 8003bce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bd2:	f7fd f9af 	bl	8000f34 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e086      	b.n	8003cf2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003be4:	4b45      	ldr	r3, [pc, #276]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bf0:	4b42      	ldr	r3, [pc, #264]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	051b      	lsls	r3, r3, #20
 8003bfe:	493f      	ldr	r1, [pc, #252]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c00:	4313      	orrs	r3, r2
 8003c02:	628b      	str	r3, [r1, #40]	; 0x28
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	025b      	lsls	r3, r3, #9
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	3b01      	subs	r3, #1
 8003c20:	041b      	lsls	r3, r3, #16
 8003c22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	061b      	lsls	r3, r3, #24
 8003c30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c34:	4931      	ldr	r1, [pc, #196]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c3a:	4b30      	ldr	r3, [pc, #192]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	492d      	ldr	r1, [pc, #180]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c4c:	4b2b      	ldr	r3, [pc, #172]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4928      	ldr	r1, [pc, #160]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c5e:	4b27      	ldr	r3, [pc, #156]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a26      	ldr	r2, [pc, #152]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c6a:	4b24      	ldr	r3, [pc, #144]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c6e:	4b24      	ldr	r3, [pc, #144]	; (8003d00 <RCCEx_PLL3_Config+0x160>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	69d2      	ldr	r2, [r2, #28]
 8003c76:	00d2      	lsls	r2, r2, #3
 8003c78:	4920      	ldr	r1, [pc, #128]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c82:	4a1e      	ldr	r2, [pc, #120]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c90:	4b1a      	ldr	r3, [pc, #104]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c94:	4a19      	ldr	r2, [pc, #100]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003c96:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c9c:	e00f      	b.n	8003cbe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d106      	bne.n	8003cb2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ca4:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca8:	4a14      	ldr	r2, [pc, #80]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003caa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003cb0:	e005      	b.n	8003cbe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003cb2:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb6:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003cb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a0e      	ldr	r2, [pc, #56]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd f933 	bl	8000f34 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cd0:	e008      	b.n	8003ce4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cd2:	f7fd f92f 	bl	8000f34 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e006      	b.n	8003cf2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003ce4:	4b05      	ldr	r3, [pc, #20]	; (8003cfc <RCCEx_PLL3_Config+0x15c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	ffff0007 	.word	0xffff0007

08003d04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e042      	b.n	8003d9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fc ffc3 	bl	8000cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2224      	movs	r2, #36	; 0x24
 8003d32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 0201 	bic.w	r2, r2, #1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f82c 	bl	8003da4 <UART_SetConfig>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e022      	b.n	8003d9c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fd80 	bl	8004864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f042 0201 	orr.w	r2, r2, #1
 8003d92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fe07 	bl	80049a8 <UART_CheckIdleState>
 8003d9a:	4603      	mov	r3, r0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3708      	adds	r7, #8
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003da4:	b5b0      	push	{r4, r5, r7, lr}
 8003da6:	b08e      	sub	sp, #56	; 0x38
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	431a      	orrs	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4bbf      	ldr	r3, [pc, #764]	; (80040d0 <UART_SetConfig+0x32c>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68da      	ldr	r2, [r3, #12]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4ab5      	ldr	r2, [pc, #724]	; (80040d4 <UART_SetConfig+0x330>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d004      	beq.n	8003e0e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689a      	ldr	r2, [r3, #8]
 8003e14:	4bb0      	ldr	r3, [pc, #704]	; (80040d8 <UART_SetConfig+0x334>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6812      	ldr	r2, [r2, #0]
 8003e1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e1e:	430b      	orrs	r3, r1
 8003e20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	f023 010f 	bic.w	r1, r3, #15
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	430a      	orrs	r2, r1
 8003e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4aa7      	ldr	r2, [pc, #668]	; (80040dc <UART_SetConfig+0x338>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d176      	bne.n	8003f30 <UART_SetConfig+0x18c>
 8003e42:	4ba7      	ldr	r3, [pc, #668]	; (80040e0 <UART_SetConfig+0x33c>)
 8003e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e4a:	2b28      	cmp	r3, #40	; 0x28
 8003e4c:	d86c      	bhi.n	8003f28 <UART_SetConfig+0x184>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0xb0>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003ef9 	.word	0x08003ef9
 8003e58:	08003f29 	.word	0x08003f29
 8003e5c:	08003f29 	.word	0x08003f29
 8003e60:	08003f29 	.word	0x08003f29
 8003e64:	08003f29 	.word	0x08003f29
 8003e68:	08003f29 	.word	0x08003f29
 8003e6c:	08003f29 	.word	0x08003f29
 8003e70:	08003f29 	.word	0x08003f29
 8003e74:	08003f01 	.word	0x08003f01
 8003e78:	08003f29 	.word	0x08003f29
 8003e7c:	08003f29 	.word	0x08003f29
 8003e80:	08003f29 	.word	0x08003f29
 8003e84:	08003f29 	.word	0x08003f29
 8003e88:	08003f29 	.word	0x08003f29
 8003e8c:	08003f29 	.word	0x08003f29
 8003e90:	08003f29 	.word	0x08003f29
 8003e94:	08003f09 	.word	0x08003f09
 8003e98:	08003f29 	.word	0x08003f29
 8003e9c:	08003f29 	.word	0x08003f29
 8003ea0:	08003f29 	.word	0x08003f29
 8003ea4:	08003f29 	.word	0x08003f29
 8003ea8:	08003f29 	.word	0x08003f29
 8003eac:	08003f29 	.word	0x08003f29
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f11 	.word	0x08003f11
 8003eb8:	08003f29 	.word	0x08003f29
 8003ebc:	08003f29 	.word	0x08003f29
 8003ec0:	08003f29 	.word	0x08003f29
 8003ec4:	08003f29 	.word	0x08003f29
 8003ec8:	08003f29 	.word	0x08003f29
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f29 	.word	0x08003f29
 8003ed4:	08003f19 	.word	0x08003f19
 8003ed8:	08003f29 	.word	0x08003f29
 8003edc:	08003f29 	.word	0x08003f29
 8003ee0:	08003f29 	.word	0x08003f29
 8003ee4:	08003f29 	.word	0x08003f29
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f29 	.word	0x08003f29
 8003ef0:	08003f29 	.word	0x08003f29
 8003ef4:	08003f21 	.word	0x08003f21
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efe:	e222      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f06:	e21e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f0e:	e21a      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f16:	e216      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f18:	2320      	movs	r3, #32
 8003f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f1e:	e212      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f20:	2340      	movs	r3, #64	; 0x40
 8003f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f26:	e20e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f2e:	e20a      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a6b      	ldr	r2, [pc, #428]	; (80040e4 <UART_SetConfig+0x340>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d130      	bne.n	8003f9c <UART_SetConfig+0x1f8>
 8003f3a:	4b69      	ldr	r3, [pc, #420]	; (80040e0 <UART_SetConfig+0x33c>)
 8003f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3e:	f003 0307 	and.w	r3, r3, #7
 8003f42:	2b05      	cmp	r3, #5
 8003f44:	d826      	bhi.n	8003f94 <UART_SetConfig+0x1f0>
 8003f46:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x1a8>)
 8003f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4c:	08003f65 	.word	0x08003f65
 8003f50:	08003f6d 	.word	0x08003f6d
 8003f54:	08003f75 	.word	0x08003f75
 8003f58:	08003f7d 	.word	0x08003f7d
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6a:	e1ec      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f72:	e1e8      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f74:	2308      	movs	r3, #8
 8003f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7a:	e1e4      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f7c:	2310      	movs	r3, #16
 8003f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f82:	e1e0      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f84:	2320      	movs	r3, #32
 8003f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f8a:	e1dc      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f8c:	2340      	movs	r3, #64	; 0x40
 8003f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f92:	e1d8      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f9a:	e1d4      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a51      	ldr	r2, [pc, #324]	; (80040e8 <UART_SetConfig+0x344>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d130      	bne.n	8004008 <UART_SetConfig+0x264>
 8003fa6:	4b4e      	ldr	r3, [pc, #312]	; (80040e0 <UART_SetConfig+0x33c>)
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	2b05      	cmp	r3, #5
 8003fb0:	d826      	bhi.n	8004000 <UART_SetConfig+0x25c>
 8003fb2:	a201      	add	r2, pc, #4	; (adr r2, 8003fb8 <UART_SetConfig+0x214>)
 8003fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb8:	08003fd1 	.word	0x08003fd1
 8003fbc:	08003fd9 	.word	0x08003fd9
 8003fc0:	08003fe1 	.word	0x08003fe1
 8003fc4:	08003fe9 	.word	0x08003fe9
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	08003ff9 	.word	0x08003ff9
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd6:	e1b6      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003fd8:	2304      	movs	r3, #4
 8003fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fde:	e1b2      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003fe0:	2308      	movs	r3, #8
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe6:	e1ae      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003fe8:	2310      	movs	r3, #16
 8003fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fee:	e1aa      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ff6:	e1a6      	b.n	8004346 <UART_SetConfig+0x5a2>
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ffe:	e1a2      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004000:	2380      	movs	r3, #128	; 0x80
 8004002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004006:	e19e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a37      	ldr	r2, [pc, #220]	; (80040ec <UART_SetConfig+0x348>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d130      	bne.n	8004074 <UART_SetConfig+0x2d0>
 8004012:	4b33      	ldr	r3, [pc, #204]	; (80040e0 <UART_SetConfig+0x33c>)
 8004014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	2b05      	cmp	r3, #5
 800401c:	d826      	bhi.n	800406c <UART_SetConfig+0x2c8>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x280>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	0800403d 	.word	0x0800403d
 8004028:	08004045 	.word	0x08004045
 800402c:	0800404d 	.word	0x0800404d
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004042:	e180      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004044:	2304      	movs	r3, #4
 8004046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404a:	e17c      	b.n	8004346 <UART_SetConfig+0x5a2>
 800404c:	2308      	movs	r3, #8
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004052:	e178      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004054:	2310      	movs	r3, #16
 8004056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405a:	e174      	b.n	8004346 <UART_SetConfig+0x5a2>
 800405c:	2320      	movs	r3, #32
 800405e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004062:	e170      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004064:	2340      	movs	r3, #64	; 0x40
 8004066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800406a:	e16c      	b.n	8004346 <UART_SetConfig+0x5a2>
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004072:	e168      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <UART_SetConfig+0x34c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d142      	bne.n	8004104 <UART_SetConfig+0x360>
 800407e:	4b18      	ldr	r3, [pc, #96]	; (80040e0 <UART_SetConfig+0x33c>)
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	2b05      	cmp	r3, #5
 8004088:	d838      	bhi.n	80040fc <UART_SetConfig+0x358>
 800408a:	a201      	add	r2, pc, #4	; (adr r2, 8004090 <UART_SetConfig+0x2ec>)
 800408c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004090:	080040a9 	.word	0x080040a9
 8004094:	080040b1 	.word	0x080040b1
 8004098:	080040b9 	.word	0x080040b9
 800409c:	080040c1 	.word	0x080040c1
 80040a0:	080040c9 	.word	0x080040c9
 80040a4:	080040f5 	.word	0x080040f5
 80040a8:	2300      	movs	r3, #0
 80040aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ae:	e14a      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040b0:	2304      	movs	r3, #4
 80040b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b6:	e146      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040b8:	2308      	movs	r3, #8
 80040ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040be:	e142      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040c0:	2310      	movs	r3, #16
 80040c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c6:	e13e      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040c8:	2320      	movs	r3, #32
 80040ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ce:	e13a      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040d0:	cfff69f3 	.word	0xcfff69f3
 80040d4:	58000c00 	.word	0x58000c00
 80040d8:	11fff4ff 	.word	0x11fff4ff
 80040dc:	40011000 	.word	0x40011000
 80040e0:	58024400 	.word	0x58024400
 80040e4:	40004400 	.word	0x40004400
 80040e8:	40004800 	.word	0x40004800
 80040ec:	40004c00 	.word	0x40004c00
 80040f0:	40005000 	.word	0x40005000
 80040f4:	2340      	movs	r3, #64	; 0x40
 80040f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040fa:	e124      	b.n	8004346 <UART_SetConfig+0x5a2>
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004102:	e120      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4acc      	ldr	r2, [pc, #816]	; (800443c <UART_SetConfig+0x698>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d176      	bne.n	80041fc <UART_SetConfig+0x458>
 800410e:	4bcc      	ldr	r3, [pc, #816]	; (8004440 <UART_SetConfig+0x69c>)
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004116:	2b28      	cmp	r3, #40	; 0x28
 8004118:	d86c      	bhi.n	80041f4 <UART_SetConfig+0x450>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x37c>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	080041c5 	.word	0x080041c5
 8004124:	080041f5 	.word	0x080041f5
 8004128:	080041f5 	.word	0x080041f5
 800412c:	080041f5 	.word	0x080041f5
 8004130:	080041f5 	.word	0x080041f5
 8004134:	080041f5 	.word	0x080041f5
 8004138:	080041f5 	.word	0x080041f5
 800413c:	080041f5 	.word	0x080041f5
 8004140:	080041cd 	.word	0x080041cd
 8004144:	080041f5 	.word	0x080041f5
 8004148:	080041f5 	.word	0x080041f5
 800414c:	080041f5 	.word	0x080041f5
 8004150:	080041f5 	.word	0x080041f5
 8004154:	080041f5 	.word	0x080041f5
 8004158:	080041f5 	.word	0x080041f5
 800415c:	080041f5 	.word	0x080041f5
 8004160:	080041d5 	.word	0x080041d5
 8004164:	080041f5 	.word	0x080041f5
 8004168:	080041f5 	.word	0x080041f5
 800416c:	080041f5 	.word	0x080041f5
 8004170:	080041f5 	.word	0x080041f5
 8004174:	080041f5 	.word	0x080041f5
 8004178:	080041f5 	.word	0x080041f5
 800417c:	080041f5 	.word	0x080041f5
 8004180:	080041dd 	.word	0x080041dd
 8004184:	080041f5 	.word	0x080041f5
 8004188:	080041f5 	.word	0x080041f5
 800418c:	080041f5 	.word	0x080041f5
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080041f5 	.word	0x080041f5
 8004198:	080041f5 	.word	0x080041f5
 800419c:	080041f5 	.word	0x080041f5
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041f5 	.word	0x080041f5
 80041ac:	080041f5 	.word	0x080041f5
 80041b0:	080041f5 	.word	0x080041f5
 80041b4:	080041f5 	.word	0x080041f5
 80041b8:	080041f5 	.word	0x080041f5
 80041bc:	080041f5 	.word	0x080041f5
 80041c0:	080041ed 	.word	0x080041ed
 80041c4:	2301      	movs	r3, #1
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e0bc      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e0b8      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	e0b4      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e2:	e0b0      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041e4:	2320      	movs	r3, #32
 80041e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ea:	e0ac      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041ec:	2340      	movs	r3, #64	; 0x40
 80041ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041f2:	e0a8      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041fa:	e0a4      	b.n	8004346 <UART_SetConfig+0x5a2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a90      	ldr	r2, [pc, #576]	; (8004444 <UART_SetConfig+0x6a0>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d130      	bne.n	8004268 <UART_SetConfig+0x4c4>
 8004206:	4b8e      	ldr	r3, [pc, #568]	; (8004440 <UART_SetConfig+0x69c>)
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	f003 0307 	and.w	r3, r3, #7
 800420e:	2b05      	cmp	r3, #5
 8004210:	d826      	bhi.n	8004260 <UART_SetConfig+0x4bc>
 8004212:	a201      	add	r2, pc, #4	; (adr r2, 8004218 <UART_SetConfig+0x474>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	08004231 	.word	0x08004231
 800421c:	08004239 	.word	0x08004239
 8004220:	08004241 	.word	0x08004241
 8004224:	08004249 	.word	0x08004249
 8004228:	08004251 	.word	0x08004251
 800422c:	08004259 	.word	0x08004259
 8004230:	2300      	movs	r3, #0
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e086      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004238:	2304      	movs	r3, #4
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e082      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004240:	2308      	movs	r3, #8
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e07e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004248:	2310      	movs	r3, #16
 800424a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800424e:	e07a      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004250:	2320      	movs	r3, #32
 8004252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004256:	e076      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004258:	2340      	movs	r3, #64	; 0x40
 800425a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800425e:	e072      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004266:	e06e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a76      	ldr	r2, [pc, #472]	; (8004448 <UART_SetConfig+0x6a4>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d130      	bne.n	80042d4 <UART_SetConfig+0x530>
 8004272:	4b73      	ldr	r3, [pc, #460]	; (8004440 <UART_SetConfig+0x69c>)
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b05      	cmp	r3, #5
 800427c:	d826      	bhi.n	80042cc <UART_SetConfig+0x528>
 800427e:	a201      	add	r2, pc, #4	; (adr r2, 8004284 <UART_SetConfig+0x4e0>)
 8004280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004284:	0800429d 	.word	0x0800429d
 8004288:	080042a5 	.word	0x080042a5
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042b5 	.word	0x080042b5
 8004294:	080042bd 	.word	0x080042bd
 8004298:	080042c5 	.word	0x080042c5
 800429c:	2300      	movs	r3, #0
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a2:	e050      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042aa:	e04c      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e048      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ba:	e044      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042bc:	2320      	movs	r3, #32
 80042be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042c2:	e040      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042c4:	2340      	movs	r3, #64	; 0x40
 80042c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ca:	e03c      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042cc:	2380      	movs	r3, #128	; 0x80
 80042ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042d2:	e038      	b.n	8004346 <UART_SetConfig+0x5a2>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a5c      	ldr	r2, [pc, #368]	; (800444c <UART_SetConfig+0x6a8>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d130      	bne.n	8004340 <UART_SetConfig+0x59c>
 80042de:	4b58      	ldr	r3, [pc, #352]	; (8004440 <UART_SetConfig+0x69c>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d826      	bhi.n	8004338 <UART_SetConfig+0x594>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <UART_SetConfig+0x54c>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004309 	.word	0x08004309
 80042f4:	08004311 	.word	0x08004311
 80042f8:	08004319 	.word	0x08004319
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	2302      	movs	r3, #2
 800430a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430e:	e01a      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004310:	2304      	movs	r3, #4
 8004312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004316:	e016      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004318:	2308      	movs	r3, #8
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431e:	e012      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004320:	2310      	movs	r3, #16
 8004322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004326:	e00e      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004328:	2320      	movs	r3, #32
 800432a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432e:	e00a      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004336:	e006      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004338:	2380      	movs	r3, #128	; 0x80
 800433a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800433e:	e002      	b.n	8004346 <UART_SetConfig+0x5a2>
 8004340:	2380      	movs	r3, #128	; 0x80
 8004342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a40      	ldr	r2, [pc, #256]	; (800444c <UART_SetConfig+0x6a8>)
 800434c:	4293      	cmp	r3, r2
 800434e:	f040 80ef 	bne.w	8004530 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004352:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004356:	2b20      	cmp	r3, #32
 8004358:	dc46      	bgt.n	80043e8 <UART_SetConfig+0x644>
 800435a:	2b02      	cmp	r3, #2
 800435c:	f2c0 8081 	blt.w	8004462 <UART_SetConfig+0x6be>
 8004360:	3b02      	subs	r3, #2
 8004362:	2b1e      	cmp	r3, #30
 8004364:	d87d      	bhi.n	8004462 <UART_SetConfig+0x6be>
 8004366:	a201      	add	r2, pc, #4	; (adr r2, 800436c <UART_SetConfig+0x5c8>)
 8004368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436c:	080043ef 	.word	0x080043ef
 8004370:	08004463 	.word	0x08004463
 8004374:	080043f7 	.word	0x080043f7
 8004378:	08004463 	.word	0x08004463
 800437c:	08004463 	.word	0x08004463
 8004380:	08004463 	.word	0x08004463
 8004384:	08004407 	.word	0x08004407
 8004388:	08004463 	.word	0x08004463
 800438c:	08004463 	.word	0x08004463
 8004390:	08004463 	.word	0x08004463
 8004394:	08004463 	.word	0x08004463
 8004398:	08004463 	.word	0x08004463
 800439c:	08004463 	.word	0x08004463
 80043a0:	08004463 	.word	0x08004463
 80043a4:	08004417 	.word	0x08004417
 80043a8:	08004463 	.word	0x08004463
 80043ac:	08004463 	.word	0x08004463
 80043b0:	08004463 	.word	0x08004463
 80043b4:	08004463 	.word	0x08004463
 80043b8:	08004463 	.word	0x08004463
 80043bc:	08004463 	.word	0x08004463
 80043c0:	08004463 	.word	0x08004463
 80043c4:	08004463 	.word	0x08004463
 80043c8:	08004463 	.word	0x08004463
 80043cc:	08004463 	.word	0x08004463
 80043d0:	08004463 	.word	0x08004463
 80043d4:	08004463 	.word	0x08004463
 80043d8:	08004463 	.word	0x08004463
 80043dc:	08004463 	.word	0x08004463
 80043e0:	08004463 	.word	0x08004463
 80043e4:	08004455 	.word	0x08004455
 80043e8:	2b40      	cmp	r3, #64	; 0x40
 80043ea:	d036      	beq.n	800445a <UART_SetConfig+0x6b6>
 80043ec:	e039      	b.n	8004462 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043ee:	f7ff f867 	bl	80034c0 <HAL_RCCEx_GetD3PCLK1Freq>
 80043f2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80043f4:	e03b      	b.n	800446e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043f6:	f107 0314 	add.w	r3, r7, #20
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f876 	bl	80034ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004404:	e033      	b.n	800446e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004406:	f107 0308 	add.w	r3, r7, #8
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff f9c2 	bl	8003794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004414:	e02b      	b.n	800446e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004416:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <UART_SetConfig+0x69c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0320 	and.w	r3, r3, #32
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004422:	4b07      	ldr	r3, [pc, #28]	; (8004440 <UART_SetConfig+0x69c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	08db      	lsrs	r3, r3, #3
 8004428:	f003 0303 	and.w	r3, r3, #3
 800442c:	4a08      	ldr	r2, [pc, #32]	; (8004450 <UART_SetConfig+0x6ac>)
 800442e:	fa22 f303 	lsr.w	r3, r2, r3
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004434:	e01b      	b.n	800446e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004436:	4b06      	ldr	r3, [pc, #24]	; (8004450 <UART_SetConfig+0x6ac>)
 8004438:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800443a:	e018      	b.n	800446e <UART_SetConfig+0x6ca>
 800443c:	40011400 	.word	0x40011400
 8004440:	58024400 	.word	0x58024400
 8004444:	40007800 	.word	0x40007800
 8004448:	40007c00 	.word	0x40007c00
 800444c:	58000c00 	.word	0x58000c00
 8004450:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004454:	4bc4      	ldr	r3, [pc, #784]	; (8004768 <UART_SetConfig+0x9c4>)
 8004456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004458:	e009      	b.n	800446e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800445a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004460:	e005      	b.n	800446e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800446c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 81da 	beq.w	800482a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	4abc      	ldr	r2, [pc, #752]	; (800476c <UART_SetConfig+0x9c8>)
 800447c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004480:	461a      	mov	r2, r3
 8004482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004484:	fbb3 f3f2 	udiv	r3, r3, r2
 8004488:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	4413      	add	r3, r2
 8004494:	6a3a      	ldr	r2, [r7, #32]
 8004496:	429a      	cmp	r2, r3
 8004498:	d305      	bcc.n	80044a6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d903      	bls.n	80044ae <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80044ac:	e1bd      	b.n	800482a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b0:	4618      	mov	r0, r3
 80044b2:	f04f 0100 	mov.w	r1, #0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	4aac      	ldr	r2, [pc, #688]	; (800476c <UART_SetConfig+0x9c8>)
 80044bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	f04f 0300 	mov.w	r3, #0
 80044c6:	f7fb ff07 	bl	80002d8 <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4610      	mov	r0, r2
 80044d0:	4619      	mov	r1, r3
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	020b      	lsls	r3, r1, #8
 80044dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044e0:	0202      	lsls	r2, r0, #8
 80044e2:	6879      	ldr	r1, [r7, #4]
 80044e4:	6849      	ldr	r1, [r1, #4]
 80044e6:	0849      	lsrs	r1, r1, #1
 80044e8:	4608      	mov	r0, r1
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	1814      	adds	r4, r2, r0
 80044f0:	eb43 0501 	adc.w	r5, r3, r1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	461a      	mov	r2, r3
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	4620      	mov	r0, r4
 8004500:	4629      	mov	r1, r5
 8004502:	f7fb fee9 	bl	80002d8 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4613      	mov	r3, r2
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004510:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004514:	d308      	bcc.n	8004528 <UART_SetConfig+0x784>
 8004516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004518:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800451c:	d204      	bcs.n	8004528 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	e180      	b.n	800482a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800452e:	e17c      	b.n	800482a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004538:	f040 80be 	bne.w	80046b8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800453c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004540:	2b20      	cmp	r3, #32
 8004542:	dc49      	bgt.n	80045d8 <UART_SetConfig+0x834>
 8004544:	2b00      	cmp	r3, #0
 8004546:	db7c      	blt.n	8004642 <UART_SetConfig+0x89e>
 8004548:	2b20      	cmp	r3, #32
 800454a:	d87a      	bhi.n	8004642 <UART_SetConfig+0x89e>
 800454c:	a201      	add	r2, pc, #4	; (adr r2, 8004554 <UART_SetConfig+0x7b0>)
 800454e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004552:	bf00      	nop
 8004554:	080045df 	.word	0x080045df
 8004558:	080045e7 	.word	0x080045e7
 800455c:	08004643 	.word	0x08004643
 8004560:	08004643 	.word	0x08004643
 8004564:	080045ef 	.word	0x080045ef
 8004568:	08004643 	.word	0x08004643
 800456c:	08004643 	.word	0x08004643
 8004570:	08004643 	.word	0x08004643
 8004574:	080045ff 	.word	0x080045ff
 8004578:	08004643 	.word	0x08004643
 800457c:	08004643 	.word	0x08004643
 8004580:	08004643 	.word	0x08004643
 8004584:	08004643 	.word	0x08004643
 8004588:	08004643 	.word	0x08004643
 800458c:	08004643 	.word	0x08004643
 8004590:	08004643 	.word	0x08004643
 8004594:	0800460f 	.word	0x0800460f
 8004598:	08004643 	.word	0x08004643
 800459c:	08004643 	.word	0x08004643
 80045a0:	08004643 	.word	0x08004643
 80045a4:	08004643 	.word	0x08004643
 80045a8:	08004643 	.word	0x08004643
 80045ac:	08004643 	.word	0x08004643
 80045b0:	08004643 	.word	0x08004643
 80045b4:	08004643 	.word	0x08004643
 80045b8:	08004643 	.word	0x08004643
 80045bc:	08004643 	.word	0x08004643
 80045c0:	08004643 	.word	0x08004643
 80045c4:	08004643 	.word	0x08004643
 80045c8:	08004643 	.word	0x08004643
 80045cc:	08004643 	.word	0x08004643
 80045d0:	08004643 	.word	0x08004643
 80045d4:	08004635 	.word	0x08004635
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d02e      	beq.n	800463a <UART_SetConfig+0x896>
 80045dc:	e031      	b.n	8004642 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045de:	f7fd ffd3 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 80045e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045e4:	e033      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e6:	f7fd ffe5 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 80045ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045ec:	e02f      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ee:	f107 0314 	add.w	r3, r7, #20
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff7a 	bl	80034ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045fc:	e027      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045fe:	f107 0308 	add.w	r3, r7, #8
 8004602:	4618      	mov	r0, r3
 8004604:	f7ff f8c6 	bl	8003794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800460c:	e01f      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800460e:	4b58      	ldr	r3, [pc, #352]	; (8004770 <UART_SetConfig+0x9cc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800461a:	4b55      	ldr	r3, [pc, #340]	; (8004770 <UART_SetConfig+0x9cc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	08db      	lsrs	r3, r3, #3
 8004620:	f003 0303 	and.w	r3, r3, #3
 8004624:	4a53      	ldr	r2, [pc, #332]	; (8004774 <UART_SetConfig+0x9d0>)
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800462c:	e00f      	b.n	800464e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800462e:	4b51      	ldr	r3, [pc, #324]	; (8004774 <UART_SetConfig+0x9d0>)
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004632:	e00c      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004634:	4b4c      	ldr	r3, [pc, #304]	; (8004768 <UART_SetConfig+0x9c4>)
 8004636:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800464c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800464e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80ea 	beq.w	800482a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	4a44      	ldr	r2, [pc, #272]	; (800476c <UART_SetConfig+0x9c8>)
 800465c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004660:	461a      	mov	r2, r3
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	fbb3 f3f2 	udiv	r3, r3, r2
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d916      	bls.n	80046b0 <UART_SetConfig+0x90c>
 8004682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d212      	bcs.n	80046b0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	b29b      	uxth	r3, r3
 800468e:	f023 030f 	bic.w	r3, r3, #15
 8004692:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	b29a      	uxth	r2, r3
 80046a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046a2:	4313      	orrs	r3, r2
 80046a4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e0bc      	b.n	800482a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80046b6:	e0b8      	b.n	800482a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046bc:	2b20      	cmp	r3, #32
 80046be:	dc4b      	bgt.n	8004758 <UART_SetConfig+0x9b4>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f2c0 8087 	blt.w	80047d4 <UART_SetConfig+0xa30>
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	f200 8084 	bhi.w	80047d4 <UART_SetConfig+0xa30>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0x930>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	0800475f 	.word	0x0800475f
 80046d8:	08004779 	.word	0x08004779
 80046dc:	080047d5 	.word	0x080047d5
 80046e0:	080047d5 	.word	0x080047d5
 80046e4:	08004781 	.word	0x08004781
 80046e8:	080047d5 	.word	0x080047d5
 80046ec:	080047d5 	.word	0x080047d5
 80046f0:	080047d5 	.word	0x080047d5
 80046f4:	08004791 	.word	0x08004791
 80046f8:	080047d5 	.word	0x080047d5
 80046fc:	080047d5 	.word	0x080047d5
 8004700:	080047d5 	.word	0x080047d5
 8004704:	080047d5 	.word	0x080047d5
 8004708:	080047d5 	.word	0x080047d5
 800470c:	080047d5 	.word	0x080047d5
 8004710:	080047d5 	.word	0x080047d5
 8004714:	080047a1 	.word	0x080047a1
 8004718:	080047d5 	.word	0x080047d5
 800471c:	080047d5 	.word	0x080047d5
 8004720:	080047d5 	.word	0x080047d5
 8004724:	080047d5 	.word	0x080047d5
 8004728:	080047d5 	.word	0x080047d5
 800472c:	080047d5 	.word	0x080047d5
 8004730:	080047d5 	.word	0x080047d5
 8004734:	080047d5 	.word	0x080047d5
 8004738:	080047d5 	.word	0x080047d5
 800473c:	080047d5 	.word	0x080047d5
 8004740:	080047d5 	.word	0x080047d5
 8004744:	080047d5 	.word	0x080047d5
 8004748:	080047d5 	.word	0x080047d5
 800474c:	080047d5 	.word	0x080047d5
 8004750:	080047d5 	.word	0x080047d5
 8004754:	080047c7 	.word	0x080047c7
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d037      	beq.n	80047cc <UART_SetConfig+0xa28>
 800475c:	e03a      	b.n	80047d4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800475e:	f7fd ff13 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8004762:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004764:	e03c      	b.n	80047e0 <UART_SetConfig+0xa3c>
 8004766:	bf00      	nop
 8004768:	003d0900 	.word	0x003d0900
 800476c:	08004f94 	.word	0x08004f94
 8004770:	58024400 	.word	0x58024400
 8004774:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fd ff1c 	bl	80025b4 <HAL_RCC_GetPCLK2Freq>
 800477c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800477e:	e02f      	b.n	80047e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004780:	f107 0314 	add.w	r3, r7, #20
 8004784:	4618      	mov	r0, r3
 8004786:	f7fe feb1 	bl	80034ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800478e:	e027      	b.n	80047e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004790:	f107 0308 	add.w	r3, r7, #8
 8004794:	4618      	mov	r0, r3
 8004796:	f7fe fffd 	bl	8003794 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800479e:	e01f      	b.n	80047e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b2c      	ldr	r3, [pc, #176]	; (8004854 <UART_SetConfig+0xab0>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80047ac:	4b29      	ldr	r3, [pc, #164]	; (8004854 <UART_SetConfig+0xab0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a28      	ldr	r2, [pc, #160]	; (8004858 <UART_SetConfig+0xab4>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80047be:	e00f      	b.n	80047e0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80047c0:	4b25      	ldr	r3, [pc, #148]	; (8004858 <UART_SetConfig+0xab4>)
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047c4:	e00c      	b.n	80047e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047c6:	4b25      	ldr	r3, [pc, #148]	; (800485c <UART_SetConfig+0xab8>)
 80047c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047ca:	e009      	b.n	80047e0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047d2:	e005      	b.n	80047e0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047de:	bf00      	nop
    }

    if (pclk != 0U)
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d021      	beq.n	800482a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	4a1d      	ldr	r2, [pc, #116]	; (8004860 <UART_SetConfig+0xabc>)
 80047ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047f0:	461a      	mov	r2, r3
 80047f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	085b      	lsrs	r3, r3, #1
 80047fe:	441a      	add	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800480a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480c:	2b0f      	cmp	r3, #15
 800480e:	d909      	bls.n	8004824 <UART_SetConfig+0xa80>
 8004810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004816:	d205      	bcs.n	8004824 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	b29a      	uxth	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60da      	str	r2, [r3, #12]
 8004822:	e002      	b.n	800482a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004846:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800484a:	4618      	mov	r0, r3
 800484c:	3738      	adds	r7, #56	; 0x38
 800484e:	46bd      	mov	sp, r7
 8004850:	bdb0      	pop	{r4, r5, r7, pc}
 8004852:	bf00      	nop
 8004854:	58024400 	.word	0x58024400
 8004858:	03d09000 	.word	0x03d09000
 800485c:	003d0900 	.word	0x003d0900
 8004860:	08004f94 	.word	0x08004f94

08004864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00a      	beq.n	800488e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d00a      	beq.n	80048d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01a      	beq.n	800497a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004962:	d10a      	bne.n	800497a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00a      	beq.n	800499c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	605a      	str	r2, [r3, #4]
  }
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b086      	sub	sp, #24
 80049ac:	af02      	add	r7, sp, #8
 80049ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049b8:	f7fc fabc 	bl	8000f34 <HAL_GetTick>
 80049bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b08      	cmp	r3, #8
 80049ca:	d10e      	bne.n	80049ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 f82f 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e025      	b.n	8004a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b04      	cmp	r3, #4
 80049f6:	d10e      	bne.n	8004a16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f819 	bl	8004a3e <UART_WaitOnFlagUntilTimeout>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d001      	beq.n	8004a16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e00f      	b.n	8004a36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b09c      	sub	sp, #112	; 0x70
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	603b      	str	r3, [r7, #0]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4e:	e0a9      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a56:	f000 80a5 	beq.w	8004ba4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a5a:	f7fc fa6b 	bl	8000f34 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d302      	bcc.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d140      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	e853 3f00 	ldrex	r3, [r3]
 8004a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a84:	667b      	str	r3, [r7, #100]	; 0x64
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1e6      	bne.n	8004a70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	3308      	adds	r3, #8
 8004aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3308      	adds	r3, #8
 8004ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ac2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ac4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aca:	e841 2300 	strex	r3, r2, [r1]
 8004ace:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1e5      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e069      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d051      	beq.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b0e:	d149      	bne.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	461a      	mov	r2, r3
 8004b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b38:	637b      	str	r3, [r7, #52]	; 0x34
 8004b3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e6      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	3308      	adds	r3, #8
 8004b52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	e853 3f00 	ldrex	r3, [r3]
 8004b5a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3308      	adds	r3, #8
 8004b6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b6c:	623a      	str	r2, [r7, #32]
 8004b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b70:	69f9      	ldr	r1, [r7, #28]
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	e841 2300 	strex	r3, r2, [r1]
 8004b78:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1e5      	bne.n	8004b4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e010      	b.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	69da      	ldr	r2, [r3, #28]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	f43f af46 	beq.w	8004a50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3770      	adds	r7, #112	; 0x70
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b085      	sub	sp, #20
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004be0:	2302      	movs	r3, #2
 8004be2:	e027      	b.n	8004c34 <HAL_UARTEx_DisableFifoMode+0x66>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2224      	movs	r2, #36	; 0x24
 8004bf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004c12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d101      	bne.n	8004c58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c54:	2302      	movs	r3, #2
 8004c56:	e02d      	b.n	8004cb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2224      	movs	r2, #36	; 0x24
 8004c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	683a      	ldr	r2, [r7, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f84f 	bl	8004d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004cb2:	2300      	movs	r3, #0
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e02d      	b.n	8004d30 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2224      	movs	r2, #36	; 0x24
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0201 	bic.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f811 	bl	8004d38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2220      	movs	r2, #32
 8004d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d108      	bne.n	8004d5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d58:	e031      	b.n	8004dbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d5a:	2310      	movs	r3, #16
 8004d5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d5e:	2310      	movs	r3, #16
 8004d60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	0e5b      	lsrs	r3, r3, #25
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f003 0307 	and.w	r3, r3, #7
 8004d70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	0f5b      	lsrs	r3, r3, #29
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d82:	7bbb      	ldrb	r3, [r7, #14]
 8004d84:	7b3a      	ldrb	r2, [r7, #12]
 8004d86:	4911      	ldr	r1, [pc, #68]	; (8004dcc <UARTEx_SetNbDataToProcess+0x94>)
 8004d88:	5c8a      	ldrb	r2, [r1, r2]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d8e:	7b3a      	ldrb	r2, [r7, #12]
 8004d90:	490f      	ldr	r1, [pc, #60]	; (8004dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8004d92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d94:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
 8004da2:	7b7a      	ldrb	r2, [r7, #13]
 8004da4:	4909      	ldr	r1, [pc, #36]	; (8004dcc <UARTEx_SetNbDataToProcess+0x94>)
 8004da6:	5c8a      	ldrb	r2, [r1, r2]
 8004da8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004dac:	7b7a      	ldrb	r2, [r7, #13]
 8004dae:	4908      	ldr	r1, [pc, #32]	; (8004dd0 <UARTEx_SetNbDataToProcess+0x98>)
 8004db0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004db2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004dbe:	bf00      	nop
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	08004fac 	.word	0x08004fac
 8004dd0:	08004fb4 	.word	0x08004fb4

08004dd4 <atoi>:
 8004dd4:	220a      	movs	r2, #10
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	f000 b8b6 	b.w	8004f48 <strtol>

08004ddc <__errno>:
 8004ddc:	4b01      	ldr	r3, [pc, #4]	; (8004de4 <__errno+0x8>)
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	24000010 	.word	0x24000010

08004de8 <__libc_init_array>:
 8004de8:	b570      	push	{r4, r5, r6, lr}
 8004dea:	4d0d      	ldr	r5, [pc, #52]	; (8004e20 <__libc_init_array+0x38>)
 8004dec:	4c0d      	ldr	r4, [pc, #52]	; (8004e24 <__libc_init_array+0x3c>)
 8004dee:	1b64      	subs	r4, r4, r5
 8004df0:	10a4      	asrs	r4, r4, #2
 8004df2:	2600      	movs	r6, #0
 8004df4:	42a6      	cmp	r6, r4
 8004df6:	d109      	bne.n	8004e0c <__libc_init_array+0x24>
 8004df8:	4d0b      	ldr	r5, [pc, #44]	; (8004e28 <__libc_init_array+0x40>)
 8004dfa:	4c0c      	ldr	r4, [pc, #48]	; (8004e2c <__libc_init_array+0x44>)
 8004dfc:	f000 f8ae 	bl	8004f5c <_init>
 8004e00:	1b64      	subs	r4, r4, r5
 8004e02:	10a4      	asrs	r4, r4, #2
 8004e04:	2600      	movs	r6, #0
 8004e06:	42a6      	cmp	r6, r4
 8004e08:	d105      	bne.n	8004e16 <__libc_init_array+0x2e>
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e10:	4798      	blx	r3
 8004e12:	3601      	adds	r6, #1
 8004e14:	e7ee      	b.n	8004df4 <__libc_init_array+0xc>
 8004e16:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e1a:	4798      	blx	r3
 8004e1c:	3601      	adds	r6, #1
 8004e1e:	e7f2      	b.n	8004e06 <__libc_init_array+0x1e>
 8004e20:	080050c8 	.word	0x080050c8
 8004e24:	080050c8 	.word	0x080050c8
 8004e28:	080050c8 	.word	0x080050c8
 8004e2c:	080050cc 	.word	0x080050cc

08004e30 <memset>:
 8004e30:	4402      	add	r2, r0
 8004e32:	4603      	mov	r3, r0
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d100      	bne.n	8004e3a <memset+0xa>
 8004e38:	4770      	bx	lr
 8004e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3e:	e7f9      	b.n	8004e34 <memset+0x4>

08004e40 <_strtol_l.isra.0>:
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e46:	d001      	beq.n	8004e4c <_strtol_l.isra.0+0xc>
 8004e48:	2b24      	cmp	r3, #36	; 0x24
 8004e4a:	d906      	bls.n	8004e5a <_strtol_l.isra.0+0x1a>
 8004e4c:	f7ff ffc6 	bl	8004ddc <__errno>
 8004e50:	2316      	movs	r3, #22
 8004e52:	6003      	str	r3, [r0, #0]
 8004e54:	2000      	movs	r0, #0
 8004e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5a:	4f3a      	ldr	r7, [pc, #232]	; (8004f44 <_strtol_l.isra.0+0x104>)
 8004e5c:	468e      	mov	lr, r1
 8004e5e:	4676      	mov	r6, lr
 8004e60:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004e64:	5de5      	ldrb	r5, [r4, r7]
 8004e66:	f015 0508 	ands.w	r5, r5, #8
 8004e6a:	d1f8      	bne.n	8004e5e <_strtol_l.isra.0+0x1e>
 8004e6c:	2c2d      	cmp	r4, #45	; 0x2d
 8004e6e:	d134      	bne.n	8004eda <_strtol_l.isra.0+0x9a>
 8004e70:	f89e 4000 	ldrb.w	r4, [lr]
 8004e74:	f04f 0801 	mov.w	r8, #1
 8004e78:	f106 0e02 	add.w	lr, r6, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d05c      	beq.n	8004f3a <_strtol_l.isra.0+0xfa>
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d10c      	bne.n	8004e9e <_strtol_l.isra.0+0x5e>
 8004e84:	2c30      	cmp	r4, #48	; 0x30
 8004e86:	d10a      	bne.n	8004e9e <_strtol_l.isra.0+0x5e>
 8004e88:	f89e 4000 	ldrb.w	r4, [lr]
 8004e8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e90:	2c58      	cmp	r4, #88	; 0x58
 8004e92:	d14d      	bne.n	8004f30 <_strtol_l.isra.0+0xf0>
 8004e94:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8004e98:	2310      	movs	r3, #16
 8004e9a:	f10e 0e02 	add.w	lr, lr, #2
 8004e9e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8004ea2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004ea6:	2600      	movs	r6, #0
 8004ea8:	fbbc f9f3 	udiv	r9, ip, r3
 8004eac:	4635      	mov	r5, r6
 8004eae:	fb03 ca19 	mls	sl, r3, r9, ip
 8004eb2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8004eb6:	2f09      	cmp	r7, #9
 8004eb8:	d818      	bhi.n	8004eec <_strtol_l.isra.0+0xac>
 8004eba:	463c      	mov	r4, r7
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	dd24      	ble.n	8004f0a <_strtol_l.isra.0+0xca>
 8004ec0:	2e00      	cmp	r6, #0
 8004ec2:	db1f      	blt.n	8004f04 <_strtol_l.isra.0+0xc4>
 8004ec4:	45a9      	cmp	r9, r5
 8004ec6:	d31d      	bcc.n	8004f04 <_strtol_l.isra.0+0xc4>
 8004ec8:	d101      	bne.n	8004ece <_strtol_l.isra.0+0x8e>
 8004eca:	45a2      	cmp	sl, r4
 8004ecc:	db1a      	blt.n	8004f04 <_strtol_l.isra.0+0xc4>
 8004ece:	fb05 4503 	mla	r5, r5, r3, r4
 8004ed2:	2601      	movs	r6, #1
 8004ed4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8004ed8:	e7eb      	b.n	8004eb2 <_strtol_l.isra.0+0x72>
 8004eda:	2c2b      	cmp	r4, #43	; 0x2b
 8004edc:	bf08      	it	eq
 8004ede:	f89e 4000 	ldrbeq.w	r4, [lr]
 8004ee2:	46a8      	mov	r8, r5
 8004ee4:	bf08      	it	eq
 8004ee6:	f106 0e02 	addeq.w	lr, r6, #2
 8004eea:	e7c7      	b.n	8004e7c <_strtol_l.isra.0+0x3c>
 8004eec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8004ef0:	2f19      	cmp	r7, #25
 8004ef2:	d801      	bhi.n	8004ef8 <_strtol_l.isra.0+0xb8>
 8004ef4:	3c37      	subs	r4, #55	; 0x37
 8004ef6:	e7e1      	b.n	8004ebc <_strtol_l.isra.0+0x7c>
 8004ef8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004efc:	2f19      	cmp	r7, #25
 8004efe:	d804      	bhi.n	8004f0a <_strtol_l.isra.0+0xca>
 8004f00:	3c57      	subs	r4, #87	; 0x57
 8004f02:	e7db      	b.n	8004ebc <_strtol_l.isra.0+0x7c>
 8004f04:	f04f 36ff 	mov.w	r6, #4294967295
 8004f08:	e7e4      	b.n	8004ed4 <_strtol_l.isra.0+0x94>
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	da05      	bge.n	8004f1a <_strtol_l.isra.0+0xda>
 8004f0e:	2322      	movs	r3, #34	; 0x22
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	4665      	mov	r5, ip
 8004f14:	b942      	cbnz	r2, 8004f28 <_strtol_l.isra.0+0xe8>
 8004f16:	4628      	mov	r0, r5
 8004f18:	e79d      	b.n	8004e56 <_strtol_l.isra.0+0x16>
 8004f1a:	f1b8 0f00 	cmp.w	r8, #0
 8004f1e:	d000      	beq.n	8004f22 <_strtol_l.isra.0+0xe2>
 8004f20:	426d      	negs	r5, r5
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	d0f7      	beq.n	8004f16 <_strtol_l.isra.0+0xd6>
 8004f26:	b10e      	cbz	r6, 8004f2c <_strtol_l.isra.0+0xec>
 8004f28:	f10e 31ff 	add.w	r1, lr, #4294967295
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	e7f2      	b.n	8004f16 <_strtol_l.isra.0+0xd6>
 8004f30:	2430      	movs	r4, #48	; 0x30
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1b3      	bne.n	8004e9e <_strtol_l.isra.0+0x5e>
 8004f36:	2308      	movs	r3, #8
 8004f38:	e7b1      	b.n	8004e9e <_strtol_l.isra.0+0x5e>
 8004f3a:	2c30      	cmp	r4, #48	; 0x30
 8004f3c:	d0a4      	beq.n	8004e88 <_strtol_l.isra.0+0x48>
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e7ad      	b.n	8004e9e <_strtol_l.isra.0+0x5e>
 8004f42:	bf00      	nop
 8004f44:	08004fbd 	.word	0x08004fbd

08004f48 <strtol>:
 8004f48:	4613      	mov	r3, r2
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	4601      	mov	r1, r0
 8004f4e:	4802      	ldr	r0, [pc, #8]	; (8004f58 <strtol+0x10>)
 8004f50:	6800      	ldr	r0, [r0, #0]
 8004f52:	f7ff bf75 	b.w	8004e40 <_strtol_l.isra.0>
 8004f56:	bf00      	nop
 8004f58:	24000010 	.word	0x24000010

08004f5c <_init>:
 8004f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f5e:	bf00      	nop
 8004f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f62:	bc08      	pop	{r3}
 8004f64:	469e      	mov	lr, r3
 8004f66:	4770      	bx	lr

08004f68 <_fini>:
 8004f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f6a:	bf00      	nop
 8004f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6e:	bc08      	pop	{r3}
 8004f70:	469e      	mov	lr, r3
 8004f72:	4770      	bx	lr
