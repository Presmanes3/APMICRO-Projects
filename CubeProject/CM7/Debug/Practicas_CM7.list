
Practicas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b8c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004e24  08004e24  00014e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e64  08004e64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004e7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004e7c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7b6  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002842  00000000  00000000  0003a7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0003d038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a50  00000000  00000000  0003db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00041092  00000000  00000000  0003e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eee4  00000000  00000000  0007f612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197383  00000000  00000000  0008e4f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00225879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cac  00000000  00000000  002258cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004e0c 	.word	0x08004e0c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004e0c 	.word	0x08004e0c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <_Z9Practica1v>:
 * */
#define GPIO_K_MODE_VAL (0xFFFFC00F)

int test = 0;

void Practica1() {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

	// Ejercicio 1.1
	RCC_AHB4ENR |= GPIO_I_EN;
 800070a:	4b4b      	ldr	r3, [pc, #300]	; (8000838 <_Z9Practica1v+0x134>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a4a      	ldr	r2, [pc, #296]	; (8000838 <_Z9Practica1v+0x134>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000714:	6013      	str	r3, [r2, #0]
	RCC_AHB4ENR |= GPIO_K_EN;
 8000716:	4b48      	ldr	r3, [pc, #288]	; (8000838 <_Z9Practica1v+0x134>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a47      	ldr	r2, [pc, #284]	; (8000838 <_Z9Practica1v+0x134>)
 800071c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000720:	6013      	str	r3, [r2, #0]

	// Ejercicio 1.2
	GPIOI_MODER = GPIO_I_MODE_VAL;
 8000722:	4b46      	ldr	r3, [pc, #280]	; (800083c <_Z9Practica1v+0x138>)
 8000724:	f06f 422a 	mvn.w	r2, #2852126720	; 0xaa000000
 8000728:	601a      	str	r2, [r3, #0]

	// Ejercicio 1.3

	for (uint8_t x = 0; x < 4; x++) {
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b03      	cmp	r3, #3
 8000732:	d839      	bhi.n	80007a8 <_Z9Practica1v+0xa4>
		GPIOI_ODR |= (1 << 15);
 8000734:	4b42      	ldr	r3, [pc, #264]	; (8000840 <_Z9Practica1v+0x13c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a41      	ldr	r2, [pc, #260]	; (8000840 <_Z9Practica1v+0x13c>)
 800073a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073e:	6013      	str	r3, [r2, #0]
		GPIOI_ODR |= (1 << 14);
 8000740:	4b3f      	ldr	r3, [pc, #252]	; (8000840 <_Z9Practica1v+0x13c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a3e      	ldr	r2, [pc, #248]	; (8000840 <_Z9Practica1v+0x13c>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800074a:	6013      	str	r3, [r2, #0]
		GPIOI_ODR |= (1 << 13);
 800074c:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <_Z9Practica1v+0x13c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <_Z9Practica1v+0x13c>)
 8000752:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000756:	6013      	str	r3, [r2, #0]
		GPIOI_ODR |= (1 << 12);
 8000758:	4b39      	ldr	r3, [pc, #228]	; (8000840 <_Z9Practica1v+0x13c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a38      	ldr	r2, [pc, #224]	; (8000840 <_Z9Practica1v+0x13c>)
 800075e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000762:	6013      	str	r3, [r2, #0]

		HAL_Delay(250);
 8000764:	20fa      	movs	r0, #250	; 0xfa
 8000766:	f000 fbbd 	bl	8000ee4 <HAL_Delay>

		GPIOI_ODR &= ~(1 << 15);
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <_Z9Practica1v+0x13c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <_Z9Practica1v+0x13c>)
 8000770:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000774:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 14);
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <_Z9Practica1v+0x13c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a31      	ldr	r2, [pc, #196]	; (8000840 <_Z9Practica1v+0x13c>)
 800077c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000780:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 13);
 8000782:	4b2f      	ldr	r3, [pc, #188]	; (8000840 <_Z9Practica1v+0x13c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <_Z9Practica1v+0x13c>)
 8000788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800078c:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 12);
 800078e:	4b2c      	ldr	r3, [pc, #176]	; (8000840 <_Z9Practica1v+0x13c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a2b      	ldr	r2, [pc, #172]	; (8000840 <_Z9Practica1v+0x13c>)
 8000794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000798:	6013      	str	r3, [r2, #0]

		HAL_Delay(250);
 800079a:	20fa      	movs	r0, #250	; 0xfa
 800079c:	f000 fba2 	bl	8000ee4 <HAL_Delay>
	for (uint8_t x = 0; x < 4; x++) {
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	3301      	adds	r3, #1
 80007a4:	71fb      	strb	r3, [r7, #7]
 80007a6:	e7c2      	b.n	800072e <_Z9Practica1v+0x2a>
	}

	// Ejercicio 1.4
	GPIOK_PUPDR = GPIO_K_PUPDR_VAL;
 80007a8:	4b26      	ldr	r3, [pc, #152]	; (8000844 <_Z9Practica1v+0x140>)
 80007aa:	f241 5250 	movw	r2, #5456	; 0x1550
 80007ae:	601a      	str	r2, [r3, #0]
	GPIOK_MODER = GPIO_K_MODE_VAL;
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <_Z9Practica1v+0x144>)
 80007b2:	4a26      	ldr	r2, [pc, #152]	; (800084c <_Z9Practica1v+0x148>)
 80007b4:	601a      	str	r2, [r3, #0]

	// Ejercicio 1.5

	while (1) {
		GPIOI_ODR |= ((GPIOK_IDR >> 6) << 15);
 80007b6:	4b26      	ldr	r3, [pc, #152]	; (8000850 <_Z9Practica1v+0x14c>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	099b      	lsrs	r3, r3, #6
 80007bc:	03da      	lsls	r2, r3, #15
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <_Z9Practica1v+0x13c>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	491f      	ldr	r1, [pc, #124]	; (8000840 <_Z9Practica1v+0x13c>)
 80007c4:	4313      	orrs	r3, r2
 80007c6:	600b      	str	r3, [r1, #0]
		GPIOI_ODR |= ((GPIOK_IDR >> 5) << 14);
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <_Z9Practica1v+0x14c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	095b      	lsrs	r3, r3, #5
 80007ce:	039a      	lsls	r2, r3, #14
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <_Z9Practica1v+0x13c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	491a      	ldr	r1, [pc, #104]	; (8000840 <_Z9Practica1v+0x13c>)
 80007d6:	4313      	orrs	r3, r2
 80007d8:	600b      	str	r3, [r1, #0]
		GPIOI_ODR |= ((GPIOK_IDR >> 4) << 13);
 80007da:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <_Z9Practica1v+0x14c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	091b      	lsrs	r3, r3, #4
 80007e0:	035a      	lsls	r2, r3, #13
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <_Z9Practica1v+0x13c>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4916      	ldr	r1, [pc, #88]	; (8000840 <_Z9Practica1v+0x13c>)
 80007e8:	4313      	orrs	r3, r2
 80007ea:	600b      	str	r3, [r1, #0]
		GPIOI_ODR |= ((GPIOK_IDR >> 3) << 12);
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <_Z9Practica1v+0x14c>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	08db      	lsrs	r3, r3, #3
 80007f2:	031a      	lsls	r2, r3, #12
 80007f4:	4b12      	ldr	r3, [pc, #72]	; (8000840 <_Z9Practica1v+0x13c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4911      	ldr	r1, [pc, #68]	; (8000840 <_Z9Practica1v+0x13c>)
 80007fa:	4313      	orrs	r3, r2
 80007fc:	600b      	str	r3, [r1, #0]

		HAL_Delay(1);
 80007fe:	2001      	movs	r0, #1
 8000800:	f000 fb70 	bl	8000ee4 <HAL_Delay>

		GPIOI_ODR &= ~(1 << 15);
 8000804:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <_Z9Practica1v+0x13c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a0d      	ldr	r2, [pc, #52]	; (8000840 <_Z9Practica1v+0x13c>)
 800080a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800080e:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 14);
 8000810:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <_Z9Practica1v+0x13c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <_Z9Practica1v+0x13c>)
 8000816:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800081a:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 13);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <_Z9Practica1v+0x13c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	; (8000840 <_Z9Practica1v+0x13c>)
 8000822:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000826:	6013      	str	r3, [r2, #0]
		GPIOI_ODR &= ~(1 << 12);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <_Z9Practica1v+0x13c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a04      	ldr	r2, [pc, #16]	; (8000840 <_Z9Practica1v+0x13c>)
 800082e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000832:	6013      	str	r3, [r2, #0]
		GPIOI_ODR |= ((GPIOK_IDR >> 6) << 15);
 8000834:	e7bf      	b.n	80007b6 <_Z9Practica1v+0xb2>
 8000836:	bf00      	nop
 8000838:	580244e0 	.word	0x580244e0
 800083c:	58022000 	.word	0x58022000
 8000840:	58022014 	.word	0x58022014
 8000844:	5802280c 	.word	0x5802280c
 8000848:	58022800 	.word	0x58022800
 800084c:	ffffc00f 	.word	0xffffc00f
 8000850:	58022810 	.word	0x58022810

08000854 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800085a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800085e:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0xb0>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000868:	2b00      	cmp	r3, #0
 800086a:	d006      	beq.n	800087a <main+0x26>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	1e5a      	subs	r2, r3, #1
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	dd01      	ble.n	800087a <main+0x26>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <main+0x28>
 800087a:	2300      	movs	r3, #0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d000      	beq.n	8000882 <main+0x2e>
 8000880:	e7ee      	b.n	8000860 <main+0xc>
		;
	if (timeout < 0) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2b00      	cmp	r3, #0
 8000886:	da01      	bge.n	800088c <main+0x38>
		Error_Handler();
 8000888:	f000 f9c0 	bl	8000c0c <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800088c:	f000 fa98 	bl	8000dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000890:	f000 f83a 	bl	8000908 <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000894:	f000 f8d6 	bl	8000a44 <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000898:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <main+0xb0>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800089e:	4a19      	ldr	r2, [pc, #100]	; (8000904 <main+0xb0>)
 80008a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <main+0xb0>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80008b6:	2000      	movs	r0, #0
 80008b8:	f000 fdd8 	bl	800146c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 80008bc:	2100      	movs	r1, #0
 80008be:	2000      	movs	r0, #0
 80008c0:	f000 fdee 	bl	80014a0 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80008c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008c8:	607b      	str	r3, [r7, #4]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <main+0xb0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d106      	bne.n	80008e4 <main+0x90>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	dd01      	ble.n	80008e4 <main+0x90>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <main+0x92>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d000      	beq.n	80008ec <main+0x98>
 80008ea:	e7ee      	b.n	80008ca <main+0x76>
		;
	if (timeout < 0) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	da01      	bge.n	80008f6 <main+0xa2>
		Error_Handler();
 80008f2:	f000 f98b 	bl	8000c0c <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80008f6:	f000 f937 	bl	8000b68 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 80008fa:	f000 f8d5 	bl	8000aa8 <_ZL19MX_USART1_UART_Initv>
	/* USER CODE BEGIN 2 */

	Practica1();
 80008fe:	f7ff ff01 	bl	8000704 <_Z9Practica1v>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000902:	e7fe      	b.n	8000902 <main+0xae>
 8000904:	58024400 	.word	0x58024400

08000908 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	; 0x70
 800090c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	224c      	movs	r2, #76	; 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f004 fa70 	bl	8004dfc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2220      	movs	r2, #32
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f004 fa6a 	bl	8004dfc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000928:	2004      	movs	r0, #4
 800092a:	f000 fdcd 	bl	80014c8 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800092e:	2300      	movs	r3, #0
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	4b41      	ldr	r3, [pc, #260]	; (8000a38 <_Z18SystemClock_Configv+0x130>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	4a40      	ldr	r2, [pc, #256]	; (8000a38 <_Z18SystemClock_Configv+0x130>)
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800093e:	4b3e      	ldr	r3, [pc, #248]	; (8000a38 <_Z18SystemClock_Configv+0x130>)
 8000940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b3c      	ldr	r3, [pc, #240]	; (8000a3c <_Z18SystemClock_Configv+0x134>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a3b      	ldr	r2, [pc, #236]	; (8000a3c <_Z18SystemClock_Configv+0x134>)
 800094e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b39      	ldr	r3, [pc, #228]	; (8000a3c <_Z18SystemClock_Configv+0x134>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000960:	4b36      	ldr	r3, [pc, #216]	; (8000a3c <_Z18SystemClock_Configv+0x134>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800096c:	bf14      	ite	ne
 800096e:	2301      	movne	r3, #1
 8000970:	2300      	moveq	r3, #0
 8000972:	b2db      	uxtb	r3, r3
 8000974:	2b00      	cmp	r3, #0
 8000976:	d000      	beq.n	800097a <_Z18SystemClock_Configv+0x72>
 8000978:	e7f2      	b.n	8000960 <_Z18SystemClock_Configv+0x58>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800097a:	4b31      	ldr	r3, [pc, #196]	; (8000a40 <_Z18SystemClock_Configv+0x138>)
 800097c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800097e:	f023 0303 	bic.w	r3, r3, #3
 8000982:	4a2f      	ldr	r2, [pc, #188]	; (8000a40 <_Z18SystemClock_Configv+0x138>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 800098a:	230b      	movs	r3, #11
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000994:	2301      	movs	r3, #1
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2340      	movs	r3, #64	; 0x40
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800099c:	2301      	movs	r3, #1
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a4:	2302      	movs	r3, #2
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 80009a8:	2305      	movs	r3, #5
 80009aa:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 80009ac:	2330      	movs	r3, #48	; 0x30
 80009ae:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80009b4:	2305      	movs	r3, #5
 80009b6:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009bc:	2308      	movs	r3, #8
 80009be:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fdd5 	bl	800157c <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <_Z18SystemClock_Configv+0xde>
		Error_Handler();
 80009e2:	f000 f913 	bl	8000c0c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 80009e6:	233f      	movs	r3, #63	; 0x3f
 80009e8:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f9e2 	bl	8001dd4 <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	bf14      	ite	ne
 8000a16:	2301      	movne	r3, #1
 8000a18:	2300      	moveq	r3, #0
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <_Z18SystemClock_Configv+0x11c>
		Error_Handler();
 8000a20:	f000 f8f4 	bl	8000c0c <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000a24:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a28:	2100      	movs	r1, #0
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 fb88 	bl	8002140 <HAL_RCC_MCOConfig>
}
 8000a30:	bf00      	nop
 8000a32:	3770      	adds	r7, #112	; 0x70
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	58000400 	.word	0x58000400
 8000a3c:	58024800 	.word	0x58024800
 8000a40:	58024400 	.word	0x58024400

08000a44 <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0b0      	sub	sp, #192	; 0xc0
 8000a48:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	22c0      	movs	r2, #192	; 0xc0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 f9d3 	bl	8004dfc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000a5a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a60:	230c      	movs	r3, #12
 8000a62:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a70:	23c0      	movs	r3, #192	; 0xc0
 8000a72:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a74:	2320      	movs	r3, #32
 8000a76:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000a82:	463b      	mov	r3, r7
 8000a84:	4618      	mov	r0, r3
 8000a86:	f001 fd9b 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf14      	ite	ne
 8000a90:	2301      	movne	r3, #1
 8000a92:	2300      	moveq	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <_Z24PeriphCommonClock_Configv+0x5a>
		Error_Handler();
 8000a9a:	f000 f8b7 	bl	8000c0c <Error_Handler>
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	37c0      	adds	r7, #192	; 0xc0
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000aae:	4a2d      	ldr	r2, [pc, #180]	; (8000b64 <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000ab0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000af0:	481b      	ldr	r0, [pc, #108]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000af2:	f003 f8f7 	bl	8003ce4 <HAL_UART_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	bf14      	ite	ne
 8000afc:	2301      	movne	r3, #1
 8000afe:	2300      	moveq	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 8000b06:	f000 f881 	bl	8000c0c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b0e:	f004 f887 	bl	8004c20 <HAL_UARTEx_SetTxFifoThreshold>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	bf14      	ite	ne
 8000b18:	2301      	movne	r3, #1
 8000b1a:	2300      	moveq	r3, #0
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 8000b22:	f000 f873 	bl	8000c0c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000b26:	2100      	movs	r1, #0
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b2a:	f004 f8b7 	bl	8004c9c <HAL_UARTEx_SetRxFifoThreshold>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	bf14      	ite	ne
 8000b34:	2301      	movne	r3, #1
 8000b36:	2300      	moveq	r3, #0
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 8000b3e:	f000 f865 	bl	8000c0c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000b42:	4807      	ldr	r0, [pc, #28]	; (8000b60 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000b44:	f004 f833 	bl	8004bae <HAL_UARTEx_DisableFifoMode>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	bf14      	ite	ne
 8000b4e:	2301      	movne	r3, #1
 8000b50:	2300      	moveq	r3, #0
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 8000b58:	f000 f858 	bl	8000c0c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2400002c 	.word	0x2400002c
 8000b64:	40011000 	.word	0x40011000

08000b68 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b21      	ldr	r3, [pc, #132]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a1f      	ldr	r2, [pc, #124]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b19      	ldr	r3, [pc, #100]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4b15      	ldr	r3, [pc, #84]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <_ZL12MX_GPIO_Initv+0x9c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bdc:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <_ZL12MX_GPIO_Initv+0xa0>)
 8000bf6:	f000 fa89 	bl	800110c <HAL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020000 	.word	0x58020000

08000c0c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ba      	sub	sp, #232	; 0xe8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	22c0      	movs	r2, #192	; 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 f8c5 	bl	8004dfc <memset>
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a25      	ldr	r2, [pc, #148]	; (8000d0c <HAL_UART_MspInit+0xc0>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d142      	bne.n	8000d02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f001 fc98 	bl	80025c0 <HAL_RCCEx_PeriphCLKConfig>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c96:	f7ff ffb9 	bl	8000c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000ca2:	f043 0310 	orr.w	r3, r3, #16
 8000ca6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000caa:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cbe:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc8:	4b11      	ldr	r3, [pc, #68]	; (8000d10 <HAL_UART_MspInit+0xc4>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000cd6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000cda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cea:	2300      	movs	r3, #0
 8000cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0xc8>)
 8000cfe:	f000 fa05 	bl	800110c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37e8      	adds	r7, #232	; 0xe8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	58024400 	.word	0x58024400
 8000d14:	58020000 	.word	0x58020000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d64:	f000 f89e 	bl	8000ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000da4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d70:	f7ff fc2e 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	480c      	ldr	r0, [pc, #48]	; (8000da8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d76:	490d      	ldr	r1, [pc, #52]	; (8000dac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d78:	4a0d      	ldr	r2, [pc, #52]	; (8000db0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a0a      	ldr	r2, [pc, #40]	; (8000db4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d8c:	4c0a      	ldr	r4, [pc, #40]	; (8000db8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d9a:	f004 f80b 	bl	8004db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d9e:	f7ff fd59 	bl	8000854 <main>
  bx  lr
 8000da2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000da4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000da8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000db0:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 8000db4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000db8:	240000c0 	.word	0x240000c0

08000dbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dbc:	e7fe      	b.n	8000dbc <ADC3_IRQHandler>
	...

08000dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc6:	2003      	movs	r0, #3
 8000dc8:	f000 f96e 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000dcc:	f001 fa22 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	4b15      	ldr	r3, [pc, #84]	; (8000e28 <HAL_Init+0x68>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	4913      	ldr	r1, [pc, #76]	; (8000e2c <HAL_Init+0x6c>)
 8000dde:	5ccb      	ldrb	r3, [r1, r3]
 8000de0:	f003 031f 	and.w	r3, r3, #31
 8000de4:	fa22 f303 	lsr.w	r3, r2, r3
 8000de8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000dea:	4b0f      	ldr	r3, [pc, #60]	; (8000e28 <HAL_Init+0x68>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_Init+0x6c>)
 8000df4:	5cd3      	ldrb	r3, [r2, r3]
 8000df6:	f003 031f 	and.w	r3, r3, #31
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_Init+0x70>)
 8000e02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e04:	4a0b      	ldr	r2, [pc, #44]	; (8000e34 <HAL_Init+0x74>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f000 f814 	bl	8000e38 <HAL_InitTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e002      	b.n	8000e20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1a:	f7ff fefd 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1e:	2300      	movs	r3, #0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	08004e24 	.word	0x08004e24
 8000e30:	24000004 	.word	0x24000004
 8000e34:	24000000 	.word	0x24000000

08000e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e40:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <HAL_InitTick+0x60>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e021      	b.n	8000e90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <HAL_InitTick+0x64>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b11      	ldr	r3, [pc, #68]	; (8000e98 <HAL_InitTick+0x60>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4619      	mov	r1, r3
 8000e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f945 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00e      	b.n	8000e90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2b0f      	cmp	r3, #15
 8000e76:	d80a      	bhi.n	8000e8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	6879      	ldr	r1, [r7, #4]
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f000 f91d 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e84:	4a06      	ldr	r2, [pc, #24]	; (8000ea0 <HAL_InitTick+0x68>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e000      	b.n	8000e90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	2400000c 	.word	0x2400000c
 8000e9c:	24000000 	.word	0x24000000
 8000ea0:	24000008 	.word	0x24000008

08000ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x20>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_IncTick+0x24>)
 8000eb6:	6013      	str	r3, [r2, #0]
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	2400000c 	.word	0x2400000c
 8000ec8:	240000bc 	.word	0x240000bc

08000ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed0:	4b03      	ldr	r3, [pc, #12]	; (8000ee0 <HAL_GetTick+0x14>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	240000bc 	.word	0x240000bc

08000ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000eec:	f7ff ffee 	bl	8000ecc <HAL_GetTick>
 8000ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efc:	d005      	beq.n	8000f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efe:	4b0a      	ldr	r3, [pc, #40]	; (8000f28 <HAL_Delay+0x44>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4413      	add	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f0a:	bf00      	nop
 8000f0c:	f7ff ffde 	bl	8000ecc <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d8f7      	bhi.n	8000f0c <HAL_Delay+0x28>
  {
  }
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	2400000c 	.word	0x2400000c

08000f2c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetREVID+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	0c1b      	lsrs	r3, r3, #16
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	5c001000 	.word	0x5c001000

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x40>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00
 8000f88:	05fa0000 	.word	0x05fa0000

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	88fb      	ldrh	r3, [r7, #6]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb2 	bl	8001064 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b089      	sub	sp, #36	; 0x24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800111a:	4b89      	ldr	r3, [pc, #548]	; (8001340 <HAL_GPIO_Init+0x234>)
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800111e:	e194      	b.n	800144a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8186 	beq.w	8001444 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x44>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0303 	and.w	r3, r3, #3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	43db      	mvns	r3, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4013      	ands	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	69fb      	ldr	r3, [r7, #28]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	f003 0201 	and.w	r2, r3, #1
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f003 0303 	and.w	r3, r3, #3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	43db      	mvns	r3, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4013      	ands	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	fa02 f303 	lsl.w	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	69b9      	ldr	r1, [r7, #24]
 800123e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0203 	and.w	r2, r3, #3
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	4313      	orrs	r3, r2
 800126e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 80e0 	beq.w	8001444 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001284:	4b2f      	ldr	r3, [pc, #188]	; (8001344 <HAL_GPIO_Init+0x238>)
 8001286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800128a:	4a2e      	ldr	r2, [pc, #184]	; (8001344 <HAL_GPIO_Init+0x238>)
 800128c:	f043 0302 	orr.w	r3, r3, #2
 8001290:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_GPIO_Init+0x238>)
 8001296:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012a2:	4a29      	ldr	r2, [pc, #164]	; (8001348 <HAL_GPIO_Init+0x23c>)
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	3302      	adds	r3, #2
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_GPIO_Init+0x240>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d052      	beq.n	8001374 <HAL_GPIO_Init+0x268>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_GPIO_Init+0x244>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d031      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_GPIO_Init+0x248>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d02b      	beq.n	8001336 <HAL_GPIO_Init+0x22a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	; (8001358 <HAL_GPIO_Init+0x24c>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x226>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a1c      	ldr	r2, [pc, #112]	; (800135c <HAL_GPIO_Init+0x250>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x222>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <HAL_GPIO_Init+0x254>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x21e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a1a      	ldr	r2, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x258>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x21a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a19      	ldr	r2, [pc, #100]	; (8001368 <HAL_GPIO_Init+0x25c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x216>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a18      	ldr	r2, [pc, #96]	; (800136c <HAL_GPIO_Init+0x260>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x212>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_GPIO_Init+0x264>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x20e>
 8001316:	2309      	movs	r3, #9
 8001318:	e02d      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800131a:	230a      	movs	r3, #10
 800131c:	e02b      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800131e:	2308      	movs	r3, #8
 8001320:	e029      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001322:	2307      	movs	r3, #7
 8001324:	e027      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001326:	2306      	movs	r3, #6
 8001328:	e025      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800132a:	2305      	movs	r3, #5
 800132c:	e023      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800132e:	2304      	movs	r3, #4
 8001330:	e021      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001332:	2303      	movs	r3, #3
 8001334:	e01f      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 8001336:	2302      	movs	r3, #2
 8001338:	e01d      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800133a:	2301      	movs	r3, #1
 800133c:	e01b      	b.n	8001376 <HAL_GPIO_Init+0x26a>
 800133e:	bf00      	nop
 8001340:	58000080 	.word	0x58000080
 8001344:	58024400 	.word	0x58024400
 8001348:	58000400 	.word	0x58000400
 800134c:	58020000 	.word	0x58020000
 8001350:	58020400 	.word	0x58020400
 8001354:	58020800 	.word	0x58020800
 8001358:	58020c00 	.word	0x58020c00
 800135c:	58021000 	.word	0x58021000
 8001360:	58021400 	.word	0x58021400
 8001364:	58021800 	.word	0x58021800
 8001368:	58021c00 	.word	0x58021c00
 800136c:	58022000 	.word	0x58022000
 8001370:	58022400 	.word	0x58022400
 8001374:	2300      	movs	r3, #0
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4313      	orrs	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001386:	4938      	ldr	r1, [pc, #224]	; (8001468 <HAL_GPIO_Init+0x35c>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80013ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80013e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	3301      	adds	r3, #1
 8001448:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa22 f303 	lsr.w	r3, r2, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	f47f ae63 	bne.w	8001120 <HAL_GPIO_Init+0x14>
  }
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	3724      	adds	r7, #36	; 0x24
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	58000400 	.word	0x58000400

0800146c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001474:	4a08      	ldr	r2, [pc, #32]	; (8001498 <HAL_HSEM_FastTake+0x2c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3320      	adds	r3, #32
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_HSEM_FastTake+0x30>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d101      	bne.n	8001488 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001484:	2300      	movs	r3, #0
 8001486:	e000      	b.n	800148a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	58026400 	.word	0x58026400
 800149c:	80000300 	.word	0x80000300

080014a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80014aa:	4906      	ldr	r1, [pc, #24]	; (80014c4 <HAL_HSEM_Release+0x24>)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58026400 	.word	0x58026400

080014c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80014d0:	4b29      	ldr	r3, [pc, #164]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	2b06      	cmp	r3, #6
 80014da:	d00a      	beq.n	80014f2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80014dc:	4b26      	ldr	r3, [pc, #152]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d001      	beq.n	80014ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e040      	b.n	8001570 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e03e      	b.n	8001570 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80014fa:	491f      	ldr	r1, [pc, #124]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4313      	orrs	r3, r2
 8001500:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001502:	f7ff fce3 	bl	8000ecc <HAL_GetTick>
 8001506:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001508:	e009      	b.n	800151e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800150a:	f7ff fcdf 	bl	8000ecc <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001518:	d901      	bls.n	800151e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e028      	b.n	8001570 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800151e:	4b16      	ldr	r3, [pc, #88]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800152a:	d1ee      	bne.n	800150a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b1e      	cmp	r3, #30
 8001530:	d008      	beq.n	8001544 <HAL_PWREx_ConfigSupply+0x7c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b2e      	cmp	r3, #46	; 0x2e
 8001536:	d005      	beq.n	8001544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b1d      	cmp	r3, #29
 800153c:	d002      	beq.n	8001544 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b2d      	cmp	r3, #45	; 0x2d
 8001542:	d114      	bne.n	800156e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001544:	f7ff fcc2 	bl	8000ecc <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800154a:	e009      	b.n	8001560 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800154c:	f7ff fcbe 	bl	8000ecc <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800155a:	d901      	bls.n	8001560 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e007      	b.n	8001570 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <HAL_PWREx_ConfigSupply+0xb0>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	d1ee      	bne.n	800154c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58024800 	.word	0x58024800

0800157c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	f000 bc1c 	b.w	8001dc8 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 8087 	beq.w	80016ac <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	4b9e      	ldr	r3, [pc, #632]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015a0:	691b      	ldr	r3, [r3, #16]
 80015a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015a8:	4b9b      	ldr	r3, [pc, #620]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	2b10      	cmp	r3, #16
 80015b2:	d007      	beq.n	80015c4 <HAL_RCC_OscConfig+0x48>
 80015b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b6:	2b18      	cmp	r3, #24
 80015b8:	d110      	bne.n	80015dc <HAL_RCC_OscConfig+0x60>
 80015ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015bc:	f003 0303 	and.w	r3, r3, #3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d10b      	bne.n	80015dc <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c4:	4b94      	ldr	r3, [pc, #592]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d06c      	beq.n	80016aa <HAL_RCC_OscConfig+0x12e>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d168      	bne.n	80016aa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e3f5      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x78>
 80015e6:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a8b      	ldr	r2, [pc, #556]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	e02e      	b.n	8001652 <HAL_RCC_OscConfig+0xd6>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x9a>
 80015fc:	4b86      	ldr	r3, [pc, #536]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a85      	ldr	r2, [pc, #532]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b83      	ldr	r3, [pc, #524]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a82      	ldr	r2, [pc, #520]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800160e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	e01d      	b.n	8001652 <HAL_RCC_OscConfig+0xd6>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0xbe>
 8001620:	4b7d      	ldr	r3, [pc, #500]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a7c      	ldr	r2, [pc, #496]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001626:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	4b7a      	ldr	r3, [pc, #488]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a79      	ldr	r2, [pc, #484]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	e00b      	b.n	8001652 <HAL_RCC_OscConfig+0xd6>
 800163a:	4b77      	ldr	r3, [pc, #476]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a76      	ldr	r2, [pc, #472]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001640:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b74      	ldr	r3, [pc, #464]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a73      	ldr	r2, [pc, #460]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800164c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001650:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d013      	beq.n	8001682 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7ff fc37 	bl	8000ecc <HAL_GetTick>
 800165e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001662:	f7ff fc33 	bl	8000ecc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b64      	cmp	r3, #100	; 0x64
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e3a9      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001674:	4b68      	ldr	r3, [pc, #416]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0xe6>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff fc23 	bl	8000ecc <HAL_GetTick>
 8001686:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800168a:	f7ff fc1f 	bl	8000ecc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	; 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e395      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800169c:	4b5e      	ldr	r3, [pc, #376]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x10e>
 80016a8:	e000      	b.n	80016ac <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016aa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 80ca 	beq.w	800184e <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	4b57      	ldr	r3, [pc, #348]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016c2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80016c4:	4b54      	ldr	r3, [pc, #336]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d007      	beq.n	80016e0 <HAL_RCC_OscConfig+0x164>
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b18      	cmp	r3, #24
 80016d4:	d156      	bne.n	8001784 <HAL_RCC_OscConfig+0x208>
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	f003 0303 	and.w	r3, r3, #3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d151      	bne.n	8001784 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016e0:	4b4d      	ldr	r3, [pc, #308]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_OscConfig+0x17c>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e367      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016f8:	4b47      	ldr	r3, [pc, #284]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f023 0219 	bic.w	r2, r3, #25
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4944      	ldr	r1, [pc, #272]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800170a:	f7ff fbdf 	bl	8000ecc <HAL_GetTick>
 800170e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001710:	e008      	b.n	8001724 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001712:	f7ff fbdb 	bl	8000ecc <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d901      	bls.n	8001724 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001720:	2303      	movs	r3, #3
 8001722:	e351      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0304 	and.w	r3, r3, #4
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f0      	beq.n	8001712 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	f7ff fbfc 	bl	8000f2c <HAL_GetREVID>
 8001734:	4603      	mov	r3, r0
 8001736:	f241 0203 	movw	r2, #4099	; 0x1003
 800173a:	4293      	cmp	r3, r2
 800173c:	d817      	bhi.n	800176e <HAL_RCC_OscConfig+0x1f2>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b40      	cmp	r3, #64	; 0x40
 8001744:	d108      	bne.n	8001758 <HAL_RCC_OscConfig+0x1dc>
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800174e:	4a32      	ldr	r2, [pc, #200]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001756:	e07a      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001758:	4b2f      	ldr	r3, [pc, #188]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	031b      	lsls	r3, r3, #12
 8001766:	492c      	ldr	r1, [pc, #176]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001768:	4313      	orrs	r3, r2
 800176a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800176c:	e06f      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	4926      	ldr	r1, [pc, #152]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001782:	e064      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d047      	beq.n	800181c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178c:	4b22      	ldr	r3, [pc, #136]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 0219 	bic.w	r2, r3, #25
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	491f      	ldr	r1, [pc, #124]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fb95 	bl	8000ecc <HAL_GetTick>
 80017a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb91 	bl	8000ecc <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e307      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b8:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	f7ff fbb2 	bl	8000f2c <HAL_GetREVID>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d817      	bhi.n	8001802 <HAL_RCC_OscConfig+0x286>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b40      	cmp	r3, #64	; 0x40
 80017d8:	d108      	bne.n	80017ec <HAL_RCC_OscConfig+0x270>
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017e2:	4a0d      	ldr	r2, [pc, #52]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80017e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e8:	6053      	str	r3, [r2, #4]
 80017ea:	e030      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
 80017ec:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	031b      	lsls	r3, r3, #12
 80017fa:	4907      	ldr	r1, [pc, #28]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	604b      	str	r3, [r1, #4]
 8001800:	e025      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	061b      	lsls	r3, r3, #24
 8001810:	4901      	ldr	r1, [pc, #4]	; (8001818 <HAL_RCC_OscConfig+0x29c>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
 8001816:	e01a      	b.n	800184e <HAL_RCC_OscConfig+0x2d2>
 8001818:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800181c:	4b9e      	ldr	r3, [pc, #632]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a9d      	ldr	r2, [pc, #628]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001822:	f023 0301 	bic.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001828:	f7ff fb50 	bl	8000ecc <HAL_GetTick>
 800182c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001830:	f7ff fb4c 	bl	8000ecc <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e2c2      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001842:	4b95      	ldr	r3, [pc, #596]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0310 	and.w	r3, r3, #16
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80a9 	beq.w	80019ae <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001864:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001866:	4b8c      	ldr	r3, [pc, #560]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	2b08      	cmp	r3, #8
 8001870:	d007      	beq.n	8001882 <HAL_RCC_OscConfig+0x306>
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	2b18      	cmp	r3, #24
 8001876:	d13a      	bne.n	80018ee <HAL_RCC_OscConfig+0x372>
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d135      	bne.n	80018ee <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001882:	4b85      	ldr	r3, [pc, #532]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x31e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69db      	ldr	r3, [r3, #28]
 8001892:	2b80      	cmp	r3, #128	; 0x80
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e296      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800189a:	f7ff fb47 	bl	8000f2c <HAL_GetREVID>
 800189e:	4603      	mov	r3, r0
 80018a0:	f241 0203 	movw	r2, #4099	; 0x1003
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d817      	bhi.n	80018d8 <HAL_RCC_OscConfig+0x35c>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	2b20      	cmp	r3, #32
 80018ae:	d108      	bne.n	80018c2 <HAL_RCC_OscConfig+0x346>
 80018b0:	4b79      	ldr	r3, [pc, #484]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80018b8:	4a77      	ldr	r2, [pc, #476]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80018be:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018c0:	e075      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018c2:	4b75      	ldr	r3, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	069b      	lsls	r3, r3, #26
 80018d0:	4971      	ldr	r1, [pc, #452]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018d6:	e06a      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
 80018e4:	061b      	lsls	r3, r3, #24
 80018e6:	496c      	ldr	r1, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018ec:	e05f      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d042      	beq.n	800197c <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80018f6:	4b68      	ldr	r3, [pc, #416]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a67      	ldr	r2, [pc, #412]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80018fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	f7ff fae3 	bl	8000ecc <HAL_GetTick>
 8001906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800190a:	f7ff fadf 	bl	8000ecc <HAL_GetTick>
 800190e:	4602      	mov	r2, r0
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e255      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800191c:	4b5e      	ldr	r3, [pc, #376]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0f0      	beq.n	800190a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001928:	f7ff fb00 	bl	8000f2c <HAL_GetREVID>
 800192c:	4603      	mov	r3, r0
 800192e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001932:	4293      	cmp	r3, r2
 8001934:	d817      	bhi.n	8001966 <HAL_RCC_OscConfig+0x3ea>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b20      	cmp	r3, #32
 800193c:	d108      	bne.n	8001950 <HAL_RCC_OscConfig+0x3d4>
 800193e:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001946:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800194c:	6053      	str	r3, [r2, #4]
 800194e:	e02e      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
 8001950:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a1b      	ldr	r3, [r3, #32]
 800195c:	069b      	lsls	r3, r3, #26
 800195e:	494e      	ldr	r1, [pc, #312]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
 8001964:	e023      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
 8001966:	4b4c      	ldr	r3, [pc, #304]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	061b      	lsls	r3, r3, #24
 8001974:	4948      	ldr	r1, [pc, #288]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001976:	4313      	orrs	r3, r2
 8001978:	60cb      	str	r3, [r1, #12]
 800197a:	e018      	b.n	80019ae <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800197c:	4b46      	ldr	r3, [pc, #280]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a45      	ldr	r2, [pc, #276]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001988:	f7ff faa0 	bl	8000ecc <HAL_GetTick>
 800198c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001990:	f7ff fa9c 	bl	8000ecc <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e212      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f0      	bne.n	8001990 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d036      	beq.n	8001a28 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d019      	beq.n	80019f6 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019c2:	4b35      	ldr	r3, [pc, #212]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019c6:	4a34      	ldr	r2, [pc, #208]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ce:	f7ff fa7d 	bl	8000ecc <HAL_GetTick>
 80019d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019d6:	f7ff fa79 	bl	8000ecc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1ef      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x45a>
 80019f4:	e018      	b.n	8001a28 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f6:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019fa:	4a27      	ldr	r2, [pc, #156]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 80019fc:	f023 0301 	bic.w	r3, r3, #1
 8001a00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa63 	bl	8000ecc <HAL_GetTick>
 8001a06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a0a:	f7ff fa5f 	bl	8000ecc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e1d5      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d039      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d019      	beq.n	8001a70 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a3c:	4b16      	ldr	r3, [pc, #88]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a46:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a48:	f7ff fa40 	bl	8000ecc <HAL_GetTick>
 8001a4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a50:	f7ff fa3c 	bl	8000ecc <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1b2      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d0f0      	beq.n	8001a50 <HAL_RCC_OscConfig+0x4d4>
 8001a6e:	e01b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a70:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a08      	ldr	r2, [pc, #32]	; (8001a98 <HAL_RCC_OscConfig+0x51c>)
 8001a76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a7c:	f7ff fa26 	bl	8000ecc <HAL_GetTick>
 8001a80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a82:	e00b      	b.n	8001a9c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001a84:	f7ff fa22 	bl	8000ecc <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d904      	bls.n	8001a9c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e198      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
 8001a96:	bf00      	nop
 8001a98:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a9c:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1ed      	bne.n	8001a84 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8081 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ab6:	4b9e      	ldr	r3, [pc, #632]	; (8001d30 <HAL_RCC_OscConfig+0x7b4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a9d      	ldr	r2, [pc, #628]	; (8001d30 <HAL_RCC_OscConfig+0x7b4>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ac2:	f7ff fa03 	bl	8000ecc <HAL_GetTick>
 8001ac6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001aca:	f7ff f9ff 	bl	8000ecc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b64      	cmp	r3, #100	; 0x64
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e175      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001adc:	4b94      	ldr	r3, [pc, #592]	; (8001d30 <HAL_RCC_OscConfig+0x7b4>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d106      	bne.n	8001afe <HAL_RCC_OscConfig+0x582>
 8001af0:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af4:	4a8d      	ldr	r2, [pc, #564]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6713      	str	r3, [r2, #112]	; 0x70
 8001afc:	e02d      	b.n	8001b5a <HAL_RCC_OscConfig+0x5de>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5a4>
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b0a:	4a88      	ldr	r2, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b0c:	f023 0301 	bic.w	r3, r3, #1
 8001b10:	6713      	str	r3, [r2, #112]	; 0x70
 8001b12:	4b86      	ldr	r3, [pc, #536]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b16:	4a85      	ldr	r2, [pc, #532]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b18:	f023 0304 	bic.w	r3, r3, #4
 8001b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b1e:	e01c      	b.n	8001b5a <HAL_RCC_OscConfig+0x5de>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	2b05      	cmp	r3, #5
 8001b26:	d10c      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5c6>
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b2c:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b2e:	f043 0304 	orr.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	; 0x70
 8001b34:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a7c      	ldr	r2, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e00b      	b.n	8001b5a <HAL_RCC_OscConfig+0x5de>
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	4a79      	ldr	r2, [pc, #484]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b48:	f023 0301 	bic.w	r3, r3, #1
 8001b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8001b4e:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b52:	4a76      	ldr	r2, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b54:	f023 0304 	bic.w	r3, r3, #4
 8001b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d015      	beq.n	8001b8e <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f9b3 	bl	8000ecc <HAL_GetTick>
 8001b66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9af 	bl	8000ecc <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e123      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b80:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ee      	beq.n	8001b6a <HAL_RCC_OscConfig+0x5ee>
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f99d 	bl	8000ecc <HAL_GetTick>
 8001b92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b96:	f7ff f999 	bl	8000ecc <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e10d      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bac:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ee      	bne.n	8001b96 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8102 	beq.w	8001dc6 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001bc2:	4b5a      	ldr	r3, [pc, #360]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	f000 80bd 	beq.w	8001d4a <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	f040 8095 	bne.w	8001d04 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be6:	f7ff f971 	bl	8000ecc <HAL_GetTick>
 8001bea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f96d 	bl	8000ecc <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0e3      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c00:	4b4a      	ldr	r3, [pc, #296]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c10:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x7b8>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	4942      	ldr	r1, [pc, #264]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	628b      	str	r3, [r1, #40]	; 0x28
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c34:	3b01      	subs	r3, #1
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c40:	3b01      	subs	r3, #1
 8001c42:	041b      	lsls	r3, r3, #16
 8001c44:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001c56:	4935      	ldr	r1, [pc, #212]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	4a32      	ldr	r2, [pc, #200]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c62:	f023 0301 	bic.w	r3, r3, #1
 8001c66:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6c:	4b32      	ldr	r3, [pc, #200]	; (8001d38 <HAL_RCC_OscConfig+0x7bc>)
 8001c6e:	4013      	ands	r3, r2
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c74:	00d2      	lsls	r2, r2, #3
 8001c76:	492d      	ldr	r1, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c7c:	4b2b      	ldr	r3, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f023 020c 	bic.w	r2, r3, #12
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4928      	ldr	r1, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c8e:	4b27      	ldr	r3, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	f023 0202 	bic.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	4924      	ldr	r1, [pc, #144]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001cac:	4b1f      	ldr	r3, [pc, #124]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb0:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001cb8:	4b1c      	ldr	r3, [pc, #112]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	4a1b      	ldr	r2, [pc, #108]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001cc4:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	4a18      	ldr	r2, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f8f6 	bl	8000ecc <HAL_GetTick>
 8001ce0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7ff f8f2 	bl	8000ecc <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e068      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x768>
 8001d02:	e060      	b.n	8001dc6 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_RCC_OscConfig+0x7b0>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f8dc 	bl	8000ecc <HAL_GetTick>
 8001d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d16:	e011      	b.n	8001d3c <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8d8 	bl	8000ecc <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d90a      	bls.n	8001d3c <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04e      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
 8001d2a:	bf00      	nop
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58024800 	.word	0x58024800
 8001d34:	fffffc0c 	.word	0xfffffc0c
 8001d38:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d3c:	4b24      	ldr	r3, [pc, #144]	; (8001dd0 <HAL_RCC_OscConfig+0x854>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e7      	bne.n	8001d18 <HAL_RCC_OscConfig+0x79c>
 8001d48:	e03d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <HAL_RCC_OscConfig+0x854>)
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <HAL_RCC_OscConfig+0x854>)
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d031      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	f003 0203 	and.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d12a      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	091b      	lsrs	r3, r3, #4
 8001d70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d122      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d11a      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	0a5b      	lsrs	r3, r3, #9
 8001d90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d111      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0c1b      	lsrs	r3, r3, #16
 8001da2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001daa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d108      	bne.n	8001dc2 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	0e1b      	lsrs	r3, r3, #24
 8001db4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d001      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3730      	adds	r7, #48	; 0x30
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	58024400 	.word	0x58024400

08001dd4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e19c      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001de8:	4b8a      	ldr	r3, [pc, #552]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d910      	bls.n	8001e18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b87      	ldr	r3, [pc, #540]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 020f 	bic.w	r2, r3, #15
 8001dfe:	4985      	ldr	r1, [pc, #532]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e06:	4b83      	ldr	r3, [pc, #524]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d001      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e184      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d010      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	4b7b      	ldr	r3, [pc, #492]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d908      	bls.n	8001e46 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e34:	4b78      	ldr	r3, [pc, #480]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	4975      	ldr	r1, [pc, #468]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0308 	and.w	r3, r3, #8
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d010      	beq.n	8001e74 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	4b70      	ldr	r3, [pc, #448]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d908      	bls.n	8001e74 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	496a      	ldr	r1, [pc, #424]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d010      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	699a      	ldr	r2, [r3, #24]
 8001e84:	4b64      	ldr	r3, [pc, #400]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d908      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e90:	4b61      	ldr	r3, [pc, #388]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	495e      	ldr	r1, [pc, #376]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0320 	and.w	r3, r3, #32
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d010      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d908      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001ebe:	4b56      	ldr	r3, [pc, #344]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	4953      	ldr	r1, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d010      	beq.n	8001efe <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	4b4d      	ldr	r3, [pc, #308]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d908      	bls.n	8001efe <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eec:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f023 020f 	bic.w	r2, r3, #15
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	4947      	ldr	r1, [pc, #284]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d055      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f0a:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	4940      	ldr	r1, [pc, #256]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	2b02      	cmp	r3, #2
 8001f22:	d107      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f24:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d121      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0f6      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3c:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d115      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0ea      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d107      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f54:	4b30      	ldr	r3, [pc, #192]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d109      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0de      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f64:	4b2c      	ldr	r3, [pc, #176]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e0d6      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f74:	4b28      	ldr	r3, [pc, #160]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f023 0207 	bic.w	r2, r3, #7
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7fe ffa1 	bl	8000ecc <HAL_GetTick>
 8001f8a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8e:	f7fe ff9d 	bl	8000ecc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0be      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d1eb      	bne.n	8001f8e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d010      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	4b14      	ldr	r3, [pc, #80]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d208      	bcs.n	8001fe4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f023 020f 	bic.w	r2, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_RCC_ClockConfig+0x244>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d214      	bcs.n	800201c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 020f 	bic.w	r2, r3, #15
 8001ffa:	4906      	ldr	r1, [pc, #24]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b04      	ldr	r3, [pc, #16]	; (8002014 <HAL_RCC_ClockConfig+0x240>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 030f 	and.w	r3, r3, #15
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d005      	beq.n	800201c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e086      	b.n	8002122 <HAL_RCC_ClockConfig+0x34e>
 8002014:	52002000 	.word	0x52002000
 8002018:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0304 	and.w	r3, r3, #4
 8002024:	2b00      	cmp	r3, #0
 8002026:	d010      	beq.n	800204a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691a      	ldr	r2, [r3, #16]
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002034:	429a      	cmp	r2, r3
 8002036:	d208      	bcs.n	800204a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002038:	4b3c      	ldr	r3, [pc, #240]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	4939      	ldr	r1, [pc, #228]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 8002046:	4313      	orrs	r3, r2
 8002048:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d010      	beq.n	8002078 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	695a      	ldr	r2, [r3, #20]
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002062:	429a      	cmp	r2, r3
 8002064:	d208      	bcs.n	8002078 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002066:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	492e      	ldr	r1, [pc, #184]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 8002074:	4313      	orrs	r3, r2
 8002076:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d010      	beq.n	80020a6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002090:	429a      	cmp	r2, r3
 8002092:	d208      	bcs.n	80020a6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002094:	4b25      	ldr	r3, [pc, #148]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020be:	429a      	cmp	r2, r3
 80020c0:	d208      	bcs.n	80020d4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80020c2:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	4917      	ldr	r1, [pc, #92]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020d4:	f000 f89e 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b14      	ldr	r3, [pc, #80]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	0a1b      	lsrs	r3, r3, #8
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	4912      	ldr	r1, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x35c>)
 80020e6:	5ccb      	ldrb	r3, [r1, r3]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
 80020f0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020f2:	4b0e      	ldr	r3, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x358>)
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	f003 030f 	and.w	r3, r3, #15
 80020fa:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <HAL_RCC_ClockConfig+0x35c>)
 80020fc:	5cd3      	ldrb	r3, [r2, r3]
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	693a      	ldr	r2, [r7, #16]
 8002104:	fa22 f303 	lsr.w	r3, r2, r3
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x360>)
 800210a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x364>)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x368>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe8e 	bl	8000e38 <HAL_InitTick>
 800211c:	4603      	mov	r3, r0
 800211e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	58024400 	.word	0x58024400
 8002130:	08004e24 	.word	0x08004e24
 8002134:	24000004 	.word	0x24000004
 8002138:	24000000 	.word	0x24000000
 800213c:	24000008 	.word	0x24000008

08002140 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08c      	sub	sp, #48	; 0x30
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12a      	bne.n	80021a8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 8002154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002158:	4a2b      	ldr	r2, [pc, #172]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 8002164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002182:	2300      	movs	r3, #0
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	481f      	ldr	r0, [pc, #124]	; (800220c <HAL_RCC_MCOConfig+0xcc>)
 800218e:	f7fe ffbd 	bl	800110c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002192:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	430b      	orrs	r3, r1
 80021a0:	4919      	ldr	r1, [pc, #100]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80021a6:	e02a      	b.n	80021fe <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021b0:	f043 0304 	orr.w	r3, r3, #4
 80021b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
 80021c4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80021c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80021d8:	2300      	movs	r3, #0
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	480b      	ldr	r0, [pc, #44]	; (8002210 <HAL_RCC_MCOConfig+0xd0>)
 80021e4:	f7fe ff92 	bl	800110c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021ea:	691b      	ldr	r3, [r3, #16]
 80021ec:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	01d9      	lsls	r1, r3, #7
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	430b      	orrs	r3, r1
 80021f8:	4903      	ldr	r1, [pc, #12]	; (8002208 <HAL_RCC_MCOConfig+0xc8>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	610b      	str	r3, [r1, #16]
}
 80021fe:	bf00      	nop
 8002200:	3730      	adds	r7, #48	; 0x30
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	58024400 	.word	0x58024400
 800220c:	58020000 	.word	0x58020000
 8002210:	58020800 	.word	0x58020800

08002214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800221a:	4bb3      	ldr	r3, [pc, #716]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002222:	2b18      	cmp	r3, #24
 8002224:	f200 8155 	bhi.w	80024d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002228:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <HAL_RCC_GetSysClockFreq+0x1c>)
 800222a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222e:	bf00      	nop
 8002230:	08002295 	.word	0x08002295
 8002234:	080024d3 	.word	0x080024d3
 8002238:	080024d3 	.word	0x080024d3
 800223c:	080024d3 	.word	0x080024d3
 8002240:	080024d3 	.word	0x080024d3
 8002244:	080024d3 	.word	0x080024d3
 8002248:	080024d3 	.word	0x080024d3
 800224c:	080024d3 	.word	0x080024d3
 8002250:	080022bb 	.word	0x080022bb
 8002254:	080024d3 	.word	0x080024d3
 8002258:	080024d3 	.word	0x080024d3
 800225c:	080024d3 	.word	0x080024d3
 8002260:	080024d3 	.word	0x080024d3
 8002264:	080024d3 	.word	0x080024d3
 8002268:	080024d3 	.word	0x080024d3
 800226c:	080024d3 	.word	0x080024d3
 8002270:	080022c1 	.word	0x080022c1
 8002274:	080024d3 	.word	0x080024d3
 8002278:	080024d3 	.word	0x080024d3
 800227c:	080024d3 	.word	0x080024d3
 8002280:	080024d3 	.word	0x080024d3
 8002284:	080024d3 	.word	0x080024d3
 8002288:	080024d3 	.word	0x080024d3
 800228c:	080024d3 	.word	0x080024d3
 8002290:	080022c7 	.word	0x080022c7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002294:	4b94      	ldr	r3, [pc, #592]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d009      	beq.n	80022b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022a0:	4b91      	ldr	r3, [pc, #580]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	4a90      	ldr	r2, [pc, #576]	; (80024ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
 80022b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80022b2:	e111      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022b4:	4b8d      	ldr	r3, [pc, #564]	; (80024ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022b6:	61bb      	str	r3, [r7, #24]
    break;
 80022b8:	e10e      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80022ba:	4b8d      	ldr	r3, [pc, #564]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022bc:	61bb      	str	r3, [r7, #24]
    break;
 80022be:	e10b      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80022c0:	4b8c      	ldr	r3, [pc, #560]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022c2:	61bb      	str	r3, [r7, #24]
    break;
 80022c4:	e108      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022c6:	4b88      	ldr	r3, [pc, #544]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80022d0:	4b85      	ldr	r3, [pc, #532]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022da:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022dc:	4b82      	ldr	r3, [pc, #520]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80022e6:	4b80      	ldr	r3, [pc, #512]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ea:	08db      	lsrs	r3, r3, #3
 80022ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80e1 	beq.w	80024cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b02      	cmp	r3, #2
 800230e:	f000 8083 	beq.w	8002418 <HAL_RCC_GetSysClockFreq+0x204>
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	2b02      	cmp	r3, #2
 8002316:	f200 80a1 	bhi.w	800245c <HAL_RCC_GetSysClockFreq+0x248>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x114>
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d056      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002326:	e099      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002328:	4b6f      	ldr	r3, [pc, #444]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0320 	and.w	r3, r3, #32
 8002330:	2b00      	cmp	r3, #0
 8002332:	d02d      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002334:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	4a6b      	ldr	r2, [pc, #428]	; (80024ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002340:	fa22 f303 	lsr.w	r3, r2, r3
 8002344:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	ee07 3a90 	vmov	s15, r3
 8002356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800235a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800235e:	4b62      	ldr	r3, [pc, #392]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002372:	eddf 5a61 	vldr	s11, [pc, #388]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800237a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800237e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800238a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800238e:	e087      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800239a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80024fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800239e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023a2:	4b51      	ldr	r3, [pc, #324]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80023b6:	eddf 5a50 	vldr	s11, [pc, #320]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023d2:	e065      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023de:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002500 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023e6:	4b40      	ldr	r3, [pc, #256]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80023fa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002406:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800240a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800240e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002416:	e043      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	ee07 3a90 	vmov	s15, r3
 800241e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002422:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002504 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800242a:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800243a:	ed97 6a02 	vldr	s12, [r7, #8]
 800243e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800244a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800244e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002452:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800245a:	e021      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	ee07 3a90 	vmov	s15, r3
 8002462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002466:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002500 <HAL_RCC_GetSysClockFreq+0x2ec>
 800246a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800247e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002482:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80024f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800248a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800248e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800249e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a4:	0a5b      	lsrs	r3, r3, #9
 80024a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024aa:	3301      	adds	r3, #1
 80024ac:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	ee07 3a90 	vmov	s15, r3
 80024b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80024bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c4:	ee17 3a90 	vmov	r3, s15
 80024c8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80024ca:	e005      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80024cc:	2300      	movs	r3, #0
 80024ce:	61bb      	str	r3, [r7, #24]
    break;
 80024d0:	e002      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024d4:	61bb      	str	r3, [r7, #24]
    break;
 80024d6:	bf00      	nop
  }

  return sysclockfreq;
 80024d8:	69bb      	ldr	r3, [r7, #24]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	58024400 	.word	0x58024400
 80024ec:	03d09000 	.word	0x03d09000
 80024f0:	003d0900 	.word	0x003d0900
 80024f4:	017d7840 	.word	0x017d7840
 80024f8:	46000000 	.word	0x46000000
 80024fc:	4c742400 	.word	0x4c742400
 8002500:	4a742400 	.word	0x4a742400
 8002504:	4bbebc20 	.word	0x4bbebc20

08002508 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800250e:	f7ff fe81 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002512:	4602      	mov	r2, r0
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_GetHCLKFreq+0x50>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	490f      	ldr	r1, [pc, #60]	; (800255c <HAL_RCC_GetHCLKFreq+0x54>)
 8002520:	5ccb      	ldrb	r3, [r1, r3]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_GetHCLKFreq+0x50>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	f003 030f 	and.w	r3, r3, #15
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_RCC_GetHCLKFreq+0x54>)
 8002536:	5cd3      	ldrb	r3, [r2, r3]
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a07      	ldr	r2, [pc, #28]	; (8002560 <HAL_RCC_GetHCLKFreq+0x58>)
 8002544:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002546:	4a07      	ldr	r2, [pc, #28]	; (8002564 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <HAL_RCC_GetHCLKFreq+0x58>)
 800254e:	681b      	ldr	r3, [r3, #0]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	58024400 	.word	0x58024400
 800255c:	08004e24 	.word	0x08004e24
 8002560:	24000004 	.word	0x24000004
 8002564:	24000000 	.word	0x24000000

08002568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800256c:	f7ff ffcc 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 8002570:	4602      	mov	r2, r0
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	4904      	ldr	r1, [pc, #16]	; (8002590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800257e:	5ccb      	ldrb	r3, [r1, r3]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	58024400 	.word	0x58024400
 8002590:	08004e24 	.word	0x08004e24

08002594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002598:	f7ff ffb6 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	0a1b      	lsrs	r3, r3, #8
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4904      	ldr	r1, [pc, #16]	; (80025bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	58024400 	.word	0x58024400
 80025bc:	08004e24 	.word	0x08004e24

080025c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025c8:	2300      	movs	r3, #0
 80025ca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2300      	movs	r3, #0
 80025ce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03f      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025e4:	d02a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80025ea:	d824      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f0:	d018      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025f6:	d81e      	bhi.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002600:	d007      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002602:	e018      	b.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002604:	4bab      	ldr	r3, [pc, #684]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	4aaa      	ldr	r2, [pc, #680]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800260a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800260e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002610:	e015      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	3304      	adds	r3, #4
 8002616:	2102      	movs	r1, #2
 8002618:	4618      	mov	r0, r3
 800261a:	f001 f9ff 	bl	8003a1c <RCCEx_PLL2_Config>
 800261e:	4603      	mov	r3, r0
 8002620:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002622:	e00c      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3324      	adds	r3, #36	; 0x24
 8002628:	2102      	movs	r1, #2
 800262a:	4618      	mov	r0, r3
 800262c:	f001 faa8 	bl	8003b80 <RCCEx_PLL3_Config>
 8002630:	4603      	mov	r3, r0
 8002632:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002634:	e003      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
      break;
 800263a:	e000      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800263c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002644:	4b9b      	ldr	r3, [pc, #620]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002648:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002650:	4998      	ldr	r1, [pc, #608]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002652:	4313      	orrs	r3, r2
 8002654:	650b      	str	r3, [r1, #80]	; 0x50
 8002656:	e001      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002664:	2b00      	cmp	r3, #0
 8002666:	d03d      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	2b04      	cmp	r3, #4
 800266e:	d826      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002670:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002676:	bf00      	nop
 8002678:	0800268d 	.word	0x0800268d
 800267c:	0800269b 	.word	0x0800269b
 8002680:	080026ad 	.word	0x080026ad
 8002684:	080026c5 	.word	0x080026c5
 8002688:	080026c5 	.word	0x080026c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800268c:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800268e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002690:	4a88      	ldr	r2, [pc, #544]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002696:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002698:	e015      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3304      	adds	r3, #4
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f001 f9bb 	bl	8003a1c <RCCEx_PLL2_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026aa:	e00c      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3324      	adds	r3, #36	; 0x24
 80026b0:	2100      	movs	r1, #0
 80026b2:	4618      	mov	r0, r3
 80026b4:	f001 fa64 	bl	8003b80 <RCCEx_PLL3_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026bc:	e003      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
      break;
 80026c2:	e000      	b.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80026c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026c6:	7dfb      	ldrb	r3, [r7, #23]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d109      	bne.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026cc:	4b79      	ldr	r3, [pc, #484]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	f023 0207 	bic.w	r2, r3, #7
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d8:	4976      	ldr	r1, [pc, #472]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	650b      	str	r3, [r1, #80]	; 0x50
 80026de:	e001      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d042      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f8:	d02b      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80026fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026fe:	d825      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002700:	2bc0      	cmp	r3, #192	; 0xc0
 8002702:	d028      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002704:	2bc0      	cmp	r3, #192	; 0xc0
 8002706:	d821      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002708:	2b80      	cmp	r3, #128	; 0x80
 800270a:	d016      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800270c:	2b80      	cmp	r3, #128	; 0x80
 800270e:	d81d      	bhi.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d007      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002718:	e018      	b.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800271a:	4b66      	ldr	r3, [pc, #408]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800271e:	4a65      	ldr	r2, [pc, #404]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002724:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002726:	e017      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3304      	adds	r3, #4
 800272c:	2100      	movs	r1, #0
 800272e:	4618      	mov	r0, r3
 8002730:	f001 f974 	bl	8003a1c <RCCEx_PLL2_Config>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002738:	e00e      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3324      	adds	r3, #36	; 0x24
 800273e:	2100      	movs	r1, #0
 8002740:	4618      	mov	r0, r3
 8002742:	f001 fa1d 	bl	8003b80 <RCCEx_PLL3_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800274a:	e005      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	75fb      	strb	r3, [r7, #23]
      break;
 8002750:	e002      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002756:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002758:	7dfb      	ldrb	r3, [r7, #23]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800275e:	4b55      	ldr	r3, [pc, #340]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002762:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	4952      	ldr	r1, [pc, #328]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800276c:	4313      	orrs	r3, r2
 800276e:	650b      	str	r3, [r1, #80]	; 0x50
 8002770:	e001      	b.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002772:	7dfb      	ldrb	r3, [r7, #23]
 8002774:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277e:	2b00      	cmp	r3, #0
 8002780:	d049      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800278c:	d030      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800278e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002792:	d82a      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002794:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002798:	d02c      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800279a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800279e:	d824      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a4:	d018      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80027a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027aa:	d81e      	bhi.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80027b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b4:	d007      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80027b6:	e018      	b.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027b8:	4b3e      	ldr	r3, [pc, #248]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027bc:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027c4:	e017      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f001 f925 	bl	8003a1c <RCCEx_PLL2_Config>
 80027d2:	4603      	mov	r3, r0
 80027d4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80027d6:	e00e      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3324      	adds	r3, #36	; 0x24
 80027dc:	2100      	movs	r1, #0
 80027de:	4618      	mov	r0, r3
 80027e0:	f001 f9ce 	bl	8003b80 <RCCEx_PLL3_Config>
 80027e4:	4603      	mov	r3, r0
 80027e6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027e8:	e005      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
      break;
 80027ee:	e002      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80027f0:	bf00      	nop
 80027f2:	e000      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80027f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d10a      	bne.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800280a:	492a      	ldr	r1, [pc, #168]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800280c:	4313      	orrs	r3, r2
 800280e:	658b      	str	r3, [r1, #88]	; 0x58
 8002810:	e001      	b.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002812:	7dfb      	ldrb	r3, [r7, #23]
 8002814:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800281e:	2b00      	cmp	r3, #0
 8002820:	d04c      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282c:	d030      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800282e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002832:	d82a      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002834:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002838:	d02c      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800283a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800283e:	d824      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002840:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002844:	d018      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002846:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800284a:	d81e      	bhi.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002854:	d007      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002856:	e018      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	4a15      	ldr	r2, [pc, #84]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800285e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002862:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002864:	e017      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2100      	movs	r1, #0
 800286c:	4618      	mov	r0, r3
 800286e:	f001 f8d5 	bl	8003a1c <RCCEx_PLL2_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002876:	e00e      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	3324      	adds	r3, #36	; 0x24
 800287c:	2100      	movs	r1, #0
 800287e:	4618      	mov	r0, r3
 8002880:	f001 f97e 	bl	8003b80 <RCCEx_PLL3_Config>
 8002884:	4603      	mov	r3, r0
 8002886:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002888:	e005      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
      break;
 800288e:	e002      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002890:	bf00      	nop
 8002892:	e000      	b.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8002894:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002896:	7dfb      	ldrb	r3, [r7, #23]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d10d      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80028aa:	4902      	ldr	r1, [pc, #8]	; (80028b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	658b      	str	r3, [r1, #88]	; 0x58
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80028b2:	bf00      	nop
 80028b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b8:	7dfb      	ldrb	r3, [r7, #23]
 80028ba:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d032      	beq.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d01c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80028d0:	2b30      	cmp	r3, #48	; 0x30
 80028d2:	d817      	bhi.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d00c      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d813      	bhi.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80028e0:	2b10      	cmp	r3, #16
 80028e2:	d10f      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e4:	4bb1      	ldr	r3, [pc, #708]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	4ab0      	ldr	r2, [pc, #704]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80028ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80028f0:	e00e      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	2102      	movs	r1, #2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 f88f 	bl	8003a1c <RCCEx_PLL2_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002902:	e005      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	75fb      	strb	r3, [r7, #23]
      break;
 8002908:	e002      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800290e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d109      	bne.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002916:	4ba5      	ldr	r3, [pc, #660]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002922:	49a2      	ldr	r1, [pc, #648]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002928:	e001      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800292a:	7dfb      	ldrb	r3, [r7, #23]
 800292c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d047      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002942:	d030      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002948:	d82a      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800294a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800294e:	d02c      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002950:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002954:	d824      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	d018      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002960:	d81e      	bhi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d007      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800296c:	e018      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296e:	4b8f      	ldr	r3, [pc, #572]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	4a8e      	ldr	r2, [pc, #568]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800297a:	e017      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3304      	adds	r3, #4
 8002980:	2100      	movs	r1, #0
 8002982:	4618      	mov	r0, r3
 8002984:	f001 f84a 	bl	8003a1c <RCCEx_PLL2_Config>
 8002988:	4603      	mov	r3, r0
 800298a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800298c:	e00e      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	3324      	adds	r3, #36	; 0x24
 8002992:	2100      	movs	r1, #0
 8002994:	4618      	mov	r0, r3
 8002996:	f001 f8f3 	bl	8003b80 <RCCEx_PLL3_Config>
 800299a:	4603      	mov	r3, r0
 800299c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800299e:	e005      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	75fb      	strb	r3, [r7, #23]
      break;
 80029a4:	e002      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80029aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029b2:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b6:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029be:	497b      	ldr	r1, [pc, #492]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	650b      	str	r3, [r1, #80]	; 0x50
 80029c4:	e001      	b.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
 80029c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d049      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029de:	d02e      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80029e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e4:	d828      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029ea:	d02a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80029ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80029f0:	d822      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029f6:	d026      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80029f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80029fc:	d81c      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80029fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a02:	d010      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002a04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a08:	d816      	bhi.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d01d      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d111      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	3304      	adds	r3, #4
 8002a18:	2101      	movs	r1, #1
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fffe 	bl	8003a1c <RCCEx_PLL2_Config>
 8002a20:	4603      	mov	r3, r0
 8002a22:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a24:	e012      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3324      	adds	r3, #36	; 0x24
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f8a7 	bl	8003b80 <RCCEx_PLL3_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002a36:	e009      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a3c:	e006      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e004      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a42:	bf00      	nop
 8002a44:	e002      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a46:	bf00      	nop
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a52:	4b56      	ldr	r3, [pc, #344]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a56:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a5e:	4953      	ldr	r1, [pc, #332]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	650b      	str	r3, [r1, #80]	; 0x50
 8002a64:	e001      	b.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a66:	7dfb      	ldrb	r3, [r7, #23]
 8002a68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04b      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d02e      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a86:	d828      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d02a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a92:	d822      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002a94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a98:	d026      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002a9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a9e:	d81c      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002aa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002aaa:	d816      	bhi.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01d      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ab4:	d111      	bne.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2101      	movs	r1, #1
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 ffad 	bl	8003a1c <RCCEx_PLL2_Config>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ac6:	e012      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3324      	adds	r3, #36	; 0x24
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 f856 	bl	8003b80 <RCCEx_PLL3_Config>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002ad8:	e009      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ade:	e006      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ae0:	bf00      	nop
 8002ae2:	e004      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e002      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002ae8:	bf00      	nop
 8002aea:	e000      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002aec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002aee:	7dfb      	ldrb	r3, [r7, #23]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10a      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b02:	492a      	ldr	r1, [pc, #168]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	658b      	str	r3, [r1, #88]	; 0x58
 8002b08:	e001      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d022      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00e      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	d108      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3304      	adds	r3, #4
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 ff74 	bl	8003a1c <RCCEx_PLL2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002b3e:	e000      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002b40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b54:	4915      	ldr	r1, [pc, #84]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002b5a:	e001      	b.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5c:	7dfb      	ldrb	r3, [r7, #23]
 8002b5e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d031      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b74:	d00e      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7a:	d814      	bhi.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d017      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002b80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b86:	4b09      	ldr	r3, [pc, #36]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	4a08      	ldr	r2, [pc, #32]	; (8002bac <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002b92:	e00e      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	2101      	movs	r1, #1
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 ff3e 	bl	8003a1c <RCCEx_PLL2_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8002baa:	e002      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002bac:	58024400 	.word	0x58024400
      break;
 8002bb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bb8:	4bbc      	ldr	r3, [pc, #752]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bbc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	49b9      	ldr	r1, [pc, #740]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	650b      	str	r3, [r1, #80]	; 0x50
 8002bca:	e001      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bcc:	7dfb      	ldrb	r3, [r7, #23]
 8002bce:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d032      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d81b      	bhi.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c23 	.word	0x08002c23
 8002bf0:	08002bfd 	.word	0x08002bfd
 8002bf4:	08002c0b 	.word	0x08002c0b
 8002bf8:	08002c23 	.word	0x08002c23
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bfc:	4bab      	ldr	r3, [pc, #684]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	4aaa      	ldr	r2, [pc, #680]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c08:	e00c      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	2102      	movs	r1, #2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f000 ff03 	bl	8003a1c <RCCEx_PLL2_Config>
 8002c16:	4603      	mov	r3, r0
 8002c18:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002c1a:	e003      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c20:	e000      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c2a:	4ba0      	ldr	r3, [pc, #640]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	499d      	ldr	r1, [pc, #628]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002c3c:	e001      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3e:	7dfb      	ldrb	r3, [r7, #23]
 8002c40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8086 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c50:	4b97      	ldr	r3, [pc, #604]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a96      	ldr	r2, [pc, #600]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c5c:	f7fe f936 	bl	8000ecc <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c62:	e009      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c64:	f7fe f932 	bl	8000ecc <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b64      	cmp	r3, #100	; 0x64
 8002c70:	d902      	bls.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	75fb      	strb	r3, [r7, #23]
        break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c78:	4b8d      	ldr	r3, [pc, #564]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0ef      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d166      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c8a:	4b88      	ldr	r3, [pc, #544]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002c94:	4053      	eors	r3, r2
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d013      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c9e:	4b83      	ldr	r3, [pc, #524]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	4a7f      	ldr	r2, [pc, #508]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cb4:	4b7d      	ldr	r3, [pc, #500]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	4a7c      	ldr	r2, [pc, #496]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cbe:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002cc0:	4a7a      	ldr	r2, [pc, #488]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cd0:	d115      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd2:	f7fe f8fb 	bl	8000ecc <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cda:	f7fe f8f7 	bl	8000ecc <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d902      	bls.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	75fb      	strb	r3, [r7, #23]
            break;
 8002cf0:	e005      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ed      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d126      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d12:	d10d      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002d14:	4b65      	ldr	r3, [pc, #404]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d22:	0919      	lsrs	r1, r3, #4
 8002d24:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002d26:	400b      	ands	r3, r1
 8002d28:	4960      	ldr	r1, [pc, #384]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	610b      	str	r3, [r1, #16]
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002d30:	4b5e      	ldr	r3, [pc, #376]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d32:	691b      	ldr	r3, [r3, #16]
 8002d34:	4a5d      	ldr	r2, [pc, #372]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d36:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d3a:	6113      	str	r3, [r2, #16]
 8002d3c:	4b5b      	ldr	r3, [pc, #364]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	4958      	ldr	r1, [pc, #352]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	670b      	str	r3, [r1, #112]	; 0x70
 8002d50:	e004      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	75bb      	strb	r3, [r7, #22]
 8002d56:	e001      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d07e      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6c:	2b28      	cmp	r3, #40	; 0x28
 8002d6e:	d867      	bhi.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002d70:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d76:	bf00      	nop
 8002d78:	08002e47 	.word	0x08002e47
 8002d7c:	08002e41 	.word	0x08002e41
 8002d80:	08002e41 	.word	0x08002e41
 8002d84:	08002e41 	.word	0x08002e41
 8002d88:	08002e41 	.word	0x08002e41
 8002d8c:	08002e41 	.word	0x08002e41
 8002d90:	08002e41 	.word	0x08002e41
 8002d94:	08002e41 	.word	0x08002e41
 8002d98:	08002e1d 	.word	0x08002e1d
 8002d9c:	08002e41 	.word	0x08002e41
 8002da0:	08002e41 	.word	0x08002e41
 8002da4:	08002e41 	.word	0x08002e41
 8002da8:	08002e41 	.word	0x08002e41
 8002dac:	08002e41 	.word	0x08002e41
 8002db0:	08002e41 	.word	0x08002e41
 8002db4:	08002e41 	.word	0x08002e41
 8002db8:	08002e2f 	.word	0x08002e2f
 8002dbc:	08002e41 	.word	0x08002e41
 8002dc0:	08002e41 	.word	0x08002e41
 8002dc4:	08002e41 	.word	0x08002e41
 8002dc8:	08002e41 	.word	0x08002e41
 8002dcc:	08002e41 	.word	0x08002e41
 8002dd0:	08002e41 	.word	0x08002e41
 8002dd4:	08002e41 	.word	0x08002e41
 8002dd8:	08002e47 	.word	0x08002e47
 8002ddc:	08002e41 	.word	0x08002e41
 8002de0:	08002e41 	.word	0x08002e41
 8002de4:	08002e41 	.word	0x08002e41
 8002de8:	08002e41 	.word	0x08002e41
 8002dec:	08002e41 	.word	0x08002e41
 8002df0:	08002e41 	.word	0x08002e41
 8002df4:	08002e41 	.word	0x08002e41
 8002df8:	08002e47 	.word	0x08002e47
 8002dfc:	08002e41 	.word	0x08002e41
 8002e00:	08002e41 	.word	0x08002e41
 8002e04:	08002e41 	.word	0x08002e41
 8002e08:	08002e41 	.word	0x08002e41
 8002e0c:	08002e41 	.word	0x08002e41
 8002e10:	08002e41 	.word	0x08002e41
 8002e14:	08002e41 	.word	0x08002e41
 8002e18:	08002e47 	.word	0x08002e47
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fdfa 	bl	8003a1c <RCCEx_PLL2_Config>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e2c:	e00c      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3324      	adds	r3, #36	; 0x24
 8002e32:	2101      	movs	r1, #1
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fea3 	bl	8003b80 <RCCEx_PLL3_Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002e3e:	e003      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	75fb      	strb	r3, [r7, #23]
      break;
 8002e44:	e000      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e52:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e5a:	4914      	ldr	r1, [pc, #80]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	654b      	str	r3, [r1, #84]	; 0x54
 8002e60:	e001      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
 8002e64:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d03e      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d827      	bhi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002e7a:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	08002e99 	.word	0x08002e99
 8002e88:	08002eb9 	.word	0x08002eb9
 8002e8c:	08002ed1 	.word	0x08002ed1
 8002e90:	08002ed1 	.word	0x08002ed1
 8002e94:	08002ed1 	.word	0x08002ed1
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fdbc 	bl	8003a1c <RCCEx_PLL2_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ea8:	e013      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
 8002eaa:	bf00      	nop
 8002eac:	58024400 	.word	0x58024400
 8002eb0:	58024800 	.word	0x58024800
 8002eb4:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f000 fe5e 	bl	8003b80 <RCCEx_PLL3_Config>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ec8:	e003      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	75fb      	strb	r3, [r7, #23]
      break;
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8002ed0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ed2:	7dfb      	ldrb	r3, [r7, #23]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d109      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002ed8:	4b9f      	ldr	r3, [pc, #636]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002edc:	f023 0207 	bic.w	r2, r3, #7
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee4:	499c      	ldr	r1, [pc, #624]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	654b      	str	r3, [r1, #84]	; 0x54
 8002eea:	e001      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	7dfb      	ldrb	r3, [r7, #23]
 8002eee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0304 	and.w	r3, r3, #4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d039      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f02:	2b05      	cmp	r3, #5
 8002f04:	d820      	bhi.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f4f 	.word	0x08002f4f
 8002f10:	08002f25 	.word	0x08002f25
 8002f14:	08002f37 	.word	0x08002f37
 8002f18:	08002f4f 	.word	0x08002f4f
 8002f1c:	08002f4f 	.word	0x08002f4f
 8002f20:	08002f4f 	.word	0x08002f4f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3304      	adds	r3, #4
 8002f28:	2101      	movs	r1, #1
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f000 fd76 	bl	8003a1c <RCCEx_PLL2_Config>
 8002f30:	4603      	mov	r3, r0
 8002f32:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f34:	e00c      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3324      	adds	r3, #36	; 0x24
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fe1f 	bl	8003b80 <RCCEx_PLL3_Config>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002f46:	e003      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f4c:	e000      	b.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 8002f4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10a      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f56:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f023 0207 	bic.w	r2, r3, #7
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f64:	497c      	ldr	r1, [pc, #496]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	658b      	str	r3, [r1, #88]	; 0x58
 8002f6a:	e001      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6c:	7dfb      	ldrb	r3, [r7, #23]
 8002f6e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d04b      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f86:	d02e      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f8c:	d828      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f92:	d02a      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 8002f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f98:	d822      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002f9a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002f9e:	d026      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 8002fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002fa4:	d81c      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002faa:	d010      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8002fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fb0:	d816      	bhi.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8002fb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fba:	d111      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 fd2a 	bl	8003a1c <RCCEx_PLL2_Config>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fcc:	e012      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3324      	adds	r3, #36	; 0x24
 8002fd2:	2102      	movs	r1, #2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fdd3 	bl	8003b80 <RCCEx_PLL3_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002fde:	e009      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fe4:	e006      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fe6:	bf00      	nop
 8002fe8:	e004      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fea:	bf00      	nop
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e000      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8002ff2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10a      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ffa:	4b57      	ldr	r3, [pc, #348]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003008:	4953      	ldr	r1, [pc, #332]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800300a:	4313      	orrs	r3, r2
 800300c:	654b      	str	r3, [r1, #84]	; 0x54
 800300e:	e001      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7dfb      	ldrb	r3, [r7, #23]
 8003012:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800301c:	2b00      	cmp	r3, #0
 800301e:	d04b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003026:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800302a:	d02e      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0xaca>
 800302c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003030:	d828      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003032:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003036:	d02a      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800303c:	d822      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800303e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003042:	d026      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0xad2>
 8003044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003048:	d81c      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800304a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800304e:	d010      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8003050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003054:	d816      	bhi.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d01d      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xad6>
 800305a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800305e:	d111      	bne.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3304      	adds	r3, #4
 8003064:	2100      	movs	r1, #0
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fcd8 	bl	8003a1c <RCCEx_PLL2_Config>
 800306c:	4603      	mov	r3, r0
 800306e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003070:	e012      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3324      	adds	r3, #36	; 0x24
 8003076:	2102      	movs	r1, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fd81 	bl	8003b80 <RCCEx_PLL3_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003082:	e009      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	75fb      	strb	r3, [r7, #23]
      break;
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800308a:	bf00      	nop
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 8003096:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10a      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800309e:	4b2e      	ldr	r3, [pc, #184]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030ac:	492a      	ldr	r1, [pc, #168]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	658b      	str	r3, [r1, #88]	; 0x58
 80030b2:	e001      	b.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
 80030b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d04d      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80030ca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030ce:	d02e      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 80030d0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80030d4:	d828      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030da:	d02a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80030dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e0:	d822      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030e2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030e6:	d026      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0xb76>
 80030e8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80030ec:	d81c      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f2:	d010      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0xb56>
 80030f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f8:	d816      	bhi.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d01d      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d111      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fc86 	bl	8003a1c <RCCEx_PLL2_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003114:	e012      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3324      	adds	r3, #36	; 0x24
 800311a:	2102      	movs	r1, #2
 800311c:	4618      	mov	r0, r3
 800311e:	f000 fd2f 	bl	8003b80 <RCCEx_PLL3_Config>
 8003122:	4603      	mov	r3, r0
 8003124:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003126:	e009      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	75fb      	strb	r3, [r7, #23]
      break;
 800312c:	e006      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800312e:	bf00      	nop
 8003130:	e004      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003132:	bf00      	nop
 8003134:	e002      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003136:	bf00      	nop
 8003138:	e000      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800313a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800313c:	7dfb      	ldrb	r3, [r7, #23]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10c      	bne.n	800315c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003150:	4901      	ldr	r1, [pc, #4]	; (8003158 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003152:	4313      	orrs	r3, r2
 8003154:	658b      	str	r3, [r1, #88]	; 0x58
 8003156:	e003      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003158:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d01a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003176:	d10a      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3324      	adds	r3, #36	; 0x24
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fcfe 	bl	8003b80 <RCCEx_PLL3_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800318e:	4b8c      	ldr	r3, [pc, #560]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	4988      	ldr	r1, [pc, #544]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01a      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031b8:	d10a      	bne.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3324      	adds	r3, #36	; 0x24
 80031be:	2102      	movs	r1, #2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 fcdd 	bl	8003b80 <RCCEx_PLL3_Config>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031d0:	4b7b      	ldr	r3, [pc, #492]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031de:	4978      	ldr	r1, [pc, #480]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d034      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031fa:	d01d      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80031fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003200:	d817      	bhi.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800320a:	d009      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 800320c:	e011      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	2100      	movs	r1, #0
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fc01 	bl	8003a1c <RCCEx_PLL2_Config>
 800321a:	4603      	mov	r3, r0
 800321c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800321e:	e00c      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	3324      	adds	r3, #36	; 0x24
 8003224:	2102      	movs	r1, #2
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fcaa 	bl	8003b80 <RCCEx_PLL3_Config>
 800322c:	4603      	mov	r3, r0
 800322e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003230:	e003      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	75fb      	strb	r3, [r7, #23]
      break;
 8003236:	e000      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003238:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d10a      	bne.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003240:	4b5f      	ldr	r3, [pc, #380]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800324e:	495c      	ldr	r1, [pc, #368]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003250:	4313      	orrs	r3, r2
 8003252:	658b      	str	r3, [r1, #88]	; 0x58
 8003254:	e001      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003256:	7dfb      	ldrb	r3, [r7, #23]
 8003258:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d033      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003270:	d01c      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8003272:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003276:	d816      	bhi.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
 8003278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327c:	d003      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 800327e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003282:	d007      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 8003284:	e00f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003286:	4b4e      	ldr	r3, [pc, #312]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	4a4d      	ldr	r2, [pc, #308]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800328c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003290:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003292:	e00c      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3324      	adds	r3, #36	; 0x24
 8003298:	2101      	movs	r1, #1
 800329a:	4618      	mov	r0, r3
 800329c:	f000 fc70 	bl	8003b80 <RCCEx_PLL3_Config>
 80032a0:	4603      	mov	r3, r0
 80032a2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80032a4:	e003      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	75fb      	strb	r3, [r7, #23]
      break;
 80032aa:	e000      	b.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 80032ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ae:	7dfb      	ldrb	r3, [r7, #23]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10a      	bne.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b4:	4b42      	ldr	r3, [pc, #264]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	493f      	ldr	r1, [pc, #252]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	654b      	str	r3, [r1, #84]	; 0x54
 80032c8:	e001      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d029      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 80032e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e6:	d007      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 80032e8:	e00f      	b.n	800330a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032ea:	4b35      	ldr	r3, [pc, #212]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	4a34      	ldr	r2, [pc, #208]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80032f6:	e00b      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	3304      	adds	r3, #4
 80032fc:	2102      	movs	r1, #2
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fb8c 	bl	8003a1c <RCCEx_PLL2_Config>
 8003304:	4603      	mov	r3, r0
 8003306:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003308:	e002      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	75fb      	strb	r3, [r7, #23]
      break;
 800330e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003316:	4b2a      	ldr	r3, [pc, #168]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800331a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003322:	4927      	ldr	r1, [pc, #156]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003324:	4313      	orrs	r3, r2
 8003326:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003328:	e001      	b.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3324      	adds	r3, #36	; 0x24
 800333e:	2102      	movs	r1, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f000 fc1d 	bl	8003b80 <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d035      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003362:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003366:	d017      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 8003368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800336c:	d811      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800336e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003372:	d013      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0xddc>
 8003374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003378:	d80b      	bhi.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d010      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	d106      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003384:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003390:	e007      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	75fb      	strb	r3, [r7, #23]
      break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 8003398:	bf00      	nop
 800339a:	e002      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80033a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10d      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b6:	4902      	ldr	r1, [pc, #8]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	654b      	str	r3, [r1, #84]	; 0x54
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80033be:	bf00      	nop
 80033c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
 80033c6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d008      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033d4:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80033d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033e0:	492e      	ldr	r1, [pc, #184]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d009      	beq.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80033f2:	4b2a      	ldr	r3, [pc, #168]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003400:	4926      	ldr	r1, [pc, #152]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d008      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003412:	4b22      	ldr	r3, [pc, #136]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341e:	491f      	ldr	r1, [pc, #124]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003420:	4313      	orrs	r3, r2
 8003422:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003430:	4b1a      	ldr	r3, [pc, #104]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	4a19      	ldr	r2, [pc, #100]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003436:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800343a:	6113      	str	r3, [r2, #16]
 800343c:	4b17      	ldr	r3, [pc, #92]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003446:	4915      	ldr	r1, [pc, #84]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003448:	4313      	orrs	r3, r2
 800344a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da08      	bge.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d009      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003472:	4b0a      	ldr	r3, [pc, #40]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003476:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003486:	7dbb      	ldrb	r3, [r7, #22]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	58024400 	.word	0x58024400

080034a0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80034a4:	f7ff f830 	bl	8002508 <HAL_RCC_GetHCLKFreq>
 80034a8:	4602      	mov	r2, r0
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	091b      	lsrs	r3, r3, #4
 80034b0:	f003 0307 	and.w	r3, r3, #7
 80034b4:	4904      	ldr	r1, [pc, #16]	; (80034c8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80034b6:	5ccb      	ldrb	r3, [r1, r3]
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	58024400 	.word	0x58024400
 80034c8:	08004e24 	.word	0x08004e24

080034cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80034d4:	4ba1      	ldr	r3, [pc, #644]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f003 0303 	and.w	r3, r3, #3
 80034dc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80034de:	4b9f      	ldr	r3, [pc, #636]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	0b1b      	lsrs	r3, r3, #12
 80034e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80034ea:	4b9c      	ldr	r3, [pc, #624]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80034f6:	4b99      	ldr	r3, [pc, #612]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	08db      	lsrs	r3, r3, #3
 80034fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	fb02 f303 	mul.w	r3, r2, r3
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	f000 8111 	beq.w	800373c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b02      	cmp	r3, #2
 800351e:	f000 8083 	beq.w	8003628 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b02      	cmp	r3, #2
 8003526:	f200 80a1 	bhi.w	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d056      	beq.n	80035e4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003536:	e099      	b.n	800366c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003538:	4b88      	ldr	r3, [pc, #544]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02d      	beq.n	80035a0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003544:	4b85      	ldr	r3, [pc, #532]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	08db      	lsrs	r3, r3, #3
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	4a84      	ldr	r2, [pc, #528]	; (8003760 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
 8003554:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b7b      	ldr	r3, [pc, #492]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003582:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800359e:	e087      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003768 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80035ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b2:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80035c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80035ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80035e2:	e065      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800376c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80035f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a03 	vldr	s12, [r7, #12]
 800360a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003626:	e043      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	ee07 3a90 	vmov	s15, r3
 800362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003632:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800363a:	4b48      	ldr	r3, [pc, #288]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800363c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800364a:	ed97 6a03 	vldr	s12, [r7, #12]
 800364e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800365a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800365e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800366a:	e021      	b.n	80036b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	ee07 3a90 	vmov	s15, r3
 8003672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003676:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800376c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800367a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003686:	ee07 3a90 	vmov	s15, r3
 800368a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800368e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003692:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003764 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800369a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800369e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80036ae:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80036b0:	4b2a      	ldr	r3, [pc, #168]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b4:	0a5b      	lsrs	r3, r3, #9
 80036b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036ca:	edd7 6a07 	vldr	s13, [r7, #28]
 80036ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d6:	ee17 2a90 	vmov	r2, s15
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	0c1b      	lsrs	r3, r3, #16
 80036e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80036f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80036f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80036fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003700:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003704:	ee17 2a90 	vmov	r2, s15
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800370c:	4b13      	ldr	r3, [pc, #76]	; (800375c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003710:	0e1b      	lsrs	r3, r3, #24
 8003712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003716:	ee07 3a90 	vmov	s15, r3
 800371a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800371e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003726:	edd7 6a07 	vldr	s13, [r7, #28]
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003732:	ee17 2a90 	vmov	r2, s15
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800373a:	e008      	b.n	800374e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	609a      	str	r2, [r3, #8]
}
 800374e:	bf00      	nop
 8003750:	3724      	adds	r7, #36	; 0x24
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
 8003760:	03d09000 	.word	0x03d09000
 8003764:	46000000 	.word	0x46000000
 8003768:	4c742400 	.word	0x4c742400
 800376c:	4a742400 	.word	0x4a742400
 8003770:	4bbebc20 	.word	0x4bbebc20

08003774 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8003774:	b480      	push	{r7}
 8003776:	b089      	sub	sp, #36	; 0x24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800377c:	4ba1      	ldr	r3, [pc, #644]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003786:	4b9f      	ldr	r3, [pc, #636]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	0d1b      	lsrs	r3, r3, #20
 800378c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003790:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003792:	4b9c      	ldr	r3, [pc, #624]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	0a1b      	lsrs	r3, r3, #8
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800379e:	4b99      	ldr	r3, [pc, #612]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a2:	08db      	lsrs	r3, r3, #3
 80037a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	fb02 f303 	mul.w	r3, r2, r3
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 8111 	beq.w	80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	2b02      	cmp	r3, #2
 80037c6:	f000 8083 	beq.w	80038d0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	f200 80a1 	bhi.w	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d056      	beq.n	800388c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80037de:	e099      	b.n	8003914 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02d      	beq.n	8003848 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80037ec:	4b85      	ldr	r3, [pc, #532]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	4a84      	ldr	r2, [pc, #528]	; (8003a08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
 80037fc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	ee07 3a90 	vmov	s15, r3
 8003804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	ee07 3a90 	vmov	s15, r3
 800380e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003816:	4b7b      	ldr	r3, [pc, #492]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003826:	ed97 6a03 	vldr	s12, [r7, #12]
 800382a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800382e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003836:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800383a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800383e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003842:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003846:	e087      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003852:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003a10 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800385a:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003862:	ee07 3a90 	vmov	s15, r3
 8003866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800386a:	ed97 6a03 	vldr	s12, [r7, #12]
 800386e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800387a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800387e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800388a:	e065      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	ee07 3a90 	vmov	s15, r3
 8003892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003896:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800389a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800389e:	4b59      	ldr	r3, [pc, #356]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038a6:	ee07 3a90 	vmov	s15, r3
 80038aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80038b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80038ce:	e043      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	ee07 3a90 	vmov	s15, r3
 80038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80038de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038e2:	4b48      	ldr	r3, [pc, #288]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ea:	ee07 3a90 	vmov	s15, r3
 80038ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80038f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80038fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800390a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800390e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003912:	e021      	b.n	8003958 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	ee07 3a90 	vmov	s15, r3
 800391a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003926:	4b37      	ldr	r3, [pc, #220]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392e:	ee07 3a90 	vmov	s15, r3
 8003932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003936:	ed97 6a03 	vldr	s12, [r7, #12]
 800393a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003a0c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800393e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800394a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800394e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003956:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003958:	4b2a      	ldr	r3, [pc, #168]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	0a5b      	lsrs	r3, r3, #9
 800395e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800396e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003972:	edd7 6a07 	vldr	s13, [r7, #28]
 8003976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800397a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800397e:	ee17 2a90 	vmov	r2, s15
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003986:	4b1f      	ldr	r3, [pc, #124]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003990:	ee07 3a90 	vmov	s15, r3
 8003994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800399c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80039a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ac:	ee17 2a90 	vmov	r2, s15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80039b4:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	0e1b      	lsrs	r3, r3, #24
 80039ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039be:	ee07 3a90 	vmov	s15, r3
 80039c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80039ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80039d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039da:	ee17 2a90 	vmov	r2, s15
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80039e2:	e008      	b.n	80039f6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	609a      	str	r2, [r3, #8]
}
 80039f6:	bf00      	nop
 80039f8:	3724      	adds	r7, #36	; 0x24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	58024400 	.word	0x58024400
 8003a08:	03d09000 	.word	0x03d09000
 8003a0c:	46000000 	.word	0x46000000
 8003a10:	4c742400 	.word	0x4c742400
 8003a14:	4a742400 	.word	0x4a742400
 8003a18:	4bbebc20 	.word	0x4bbebc20

08003a1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003a2a:	4b53      	ldr	r3, [pc, #332]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d101      	bne.n	8003a3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e099      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003a3a:	4b4f      	ldr	r3, [pc, #316]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a4e      	ldr	r2, [pc, #312]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a40:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a46:	f7fd fa41 	bl	8000ecc <HAL_GetTick>
 8003a4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003a4e:	f7fd fa3d 	bl	8000ecc <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e086      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a60:	4b45      	ldr	r3, [pc, #276]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1f0      	bne.n	8003a4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003a6c:	4b42      	ldr	r3, [pc, #264]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	031b      	lsls	r3, r3, #12
 8003a7a:	493f      	ldr	r1, [pc, #252]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	3b01      	subs	r3, #1
 8003a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	025b      	lsls	r3, r3, #9
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	061b      	lsls	r3, r3, #24
 8003aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003ab0:	4931      	ldr	r1, [pc, #196]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003ab6:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	492d      	ldr	r1, [pc, #180]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ac8:	4b2b      	ldr	r3, [pc, #172]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003acc:	f023 0220 	bic.w	r2, r3, #32
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	4928      	ldr	r1, [pc, #160]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ada:	4b27      	ldr	r3, [pc, #156]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ade:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ae0:	f023 0310 	bic.w	r3, r3, #16
 8003ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ae6:	4b24      	ldr	r3, [pc, #144]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003ae8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <RCCEx_PLL2_Config+0x160>)
 8003aec:	4013      	ands	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	69d2      	ldr	r2, [r2, #28]
 8003af2:	00d2      	lsls	r2, r2, #3
 8003af4:	4920      	ldr	r1, [pc, #128]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003afa:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b00:	f043 0310 	orr.w	r3, r3, #16
 8003b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d106      	bne.n	8003b1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003b0c:	4b1a      	ldr	r3, [pc, #104]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b18:	e00f      	b.n	8003b3a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d106      	bne.n	8003b2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003b20:	4b15      	ldr	r3, [pc, #84]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b2c:	e005      	b.n	8003b3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003b2e:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b46:	f7fd f9c1 	bl	8000ecc <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b4c:	e008      	b.n	8003b60 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003b4e:	f7fd f9bd 	bl	8000ecc <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d901      	bls.n	8003b60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	e006      	b.n	8003b6e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <RCCEx_PLL2_Config+0x15c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0f0      	beq.n	8003b4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3710      	adds	r7, #16
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	ffff0007 	.word	0xffff0007

08003b80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d101      	bne.n	8003b9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e099      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003b9e:	4b4f      	ldr	r3, [pc, #316]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a4e      	ldr	r2, [pc, #312]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003baa:	f7fd f98f 	bl	8000ecc <HAL_GetTick>
 8003bae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bb0:	e008      	b.n	8003bc4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003bb2:	f7fd f98b 	bl	8000ecc <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e086      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003bc4:	4b45      	ldr	r3, [pc, #276]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1f0      	bne.n	8003bb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003bd0:	4b42      	ldr	r3, [pc, #264]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	051b      	lsls	r3, r3, #20
 8003bde:	493f      	ldr	r1, [pc, #252]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	628b      	str	r3, [r1, #40]	; 0x28
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	025b      	lsls	r3, r3, #9
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	431a      	orrs	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	041b      	lsls	r3, r3, #16
 8003c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	061b      	lsls	r3, r3, #24
 8003c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c14:	4931      	ldr	r1, [pc, #196]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003c1a:	4b30      	ldr	r3, [pc, #192]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	492d      	ldr	r1, [pc, #180]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003c2c:	4b2b      	ldr	r3, [pc, #172]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	4928      	ldr	r1, [pc, #160]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003c3e:	4b27      	ldr	r3, [pc, #156]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003c4a:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <RCCEx_PLL3_Config+0x160>)
 8003c50:	4013      	ands	r3, r2
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	69d2      	ldr	r2, [r2, #28]
 8003c56:	00d2      	lsls	r2, r2, #3
 8003c58:	4920      	ldr	r1, [pc, #128]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003c5e:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d106      	bne.n	8003c7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003c70:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c74:	4a19      	ldr	r2, [pc, #100]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c7c:	e00f      	b.n	8003c9e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d106      	bne.n	8003c92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c8a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c90:	e005      	b.n	8003c9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003c9e:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a0e      	ldr	r2, [pc, #56]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ca8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003caa:	f7fd f90f 	bl	8000ecc <HAL_GetTick>
 8003cae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cb0:	e008      	b.n	8003cc4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003cb2:	f7fd f90b 	bl	8000ecc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e006      	b.n	8003cd2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003cc4:	4b05      	ldr	r3, [pc, #20]	; (8003cdc <RCCEx_PLL3_Config+0x15c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d0f0      	beq.n	8003cb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	58024400 	.word	0x58024400
 8003ce0:	ffff0007 	.word	0xffff0007

08003ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e042      	b.n	8003d7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d106      	bne.n	8003d0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f7fc ff9f 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2224      	movs	r2, #36	; 0x24
 8003d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f82c 	bl	8003d84 <UART_SetConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fd80 	bl	8004844 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fe07 	bl	8004988 <UART_CheckIdleState>
 8003d7a:	4603      	mov	r3, r0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d84:	b5b0      	push	{r4, r5, r7, lr}
 8003d86:	b08e      	sub	sp, #56	; 0x38
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	689a      	ldr	r2, [r3, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4bbf      	ldr	r3, [pc, #764]	; (80040b0 <UART_SetConfig+0x32c>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4ab5      	ldr	r2, [pc, #724]	; (80040b4 <UART_SetConfig+0x330>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d004      	beq.n	8003dee <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dea:	4313      	orrs	r3, r2
 8003dec:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	4bb0      	ldr	r3, [pc, #704]	; (80040b8 <UART_SetConfig+0x334>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dfe:	430b      	orrs	r3, r1
 8003e00:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f023 010f 	bic.w	r1, r3, #15
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4aa7      	ldr	r2, [pc, #668]	; (80040bc <UART_SetConfig+0x338>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d176      	bne.n	8003f10 <UART_SetConfig+0x18c>
 8003e22:	4ba7      	ldr	r3, [pc, #668]	; (80040c0 <UART_SetConfig+0x33c>)
 8003e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e2a:	2b28      	cmp	r3, #40	; 0x28
 8003e2c:	d86c      	bhi.n	8003f08 <UART_SetConfig+0x184>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <UART_SetConfig+0xb0>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003ed9 	.word	0x08003ed9
 8003e38:	08003f09 	.word	0x08003f09
 8003e3c:	08003f09 	.word	0x08003f09
 8003e40:	08003f09 	.word	0x08003f09
 8003e44:	08003f09 	.word	0x08003f09
 8003e48:	08003f09 	.word	0x08003f09
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003f09 	.word	0x08003f09
 8003e54:	08003ee1 	.word	0x08003ee1
 8003e58:	08003f09 	.word	0x08003f09
 8003e5c:	08003f09 	.word	0x08003f09
 8003e60:	08003f09 	.word	0x08003f09
 8003e64:	08003f09 	.word	0x08003f09
 8003e68:	08003f09 	.word	0x08003f09
 8003e6c:	08003f09 	.word	0x08003f09
 8003e70:	08003f09 	.word	0x08003f09
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003f09 	.word	0x08003f09
 8003e7c:	08003f09 	.word	0x08003f09
 8003e80:	08003f09 	.word	0x08003f09
 8003e84:	08003f09 	.word	0x08003f09
 8003e88:	08003f09 	.word	0x08003f09
 8003e8c:	08003f09 	.word	0x08003f09
 8003e90:	08003f09 	.word	0x08003f09
 8003e94:	08003ef1 	.word	0x08003ef1
 8003e98:	08003f09 	.word	0x08003f09
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	08003f09 	.word	0x08003f09
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003ef9 	.word	0x08003ef9
 8003eb8:	08003f09 	.word	0x08003f09
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f09 	.word	0x08003f09
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f01 	.word	0x08003f01
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ede:	e222      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ee6:	e21e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003eee:	e21a      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003ef6:	e216      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003ef8:	2320      	movs	r3, #32
 8003efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003efe:	e212      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f00:	2340      	movs	r3, #64	; 0x40
 8003f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f06:	e20e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f08:	2380      	movs	r3, #128	; 0x80
 8003f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f0e:	e20a      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a6b      	ldr	r2, [pc, #428]	; (80040c4 <UART_SetConfig+0x340>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d130      	bne.n	8003f7c <UART_SetConfig+0x1f8>
 8003f1a:	4b69      	ldr	r3, [pc, #420]	; (80040c0 <UART_SetConfig+0x33c>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f003 0307 	and.w	r3, r3, #7
 8003f22:	2b05      	cmp	r3, #5
 8003f24:	d826      	bhi.n	8003f74 <UART_SetConfig+0x1f0>
 8003f26:	a201      	add	r2, pc, #4	; (adr r2, 8003f2c <UART_SetConfig+0x1a8>)
 8003f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2c:	08003f45 	.word	0x08003f45
 8003f30:	08003f4d 	.word	0x08003f4d
 8003f34:	08003f55 	.word	0x08003f55
 8003f38:	08003f5d 	.word	0x08003f5d
 8003f3c:	08003f65 	.word	0x08003f65
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	2300      	movs	r3, #0
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f4a:	e1ec      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f52:	e1e8      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f54:	2308      	movs	r3, #8
 8003f56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f5a:	e1e4      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f5c:	2310      	movs	r3, #16
 8003f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f62:	e1e0      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f64:	2320      	movs	r3, #32
 8003f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f6a:	e1dc      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f72:	e1d8      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003f7a:	e1d4      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a51      	ldr	r2, [pc, #324]	; (80040c8 <UART_SetConfig+0x344>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d130      	bne.n	8003fe8 <UART_SetConfig+0x264>
 8003f86:	4b4e      	ldr	r3, [pc, #312]	; (80040c0 <UART_SetConfig+0x33c>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d826      	bhi.n	8003fe0 <UART_SetConfig+0x25c>
 8003f92:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x214>)
 8003f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f98:	08003fb1 	.word	0x08003fb1
 8003f9c:	08003fb9 	.word	0x08003fb9
 8003fa0:	08003fc1 	.word	0x08003fc1
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fb6:	e1b6      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fb8:	2304      	movs	r3, #4
 8003fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fbe:	e1b2      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fc0:	2308      	movs	r3, #8
 8003fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fc6:	e1ae      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fc8:	2310      	movs	r3, #16
 8003fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fce:	e1aa      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fd0:	2320      	movs	r3, #32
 8003fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fd6:	e1a6      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fd8:	2340      	movs	r3, #64	; 0x40
 8003fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fde:	e1a2      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fe0:	2380      	movs	r3, #128	; 0x80
 8003fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8003fe6:	e19e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a37      	ldr	r2, [pc, #220]	; (80040cc <UART_SetConfig+0x348>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d130      	bne.n	8004054 <UART_SetConfig+0x2d0>
 8003ff2:	4b33      	ldr	r3, [pc, #204]	; (80040c0 <UART_SetConfig+0x33c>)
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	2b05      	cmp	r3, #5
 8003ffc:	d826      	bhi.n	800404c <UART_SetConfig+0x2c8>
 8003ffe:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x280>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	0800401d 	.word	0x0800401d
 8004008:	08004025 	.word	0x08004025
 800400c:	0800402d 	.word	0x0800402d
 8004010:	08004035 	.word	0x08004035
 8004014:	0800403d 	.word	0x0800403d
 8004018:	08004045 	.word	0x08004045
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004022:	e180      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004024:	2304      	movs	r3, #4
 8004026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800402a:	e17c      	b.n	8004326 <UART_SetConfig+0x5a2>
 800402c:	2308      	movs	r3, #8
 800402e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004032:	e178      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004034:	2310      	movs	r3, #16
 8004036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403a:	e174      	b.n	8004326 <UART_SetConfig+0x5a2>
 800403c:	2320      	movs	r3, #32
 800403e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004042:	e170      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404a:	e16c      	b.n	8004326 <UART_SetConfig+0x5a2>
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004052:	e168      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <UART_SetConfig+0x34c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d142      	bne.n	80040e4 <UART_SetConfig+0x360>
 800405e:	4b18      	ldr	r3, [pc, #96]	; (80040c0 <UART_SetConfig+0x33c>)
 8004060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	2b05      	cmp	r3, #5
 8004068:	d838      	bhi.n	80040dc <UART_SetConfig+0x358>
 800406a:	a201      	add	r2, pc, #4	; (adr r2, 8004070 <UART_SetConfig+0x2ec>)
 800406c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004070:	08004089 	.word	0x08004089
 8004074:	08004091 	.word	0x08004091
 8004078:	08004099 	.word	0x08004099
 800407c:	080040a1 	.word	0x080040a1
 8004080:	080040a9 	.word	0x080040a9
 8004084:	080040d5 	.word	0x080040d5
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800408e:	e14a      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004090:	2304      	movs	r3, #4
 8004092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004096:	e146      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004098:	2308      	movs	r3, #8
 800409a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800409e:	e142      	b.n	8004326 <UART_SetConfig+0x5a2>
 80040a0:	2310      	movs	r3, #16
 80040a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a6:	e13e      	b.n	8004326 <UART_SetConfig+0x5a2>
 80040a8:	2320      	movs	r3, #32
 80040aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ae:	e13a      	b.n	8004326 <UART_SetConfig+0x5a2>
 80040b0:	cfff69f3 	.word	0xcfff69f3
 80040b4:	58000c00 	.word	0x58000c00
 80040b8:	11fff4ff 	.word	0x11fff4ff
 80040bc:	40011000 	.word	0x40011000
 80040c0:	58024400 	.word	0x58024400
 80040c4:	40004400 	.word	0x40004400
 80040c8:	40004800 	.word	0x40004800
 80040cc:	40004c00 	.word	0x40004c00
 80040d0:	40005000 	.word	0x40005000
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040da:	e124      	b.n	8004326 <UART_SetConfig+0x5a2>
 80040dc:	2380      	movs	r3, #128	; 0x80
 80040de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040e2:	e120      	b.n	8004326 <UART_SetConfig+0x5a2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4acc      	ldr	r2, [pc, #816]	; (800441c <UART_SetConfig+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d176      	bne.n	80041dc <UART_SetConfig+0x458>
 80040ee:	4bcc      	ldr	r3, [pc, #816]	; (8004420 <UART_SetConfig+0x69c>)
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040f6:	2b28      	cmp	r3, #40	; 0x28
 80040f8:	d86c      	bhi.n	80041d4 <UART_SetConfig+0x450>
 80040fa:	a201      	add	r2, pc, #4	; (adr r2, 8004100 <UART_SetConfig+0x37c>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	080041a5 	.word	0x080041a5
 8004104:	080041d5 	.word	0x080041d5
 8004108:	080041d5 	.word	0x080041d5
 800410c:	080041d5 	.word	0x080041d5
 8004110:	080041d5 	.word	0x080041d5
 8004114:	080041d5 	.word	0x080041d5
 8004118:	080041d5 	.word	0x080041d5
 800411c:	080041d5 	.word	0x080041d5
 8004120:	080041ad 	.word	0x080041ad
 8004124:	080041d5 	.word	0x080041d5
 8004128:	080041d5 	.word	0x080041d5
 800412c:	080041d5 	.word	0x080041d5
 8004130:	080041d5 	.word	0x080041d5
 8004134:	080041d5 	.word	0x080041d5
 8004138:	080041d5 	.word	0x080041d5
 800413c:	080041d5 	.word	0x080041d5
 8004140:	080041b5 	.word	0x080041b5
 8004144:	080041d5 	.word	0x080041d5
 8004148:	080041d5 	.word	0x080041d5
 800414c:	080041d5 	.word	0x080041d5
 8004150:	080041d5 	.word	0x080041d5
 8004154:	080041d5 	.word	0x080041d5
 8004158:	080041d5 	.word	0x080041d5
 800415c:	080041d5 	.word	0x080041d5
 8004160:	080041bd 	.word	0x080041bd
 8004164:	080041d5 	.word	0x080041d5
 8004168:	080041d5 	.word	0x080041d5
 800416c:	080041d5 	.word	0x080041d5
 8004170:	080041d5 	.word	0x080041d5
 8004174:	080041d5 	.word	0x080041d5
 8004178:	080041d5 	.word	0x080041d5
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041c5 	.word	0x080041c5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041cd 	.word	0x080041cd
 80041a4:	2301      	movs	r3, #1
 80041a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041aa:	e0bc      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041ac:	2304      	movs	r3, #4
 80041ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041b2:	e0b8      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041b4:	2308      	movs	r3, #8
 80041b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ba:	e0b4      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041bc:	2310      	movs	r3, #16
 80041be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041c2:	e0b0      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041c4:	2320      	movs	r3, #32
 80041c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ca:	e0ac      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041d2:	e0a8      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041da:	e0a4      	b.n	8004326 <UART_SetConfig+0x5a2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a90      	ldr	r2, [pc, #576]	; (8004424 <UART_SetConfig+0x6a0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d130      	bne.n	8004248 <UART_SetConfig+0x4c4>
 80041e6:	4b8e      	ldr	r3, [pc, #568]	; (8004420 <UART_SetConfig+0x69c>)
 80041e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	2b05      	cmp	r3, #5
 80041f0:	d826      	bhi.n	8004240 <UART_SetConfig+0x4bc>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x474>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004211 	.word	0x08004211
 80041fc:	08004219 	.word	0x08004219
 8004200:	08004221 	.word	0x08004221
 8004204:	08004229 	.word	0x08004229
 8004208:	08004231 	.word	0x08004231
 800420c:	08004239 	.word	0x08004239
 8004210:	2300      	movs	r3, #0
 8004212:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004216:	e086      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004218:	2304      	movs	r3, #4
 800421a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800421e:	e082      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004220:	2308      	movs	r3, #8
 8004222:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004226:	e07e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004228:	2310      	movs	r3, #16
 800422a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800422e:	e07a      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004230:	2320      	movs	r3, #32
 8004232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004236:	e076      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004238:	2340      	movs	r3, #64	; 0x40
 800423a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423e:	e072      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004240:	2380      	movs	r3, #128	; 0x80
 8004242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004246:	e06e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a76      	ldr	r2, [pc, #472]	; (8004428 <UART_SetConfig+0x6a4>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d130      	bne.n	80042b4 <UART_SetConfig+0x530>
 8004252:	4b73      	ldr	r3, [pc, #460]	; (8004420 <UART_SetConfig+0x69c>)
 8004254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004256:	f003 0307 	and.w	r3, r3, #7
 800425a:	2b05      	cmp	r3, #5
 800425c:	d826      	bhi.n	80042ac <UART_SetConfig+0x528>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <UART_SetConfig+0x4e0>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	0800427d 	.word	0x0800427d
 8004268:	08004285 	.word	0x08004285
 800426c:	0800428d 	.word	0x0800428d
 8004270:	08004295 	.word	0x08004295
 8004274:	0800429d 	.word	0x0800429d
 8004278:	080042a5 	.word	0x080042a5
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004282:	e050      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004284:	2304      	movs	r3, #4
 8004286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800428a:	e04c      	b.n	8004326 <UART_SetConfig+0x5a2>
 800428c:	2308      	movs	r3, #8
 800428e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004292:	e048      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004294:	2310      	movs	r3, #16
 8004296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800429a:	e044      	b.n	8004326 <UART_SetConfig+0x5a2>
 800429c:	2320      	movs	r3, #32
 800429e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042a2:	e040      	b.n	8004326 <UART_SetConfig+0x5a2>
 80042a4:	2340      	movs	r3, #64	; 0x40
 80042a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042aa:	e03c      	b.n	8004326 <UART_SetConfig+0x5a2>
 80042ac:	2380      	movs	r3, #128	; 0x80
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042b2:	e038      	b.n	8004326 <UART_SetConfig+0x5a2>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a5c      	ldr	r2, [pc, #368]	; (800442c <UART_SetConfig+0x6a8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d130      	bne.n	8004320 <UART_SetConfig+0x59c>
 80042be:	4b58      	ldr	r3, [pc, #352]	; (8004420 <UART_SetConfig+0x69c>)
 80042c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	2b05      	cmp	r3, #5
 80042c8:	d826      	bhi.n	8004318 <UART_SetConfig+0x594>
 80042ca:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <UART_SetConfig+0x54c>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042e9 	.word	0x080042e9
 80042d4:	080042f1 	.word	0x080042f1
 80042d8:	080042f9 	.word	0x080042f9
 80042dc:	08004301 	.word	0x08004301
 80042e0:	08004309 	.word	0x08004309
 80042e4:	08004311 	.word	0x08004311
 80042e8:	2302      	movs	r3, #2
 80042ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042ee:	e01a      	b.n	8004326 <UART_SetConfig+0x5a2>
 80042f0:	2304      	movs	r3, #4
 80042f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042f6:	e016      	b.n	8004326 <UART_SetConfig+0x5a2>
 80042f8:	2308      	movs	r3, #8
 80042fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80042fe:	e012      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004300:	2310      	movs	r3, #16
 8004302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004306:	e00e      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004308:	2320      	movs	r3, #32
 800430a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430e:	e00a      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004310:	2340      	movs	r3, #64	; 0x40
 8004312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004316:	e006      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431e:	e002      	b.n	8004326 <UART_SetConfig+0x5a2>
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a40      	ldr	r2, [pc, #256]	; (800442c <UART_SetConfig+0x6a8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	f040 80ef 	bne.w	8004510 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004336:	2b20      	cmp	r3, #32
 8004338:	dc46      	bgt.n	80043c8 <UART_SetConfig+0x644>
 800433a:	2b02      	cmp	r3, #2
 800433c:	f2c0 8081 	blt.w	8004442 <UART_SetConfig+0x6be>
 8004340:	3b02      	subs	r3, #2
 8004342:	2b1e      	cmp	r3, #30
 8004344:	d87d      	bhi.n	8004442 <UART_SetConfig+0x6be>
 8004346:	a201      	add	r2, pc, #4	; (adr r2, 800434c <UART_SetConfig+0x5c8>)
 8004348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800434c:	080043cf 	.word	0x080043cf
 8004350:	08004443 	.word	0x08004443
 8004354:	080043d7 	.word	0x080043d7
 8004358:	08004443 	.word	0x08004443
 800435c:	08004443 	.word	0x08004443
 8004360:	08004443 	.word	0x08004443
 8004364:	080043e7 	.word	0x080043e7
 8004368:	08004443 	.word	0x08004443
 800436c:	08004443 	.word	0x08004443
 8004370:	08004443 	.word	0x08004443
 8004374:	08004443 	.word	0x08004443
 8004378:	08004443 	.word	0x08004443
 800437c:	08004443 	.word	0x08004443
 8004380:	08004443 	.word	0x08004443
 8004384:	080043f7 	.word	0x080043f7
 8004388:	08004443 	.word	0x08004443
 800438c:	08004443 	.word	0x08004443
 8004390:	08004443 	.word	0x08004443
 8004394:	08004443 	.word	0x08004443
 8004398:	08004443 	.word	0x08004443
 800439c:	08004443 	.word	0x08004443
 80043a0:	08004443 	.word	0x08004443
 80043a4:	08004443 	.word	0x08004443
 80043a8:	08004443 	.word	0x08004443
 80043ac:	08004443 	.word	0x08004443
 80043b0:	08004443 	.word	0x08004443
 80043b4:	08004443 	.word	0x08004443
 80043b8:	08004443 	.word	0x08004443
 80043bc:	08004443 	.word	0x08004443
 80043c0:	08004443 	.word	0x08004443
 80043c4:	08004435 	.word	0x08004435
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d036      	beq.n	800443a <UART_SetConfig+0x6b6>
 80043cc:	e039      	b.n	8004442 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80043ce:	f7ff f867 	bl	80034a0 <HAL_RCCEx_GetD3PCLK1Freq>
 80043d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80043d4:	e03b      	b.n	800444e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80043d6:	f107 0314 	add.w	r3, r7, #20
 80043da:	4618      	mov	r0, r3
 80043dc:	f7ff f876 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043e4:	e033      	b.n	800444e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80043e6:	f107 0308 	add.w	r3, r7, #8
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f9c2 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043f4:	e02b      	b.n	800444e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043f6:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <UART_SetConfig+0x69c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <UART_SetConfig+0x69c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	4a08      	ldr	r2, [pc, #32]	; (8004430 <UART_SetConfig+0x6ac>)
 800440e:	fa22 f303 	lsr.w	r3, r2, r3
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004414:	e01b      	b.n	800444e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004416:	4b06      	ldr	r3, [pc, #24]	; (8004430 <UART_SetConfig+0x6ac>)
 8004418:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800441a:	e018      	b.n	800444e <UART_SetConfig+0x6ca>
 800441c:	40011400 	.word	0x40011400
 8004420:	58024400 	.word	0x58024400
 8004424:	40007800 	.word	0x40007800
 8004428:	40007c00 	.word	0x40007c00
 800442c:	58000c00 	.word	0x58000c00
 8004430:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004434:	4bc4      	ldr	r3, [pc, #784]	; (8004748 <UART_SetConfig+0x9c4>)
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004438:	e009      	b.n	800444e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004440:	e005      	b.n	800444e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800444c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 81da 	beq.w	800480a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445a:	4abc      	ldr	r2, [pc, #752]	; (800474c <UART_SetConfig+0x9c8>)
 800445c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004460:	461a      	mov	r2, r3
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	fbb3 f3f2 	udiv	r3, r3, r2
 8004468:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	6a3a      	ldr	r2, [r7, #32]
 8004476:	429a      	cmp	r2, r3
 8004478:	d305      	bcc.n	8004486 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004480:	6a3a      	ldr	r2, [r7, #32]
 8004482:	429a      	cmp	r2, r3
 8004484:	d903      	bls.n	800448e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800448c:	e1bd      	b.n	800480a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800448e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004490:	4618      	mov	r0, r3
 8004492:	f04f 0100 	mov.w	r1, #0
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800449a:	4aac      	ldr	r2, [pc, #688]	; (800474c <UART_SetConfig+0x9c8>)
 800449c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	f04f 0300 	mov.w	r3, #0
 80044a6:	f7fb ff17 	bl	80002d8 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4610      	mov	r0, r2
 80044b0:	4619      	mov	r1, r3
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	020b      	lsls	r3, r1, #8
 80044bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80044c0:	0202      	lsls	r2, r0, #8
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6849      	ldr	r1, [r1, #4]
 80044c6:	0849      	lsrs	r1, r1, #1
 80044c8:	4608      	mov	r0, r1
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	1814      	adds	r4, r2, r0
 80044d0:	eb43 0501 	adc.w	r5, r3, r1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	461a      	mov	r2, r3
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fb fef9 	bl	80002d8 <__aeabi_uldivmod>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4613      	mov	r3, r2
 80044ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f4:	d308      	bcc.n	8004508 <UART_SetConfig+0x784>
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fc:	d204      	bcs.n	8004508 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004504:	60da      	str	r2, [r3, #12]
 8004506:	e180      	b.n	800480a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800450e:	e17c      	b.n	800480a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004518:	f040 80be 	bne.w	8004698 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800451c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004520:	2b20      	cmp	r3, #32
 8004522:	dc49      	bgt.n	80045b8 <UART_SetConfig+0x834>
 8004524:	2b00      	cmp	r3, #0
 8004526:	db7c      	blt.n	8004622 <UART_SetConfig+0x89e>
 8004528:	2b20      	cmp	r3, #32
 800452a:	d87a      	bhi.n	8004622 <UART_SetConfig+0x89e>
 800452c:	a201      	add	r2, pc, #4	; (adr r2, 8004534 <UART_SetConfig+0x7b0>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	080045bf 	.word	0x080045bf
 8004538:	080045c7 	.word	0x080045c7
 800453c:	08004623 	.word	0x08004623
 8004540:	08004623 	.word	0x08004623
 8004544:	080045cf 	.word	0x080045cf
 8004548:	08004623 	.word	0x08004623
 800454c:	08004623 	.word	0x08004623
 8004550:	08004623 	.word	0x08004623
 8004554:	080045df 	.word	0x080045df
 8004558:	08004623 	.word	0x08004623
 800455c:	08004623 	.word	0x08004623
 8004560:	08004623 	.word	0x08004623
 8004564:	08004623 	.word	0x08004623
 8004568:	08004623 	.word	0x08004623
 800456c:	08004623 	.word	0x08004623
 8004570:	08004623 	.word	0x08004623
 8004574:	080045ef 	.word	0x080045ef
 8004578:	08004623 	.word	0x08004623
 800457c:	08004623 	.word	0x08004623
 8004580:	08004623 	.word	0x08004623
 8004584:	08004623 	.word	0x08004623
 8004588:	08004623 	.word	0x08004623
 800458c:	08004623 	.word	0x08004623
 8004590:	08004623 	.word	0x08004623
 8004594:	08004623 	.word	0x08004623
 8004598:	08004623 	.word	0x08004623
 800459c:	08004623 	.word	0x08004623
 80045a0:	08004623 	.word	0x08004623
 80045a4:	08004623 	.word	0x08004623
 80045a8:	08004623 	.word	0x08004623
 80045ac:	08004623 	.word	0x08004623
 80045b0:	08004623 	.word	0x08004623
 80045b4:	08004615 	.word	0x08004615
 80045b8:	2b40      	cmp	r3, #64	; 0x40
 80045ba:	d02e      	beq.n	800461a <UART_SetConfig+0x896>
 80045bc:	e031      	b.n	8004622 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045be:	f7fd ffd3 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 80045c2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045c4:	e033      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c6:	f7fd ffe5 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 80045ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80045cc:	e02f      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80045ce:	f107 0314 	add.w	r3, r7, #20
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fe ff7a 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045dc:	e027      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80045de:	f107 0308 	add.w	r3, r7, #8
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff f8c6 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ec:	e01f      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045ee:	4b58      	ldr	r3, [pc, #352]	; (8004750 <UART_SetConfig+0x9cc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80045fa:	4b55      	ldr	r3, [pc, #340]	; (8004750 <UART_SetConfig+0x9cc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	08db      	lsrs	r3, r3, #3
 8004600:	f003 0303 	and.w	r3, r3, #3
 8004604:	4a53      	ldr	r2, [pc, #332]	; (8004754 <UART_SetConfig+0x9d0>)
 8004606:	fa22 f303 	lsr.w	r3, r2, r3
 800460a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800460c:	e00f      	b.n	800462e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800460e:	4b51      	ldr	r3, [pc, #324]	; (8004754 <UART_SetConfig+0x9d0>)
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004612:	e00c      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004614:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <UART_SetConfig+0x9c4>)
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004618:	e009      	b.n	800462e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800461a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800461e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004620:	e005      	b.n	800462e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800462c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800462e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80ea 	beq.w	800480a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	4a44      	ldr	r2, [pc, #272]	; (800474c <UART_SetConfig+0x9c8>)
 800463c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004640:	461a      	mov	r2, r3
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	fbb3 f3f2 	udiv	r3, r3, r2
 8004648:	005a      	lsls	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	441a      	add	r2, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	fbb2 f3f3 	udiv	r3, r2, r3
 800465a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800465c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465e:	2b0f      	cmp	r3, #15
 8004660:	d916      	bls.n	8004690 <UART_SetConfig+0x90c>
 8004662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004668:	d212      	bcs.n	8004690 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800466a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466c:	b29b      	uxth	r3, r3
 800466e:	f023 030f 	bic.w	r3, r3, #15
 8004672:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	085b      	lsrs	r3, r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	b29a      	uxth	r2, r3
 8004680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004682:	4313      	orrs	r3, r2
 8004684:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800468c:	60da      	str	r2, [r3, #12]
 800468e:	e0bc      	b.n	800480a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004696:	e0b8      	b.n	800480a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004698:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800469c:	2b20      	cmp	r3, #32
 800469e:	dc4b      	bgt.n	8004738 <UART_SetConfig+0x9b4>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f2c0 8087 	blt.w	80047b4 <UART_SetConfig+0xa30>
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	f200 8084 	bhi.w	80047b4 <UART_SetConfig+0xa30>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x930>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	0800473f 	.word	0x0800473f
 80046b8:	08004759 	.word	0x08004759
 80046bc:	080047b5 	.word	0x080047b5
 80046c0:	080047b5 	.word	0x080047b5
 80046c4:	08004761 	.word	0x08004761
 80046c8:	080047b5 	.word	0x080047b5
 80046cc:	080047b5 	.word	0x080047b5
 80046d0:	080047b5 	.word	0x080047b5
 80046d4:	08004771 	.word	0x08004771
 80046d8:	080047b5 	.word	0x080047b5
 80046dc:	080047b5 	.word	0x080047b5
 80046e0:	080047b5 	.word	0x080047b5
 80046e4:	080047b5 	.word	0x080047b5
 80046e8:	080047b5 	.word	0x080047b5
 80046ec:	080047b5 	.word	0x080047b5
 80046f0:	080047b5 	.word	0x080047b5
 80046f4:	08004781 	.word	0x08004781
 80046f8:	080047b5 	.word	0x080047b5
 80046fc:	080047b5 	.word	0x080047b5
 8004700:	080047b5 	.word	0x080047b5
 8004704:	080047b5 	.word	0x080047b5
 8004708:	080047b5 	.word	0x080047b5
 800470c:	080047b5 	.word	0x080047b5
 8004710:	080047b5 	.word	0x080047b5
 8004714:	080047b5 	.word	0x080047b5
 8004718:	080047b5 	.word	0x080047b5
 800471c:	080047b5 	.word	0x080047b5
 8004720:	080047b5 	.word	0x080047b5
 8004724:	080047b5 	.word	0x080047b5
 8004728:	080047b5 	.word	0x080047b5
 800472c:	080047b5 	.word	0x080047b5
 8004730:	080047b5 	.word	0x080047b5
 8004734:	080047a7 	.word	0x080047a7
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d037      	beq.n	80047ac <UART_SetConfig+0xa28>
 800473c:	e03a      	b.n	80047b4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473e:	f7fd ff13 	bl	8002568 <HAL_RCC_GetPCLK1Freq>
 8004742:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004744:	e03c      	b.n	80047c0 <UART_SetConfig+0xa3c>
 8004746:	bf00      	nop
 8004748:	003d0900 	.word	0x003d0900
 800474c:	08004e34 	.word	0x08004e34
 8004750:	58024400 	.word	0x58024400
 8004754:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004758:	f7fd ff1c 	bl	8002594 <HAL_RCC_GetPCLK2Freq>
 800475c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800475e:	e02f      	b.n	80047c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004760:	f107 0314 	add.w	r3, r7, #20
 8004764:	4618      	mov	r0, r3
 8004766:	f7fe feb1 	bl	80034cc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800476e:	e027      	b.n	80047c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe fffd 	bl	8003774 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800477e:	e01f      	b.n	80047c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004780:	4b2c      	ldr	r3, [pc, #176]	; (8004834 <UART_SetConfig+0xab0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d009      	beq.n	80047a0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800478c:	4b29      	ldr	r3, [pc, #164]	; (8004834 <UART_SetConfig+0xab0>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	4a28      	ldr	r2, [pc, #160]	; (8004838 <UART_SetConfig+0xab4>)
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800479e:	e00f      	b.n	80047c0 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80047a0:	4b25      	ldr	r3, [pc, #148]	; (8004838 <UART_SetConfig+0xab4>)
 80047a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047a4:	e00c      	b.n	80047c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80047a6:	4b25      	ldr	r3, [pc, #148]	; (800483c <UART_SetConfig+0xab8>)
 80047a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047aa:	e009      	b.n	80047c0 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80047b2:	e005      	b.n	80047c0 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80047be:	bf00      	nop
    }

    if (pclk != 0U)
 80047c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d021      	beq.n	800480a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	4a1d      	ldr	r2, [pc, #116]	; (8004840 <UART_SetConfig+0xabc>)
 80047cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047d0:	461a      	mov	r2, r3
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ec:	2b0f      	cmp	r3, #15
 80047ee:	d909      	bls.n	8004804 <UART_SetConfig+0xa80>
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f6:	d205      	bcs.n	8004804 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60da      	str	r2, [r3, #12]
 8004802:	e002      	b.n	800480a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004826:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800482a:	4618      	mov	r0, r3
 800482c:	3738      	adds	r7, #56	; 0x38
 800482e:	46bd      	mov	sp, r7
 8004830:	bdb0      	pop	{r4, r5, r7, pc}
 8004832:	bf00      	nop
 8004834:	58024400 	.word	0x58024400
 8004838:	03d09000 	.word	0x03d09000
 800483c:	003d0900 	.word	0x003d0900
 8004840:	08004e34 	.word	0x08004e34

08004844 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00a      	beq.n	800486e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	430a      	orrs	r2, r1
 800486c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00a      	beq.n	8004890 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	430a      	orrs	r2, r1
 800488e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00a      	beq.n	80048f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	430a      	orrs	r2, r1
 80048f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00a      	beq.n	8004918 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	430a      	orrs	r2, r1
 8004916:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01a      	beq.n	800495a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004942:	d10a      	bne.n	800495a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af02      	add	r7, sp, #8
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004998:	f7fc fa98 	bl	8000ecc <HAL_GetTick>
 800499c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d10e      	bne.n	80049ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f82f 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e025      	b.n	8004a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b04      	cmp	r3, #4
 80049d6:	d10e      	bne.n	80049f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f819 	bl	8004a1e <UART_WaitOnFlagUntilTimeout>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e00f      	b.n	8004a16 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3710      	adds	r7, #16
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a1e:	b580      	push	{r7, lr}
 8004a20:	b09c      	sub	sp, #112	; 0x70
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	60f8      	str	r0, [r7, #12]
 8004a26:	60b9      	str	r1, [r7, #8]
 8004a28:	603b      	str	r3, [r7, #0]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a2e:	e0a9      	b.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a36:	f000 80a5 	beq.w	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3a:	f7fc fa47 	bl	8000ecc <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d302      	bcc.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
 8004a4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d140      	bne.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a64:	667b      	str	r3, [r7, #100]	; 0x64
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004a7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e6      	bne.n	8004a50 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3308      	adds	r3, #8
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a94:	f023 0301 	bic.w	r3, r3, #1
 8004a98:	663b      	str	r3, [r7, #96]	; 0x60
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3308      	adds	r3, #8
 8004aa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004aa2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004aa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e5      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e069      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d051      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aee:	d149      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	e853 3f00 	ldrex	r3, [r3]
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b20:	e841 2300 	strex	r3, r2, [r1]
 8004b24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d1e6      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3308      	adds	r3, #8
 8004b4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b4c:	623a      	str	r2, [r7, #32]
 8004b4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b50:	69f9      	ldr	r1, [r7, #28]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	e841 2300 	strex	r3, r2, [r1]
 8004b58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1e5      	bne.n	8004b2c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e010      	b.n	8004ba6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	f43f af46 	beq.w	8004a30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3770      	adds	r7, #112	; 0x70
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d101      	bne.n	8004bc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	e027      	b.n	8004c14 <HAL_UARTEx_DisableFifoMode+0x66>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2224      	movs	r2, #36	; 0x24
 8004bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0201 	bic.w	r2, r2, #1
 8004bea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004bf2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d101      	bne.n	8004c38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004c34:	2302      	movs	r3, #2
 8004c36:	e02d      	b.n	8004c94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2224      	movs	r2, #36	; 0x24
 8004c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0201 	bic.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	683a      	ldr	r2, [r7, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f84f 	bl	8004d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e02d      	b.n	8004d10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2224      	movs	r2, #36	; 0x24
 8004cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f811 	bl	8004d18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d108      	bne.n	8004d3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004d38:	e031      	b.n	8004d9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004d3a:	2310      	movs	r3, #16
 8004d3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004d3e:	2310      	movs	r3, #16
 8004d40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	0e5b      	lsrs	r3, r3, #25
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	0f5b      	lsrs	r3, r3, #29
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	7b3a      	ldrb	r2, [r7, #12]
 8004d66:	4911      	ldr	r1, [pc, #68]	; (8004dac <UARTEx_SetNbDataToProcess+0x94>)
 8004d68:	5c8a      	ldrb	r2, [r1, r2]
 8004d6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d6e:	7b3a      	ldrb	r2, [r7, #12]
 8004d70:	490f      	ldr	r1, [pc, #60]	; (8004db0 <UARTEx_SetNbDataToProcess+0x98>)
 8004d72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d74:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	7b7a      	ldrb	r2, [r7, #13]
 8004d84:	4909      	ldr	r1, [pc, #36]	; (8004dac <UARTEx_SetNbDataToProcess+0x94>)
 8004d86:	5c8a      	ldrb	r2, [r1, r2]
 8004d88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d8c:	7b7a      	ldrb	r2, [r7, #13]
 8004d8e:	4908      	ldr	r1, [pc, #32]	; (8004db0 <UARTEx_SetNbDataToProcess+0x98>)
 8004d90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d92:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	08004e4c 	.word	0x08004e4c
 8004db0:	08004e54 	.word	0x08004e54

08004db4 <__libc_init_array>:
 8004db4:	b570      	push	{r4, r5, r6, lr}
 8004db6:	4d0d      	ldr	r5, [pc, #52]	; (8004dec <__libc_init_array+0x38>)
 8004db8:	4c0d      	ldr	r4, [pc, #52]	; (8004df0 <__libc_init_array+0x3c>)
 8004dba:	1b64      	subs	r4, r4, r5
 8004dbc:	10a4      	asrs	r4, r4, #2
 8004dbe:	2600      	movs	r6, #0
 8004dc0:	42a6      	cmp	r6, r4
 8004dc2:	d109      	bne.n	8004dd8 <__libc_init_array+0x24>
 8004dc4:	4d0b      	ldr	r5, [pc, #44]	; (8004df4 <__libc_init_array+0x40>)
 8004dc6:	4c0c      	ldr	r4, [pc, #48]	; (8004df8 <__libc_init_array+0x44>)
 8004dc8:	f000 f820 	bl	8004e0c <_init>
 8004dcc:	1b64      	subs	r4, r4, r5
 8004dce:	10a4      	asrs	r4, r4, #2
 8004dd0:	2600      	movs	r6, #0
 8004dd2:	42a6      	cmp	r6, r4
 8004dd4:	d105      	bne.n	8004de2 <__libc_init_array+0x2e>
 8004dd6:	bd70      	pop	{r4, r5, r6, pc}
 8004dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ddc:	4798      	blx	r3
 8004dde:	3601      	adds	r6, #1
 8004de0:	e7ee      	b.n	8004dc0 <__libc_init_array+0xc>
 8004de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de6:	4798      	blx	r3
 8004de8:	3601      	adds	r6, #1
 8004dea:	e7f2      	b.n	8004dd2 <__libc_init_array+0x1e>
 8004dec:	08004e64 	.word	0x08004e64
 8004df0:	08004e64 	.word	0x08004e64
 8004df4:	08004e64 	.word	0x08004e64
 8004df8:	08004e68 	.word	0x08004e68

08004dfc <memset>:
 8004dfc:	4402      	add	r2, r0
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d100      	bne.n	8004e06 <memset+0xa>
 8004e04:	4770      	bx	lr
 8004e06:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0a:	e7f9      	b.n	8004e00 <memset+0x4>

08004e0c <_init>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr

08004e18 <_fini>:
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e1a:	bf00      	nop
 8004e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1e:	bc08      	pop	{r3}
 8004e20:	469e      	mov	lr, r3
 8004e22:	4770      	bx	lr
