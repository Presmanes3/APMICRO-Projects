
Practicas_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ce4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb4  08004fb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb4  08004fb4  00014fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fbc  08004fbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fbc  08004fbc  00014fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc0  08004fc0  00014fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08004fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  24000010  08004fd4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000c0  08004fd4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b6fd  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002974  00000000  00000000  0003b73b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0003e0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a98  00000000  00000000  0003ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000416d3  00000000  00000000  0003f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4e7  00000000  00000000  00080d5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001987f6  00000000  00000000  00090242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00228a38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e00  00000000  00000000  00228a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004f64 	.word	0x08004f64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004f64 	.word	0x08004f64

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d4:	4b3f      	ldr	r3, [pc, #252]	; (80006d4 <SystemInit+0x104>)
 80005d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005da:	4a3e      	ldr	r2, [pc, #248]	; (80006d4 <SystemInit+0x104>)
 80005dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e4:	4b3b      	ldr	r3, [pc, #236]	; (80006d4 <SystemInit+0x104>)
 80005e6:	691b      	ldr	r3, [r3, #16]
 80005e8:	4a3a      	ldr	r2, [pc, #232]	; (80006d4 <SystemInit+0x104>)
 80005ea:	f043 0310 	orr.w	r3, r3, #16
 80005ee:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0x108>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	2b06      	cmp	r3, #6
 80005fa:	d807      	bhi.n	800060c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <SystemInit+0x108>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f023 030f 	bic.w	r3, r3, #15
 8000604:	4a34      	ldr	r2, [pc, #208]	; (80006d8 <SystemInit+0x108>)
 8000606:	f043 0307 	orr.w	r3, r3, #7
 800060a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800060c:	4b33      	ldr	r3, [pc, #204]	; (80006dc <SystemInit+0x10c>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x10c>)
 8000612:	f043 0301 	orr.w	r3, r3, #1
 8000616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000618:	4b30      	ldr	r3, [pc, #192]	; (80006dc <SystemInit+0x10c>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800061e:	4b2f      	ldr	r3, [pc, #188]	; (80006dc <SystemInit+0x10c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	492e      	ldr	r1, [pc, #184]	; (80006dc <SystemInit+0x10c>)
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x110>)
 8000626:	4013      	ands	r3, r2
 8000628:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <SystemInit+0x108>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 0308 	and.w	r3, r3, #8
 8000632:	2b00      	cmp	r3, #0
 8000634:	d007      	beq.n	8000646 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000636:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <SystemInit+0x108>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f023 030f 	bic.w	r3, r3, #15
 800063e:	4a26      	ldr	r2, [pc, #152]	; (80006d8 <SystemInit+0x108>)
 8000640:	f043 0307 	orr.w	r3, r3, #7
 8000644:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000646:	4b25      	ldr	r3, [pc, #148]	; (80006dc <SystemInit+0x10c>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800064c:	4b23      	ldr	r3, [pc, #140]	; (80006dc <SystemInit+0x10c>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000652:	4b22      	ldr	r3, [pc, #136]	; (80006dc <SystemInit+0x10c>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000658:	4b20      	ldr	r3, [pc, #128]	; (80006dc <SystemInit+0x10c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <SystemInit+0x114>)
 800065c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800065e:	4b1f      	ldr	r3, [pc, #124]	; (80006dc <SystemInit+0x10c>)
 8000660:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <SystemInit+0x118>)
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000664:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <SystemInit+0x10c>)
 8000666:	4a21      	ldr	r2, [pc, #132]	; (80006ec <SystemInit+0x11c>)
 8000668:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066a:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <SystemInit+0x10c>)
 800066c:	2200      	movs	r2, #0
 800066e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <SystemInit+0x10c>)
 8000672:	4a1e      	ldr	r2, [pc, #120]	; (80006ec <SystemInit+0x11c>)
 8000674:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000676:	4b19      	ldr	r3, [pc, #100]	; (80006dc <SystemInit+0x10c>)
 8000678:	2200      	movs	r2, #0
 800067a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800067c:	4b17      	ldr	r3, [pc, #92]	; (80006dc <SystemInit+0x10c>)
 800067e:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <SystemInit+0x11c>)
 8000680:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <SystemInit+0x10c>)
 8000684:	2200      	movs	r2, #0
 8000686:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <SystemInit+0x10c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a13      	ldr	r2, [pc, #76]	; (80006dc <SystemInit+0x10c>)
 800068e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000692:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <SystemInit+0x10c>)
 8000696:	2200      	movs	r2, #0
 8000698:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <SystemInit+0x120>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	4a14      	ldr	r2, [pc, #80]	; (80006f0 <SystemInit+0x120>)
 80006a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a4:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x124>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <SystemInit+0x128>)
 80006ac:	4013      	ands	r3, r2
 80006ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b2:	d202      	bcs.n	80006ba <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x12c>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <SystemInit+0x130>)
 80006bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <SystemInit+0x104>)
 80006c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006c8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00
 80006d8:	52002000 	.word	0x52002000
 80006dc:	58024400 	.word	0x58024400
 80006e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e4:	02020200 	.word	0x02020200
 80006e8:	01ff0000 	.word	0x01ff0000
 80006ec:	01010280 	.word	0x01010280
 80006f0:	580000c0 	.word	0x580000c0
 80006f4:	5c001000 	.word	0x5c001000
 80006f8:	ffff0000 	.word	0xffff0000
 80006fc:	51008108 	.word	0x51008108
 8000700:	52004000 	.word	0x52004000

08000704 <_Z13enviar_cadenaPci>:
		}

	}
}

void enviar_cadena(char *str, int size) {
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]

	if (str[size - 1] != '\0')
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	3b01      	subs	r3, #1
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d005      	beq.n	8000728 <_Z13enviar_cadenaPci+0x24>
		str[size - 1] = (char) '\0';
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	3b01      	subs	r3, #1
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	4413      	add	r3, r2
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

	for (uint8_t x = 0; x < size; x++) {
 8000728:	2300      	movs	r3, #0
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	429a      	cmp	r2, r3
 8000732:	dd18      	ble.n	8000766 <_Z13enviar_cadenaPci+0x62>
		USART1->TDR = str[x];
 8000734:	7bfb      	ldrb	r3, [r7, #15]
 8000736:	687a      	ldr	r2, [r7, #4]
 8000738:	4413      	add	r3, r2
 800073a:	781a      	ldrb	r2, [r3, #0]
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <_Z13enviar_cadenaPci+0x70>)
 800073e:	629a      	str	r2, [r3, #40]	; 0x28

		bool byte_sent = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	73bb      	strb	r3, [r7, #14]

		do {
			byte_sent = ((USART1->ISR >> 7) & 0x01);
 8000744:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <_Z13enviar_cadenaPci+0x70>)
 8000746:	69db      	ldr	r3, [r3, #28]
 8000748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074c:	2b00      	cmp	r3, #0
 800074e:	bf14      	ite	ne
 8000750:	2301      	movne	r3, #1
 8000752:	2300      	moveq	r3, #0
 8000754:	73bb      	strb	r3, [r7, #14]
		} while (!byte_sent);
 8000756:	7bbb      	ldrb	r3, [r7, #14]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d100      	bne.n	800075e <_Z13enviar_cadenaPci+0x5a>
		do {
 800075c:	e7f2      	b.n	8000744 <_Z13enviar_cadenaPci+0x40>
	for (uint8_t x = 0; x < size; x++) {
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	3301      	adds	r3, #1
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e7e2      	b.n	800072c <_Z13enviar_cadenaPci+0x28>
	}

}
 8000766:	bf00      	nop
 8000768:	3714      	adds	r7, #20
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	40011000 	.word	0x40011000

08000778 <_Z9Practica3v>:

void ejercicio_3_1();
void ejercicio_3_2();
void ejercicio_3_3();

void Practica3() {
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0

// Ejercicio 3.2
//	ejercicio_3_2();

// Ejercicio 3.3
	ejercicio_3_3();
 800077c:	f000 f802 	bl	8000784 <_Z13ejercicio_3_3v>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <_Z13ejercicio_3_3v>:
	DMA1_Stream7->CR |= (1 << 0);

	//HAL_Delay(10000);
}

void ejercicio_3_3() {
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
	int8_t datosB[16] = { 0 };
 800078a:	2300      	movs	r3, #0
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]

// ================= CONFIGURE CLOCKS ================= //
// Configure clocks for UART
	RCC->APB2ENR |= UART1_EN;
 8000798:	4b51      	ldr	r3, [pc, #324]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 800079a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800079e:	4a50      	ldr	r2, [pc, #320]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007a0:	f043 0310 	orr.w	r3, r3, #16
 80007a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	// Configure clocks for DMA
	RCC->AHB1ENR |= (1 << DMA_1_AHB1ENR_POS);
 80007a8:	4b4d      	ldr	r3, [pc, #308]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80007ae:	4a4c      	ldr	r2, [pc, #304]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	RCC->AHB1RSTR |= RCC_AHB1RSTR_DMA1RST;
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007be:	4a48      	ldr	r2, [pc, #288]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	RCC->AHB1RSTR &= ~RCC_AHB1RSTR_DMA1RST;
 80007c8:	4b45      	ldr	r3, [pc, #276]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007ce:	4a44      	ldr	r2, [pc, #272]	; (80008e0 <_Z13ejercicio_3_3v+0x15c>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

	// ================= CONFIGURE UART ================= //
	GPIOA->MODER = 0xABFFFFFF;
 80007d8:	4b42      	ldr	r3, [pc, #264]	; (80008e4 <_Z13ejercicio_3_3v+0x160>)
 80007da:	f06f 42a8 	mvn.w	r2, #1409286144	; 0x54000000
 80007de:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~((0x01 << GPIOA_9_UART) | (0x01 << GPIOA_10_UART));
 80007e0:	4b40      	ldr	r3, [pc, #256]	; (80008e4 <_Z13ejercicio_3_3v+0x160>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <_Z13ejercicio_3_3v+0x160>)
 80007e6:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
 80007ea:	6013      	str	r3, [r2, #0]

	// Configure uart pins mode
	GPIOA->AFR[1] |= (0x00000000 | (0x07 << 4) | (0x07 << 8));
 80007ec:	4b3d      	ldr	r3, [pc, #244]	; (80008e4 <_Z13ejercicio_3_3v+0x160>)
 80007ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f0:	4a3c      	ldr	r2, [pc, #240]	; (80008e4 <_Z13ejercicio_3_3v+0x160>)
 80007f2:	f443 63ee 	orr.w	r3, r3, #1904	; 0x770
 80007f6:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure BAUDRATE to 115200
	USART1->CR1 |= (1 << 29) + (1 << 3) + (1 << 2) + (1 << 0);
 80007f8:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <_Z13ejercicio_3_3v+0x164>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	493a      	ldr	r1, [pc, #232]	; (80008e8 <_Z13ejercicio_3_3v+0x164>)
 80007fe:	4b3b      	ldr	r3, [pc, #236]	; (80008ec <_Z13ejercicio_3_3v+0x168>)
 8000800:	4313      	orrs	r3, r2
 8000802:	600b      	str	r3, [r1, #0]
	USART1->BRR = 556;
 8000804:	4b38      	ldr	r3, [pc, #224]	; (80008e8 <_Z13ejercicio_3_3v+0x164>)
 8000806:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800080a:	60da      	str	r2, [r3, #12]

	USART1->CR3 |= (1 << 6);    // DMAR = 1 in bit 6
 800080c:	4b36      	ldr	r3, [pc, #216]	; (80008e8 <_Z13ejercicio_3_3v+0x164>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a35      	ldr	r2, [pc, #212]	; (80008e8 <_Z13ejercicio_3_3v+0x164>)
 8000812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000816:	6093      	str	r3, [r2, #8]
//	while (HAL_GetTick() - timeStart < 1000) {
//		enviar_cadena(str, 12);
//	}

	// ================= CONFIGURE DMA ================= //
	DMA1_Stream7->CR = 0;
 8000818:	4b35      	ldr	r3, [pc, #212]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
	DMA1->LISR = 0;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <_Z13ejercicio_3_3v+0x170>)
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
	DMA1->HISR = 0;
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <_Z13ejercicio_3_3v+0x170>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
	DMAMUX1_Channel7->CCR = 41;    // 41 is for UART1 RX for DMA
 800082a:	4b33      	ldr	r3, [pc, #204]	; (80008f8 <_Z13ejercicio_3_3v+0x174>)
 800082c:	2229      	movs	r2, #41	; 0x29
 800082e:	601a      	str	r2, [r3, #0]
	DMA1_Stream7->CR |= ((DMA_Mode::PER_TO_MEM << DMA_1_DIR_POS) | (DMA_INC_Mode::DMA_FIX << DMA_1_PINC_POS) | (DMA_INC_Mode::DMA_INC << DMA_1_MINC_POS) | (DMA_Size::DMA_BYTE << DMA_1_PSIZE_POS)
 8000830:	4b2f      	ldr	r3, [pc, #188]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a2e      	ldr	r2, [pc, #184]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 8000836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083a:	6013      	str	r3, [r2, #0]
	        | (DMA_Size::DMA_BYTE << DMA_1_MSIZE_POS));    //DIR,PINC,MINC,PSIZE,MSIZE
	DMA1_Stream7->M0AR = (uint32_t) &datosB[0];
 800083c:	4a2c      	ldr	r2, [pc, #176]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 800083e:	463b      	mov	r3, r7
 8000840:	60d3      	str	r3, [r2, #12]
	DMA1_Stream7->PAR = (uint32_t) &(USART1->RDR);
 8000842:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 8000844:	4a2d      	ldr	r2, [pc, #180]	; (80008fc <_Z13ejercicio_3_3v+0x178>)
 8000846:	609a      	str	r2, [r3, #8]
	DMA1_Stream7->NDTR = sizeof(datosB);
 8000848:	4b29      	ldr	r3, [pc, #164]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 800084a:	2210      	movs	r2, #16
 800084c:	605a      	str	r2, [r3, #4]
	DMA1_Stream7->FCR = 0;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 8000850:	2200      	movs	r2, #0
 8000852:	615a      	str	r2, [r3, #20]
	DMA1_Stream7->CR |= (1 << 0);
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a25      	ldr	r2, [pc, #148]	; (80008f0 <_Z13ejercicio_3_3v+0x16c>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]

	datosB[0] = 'A';
 8000860:	2341      	movs	r3, #65	; 0x41
 8000862:	703b      	strb	r3, [r7, #0]
	datosB[1] = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	707b      	strb	r3, [r7, #1]
	HAL_Delay(10000);
 8000868:	f242 7010 	movw	r0, #10000	; 0x2710
 800086c:	f000 fbe6 	bl	800103c <HAL_Delay>
	enviar_cadena((char*) datosB, 16);
 8000870:	463b      	mov	r3, r7
 8000872:	2110      	movs	r1, #16
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff45 	bl	8000704 <_Z13enviar_cadenaPci>
 800087a:	463b      	mov	r3, r7
 800087c:	61fb      	str	r3, [r7, #28]
 800087e:	2320      	movs	r3, #32
 8000880:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	2b00      	cmp	r3, #0
 8000886:	dd1e      	ble.n	80008c6 <_Z13ejercicio_3_3v+0x142>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8000888:	69fb      	ldr	r3, [r7, #28]
 800088a:	f003 021f 	and.w	r2, r3, #31
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	4413      	add	r3, r2
 8000892:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8000894:	69fb      	ldr	r3, [r7, #28]
 8000896:	613b      	str	r3, [r7, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000898:	f3bf 8f4f 	dsb	sy
}
 800089c:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800089e:	4a18      	ldr	r2, [pc, #96]	; (8000900 <_Z13ejercicio_3_3v+0x17c>)
 80008a0:	693b      	ldr	r3, [r7, #16]
 80008a2:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80008a6:	693b      	ldr	r3, [r7, #16]
 80008a8:	3320      	adds	r3, #32
 80008aa:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	3b20      	subs	r3, #32
 80008b0:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dd00      	ble.n	80008ba <_Z13ejercicio_3_3v+0x136>
      do {
 80008b8:	e7f1      	b.n	800089e <_Z13ejercicio_3_3v+0x11a>
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008c0:	f3bf 8f6f 	isb	sy
}
 80008c4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80008c6:	bf00      	nop
	SCB_InvalidateDCache_by_Addr(datosB, 32);
	HAL_Delay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f000 fbb7 	bl	800103c <HAL_Delay>
	enviar_cadena((char*) datosB, 16);
 80008ce:	463b      	mov	r3, r7
 80008d0:	2110      	movs	r1, #16
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff16 	bl	8000704 <_Z13enviar_cadenaPci>
}
 80008d8:	bf00      	nop
 80008da:	3720      	adds	r7, #32
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58024400 	.word	0x58024400
 80008e4:	58020000 	.word	0x58020000
 80008e8:	40011000 	.word	0x40011000
 80008ec:	2000000d 	.word	0x2000000d
 80008f0:	400200b8 	.word	0x400200b8
 80008f4:	40020000 	.word	0x40020000
 80008f8:	4002081c 	.word	0x4002081c
 80008fc:	40011024 	.word	0x40011024
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800090a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800090e:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 8000910:	4b51      	ldr	r3, [pc, #324]	; (8000a58 <main+0x154>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <main+0x26>
 800091c:	697b      	ldr	r3, [r7, #20]
 800091e:	1e5a      	subs	r2, r3, #1
 8000920:	617a      	str	r2, [r7, #20]
 8000922:	2b00      	cmp	r3, #0
 8000924:	dd01      	ble.n	800092a <main+0x26>
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <main+0x28>
 800092a:	2300      	movs	r3, #0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d000      	beq.n	8000932 <main+0x2e>
 8000930:	e7ee      	b.n	8000910 <main+0xc>
		;
	if (timeout < 0) {
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	2b00      	cmp	r3, #0
 8000936:	da01      	bge.n	800093c <main+0x38>
		Error_Handler();
 8000938:	f000 fa14 	bl	8000d64 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093c:	f000 faec 	bl	8000f18 <HAL_Init>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000940:	4b46      	ldr	r3, [pc, #280]	; (8000a5c <main+0x158>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2db      	uxtb	r3, r3
 8000952:	2b00      	cmp	r3, #0
 8000954:	d144      	bne.n	80009e0 <main+0xdc>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000956:	4b41      	ldr	r3, [pc, #260]	; (8000a5c <main+0x158>)
 8000958:	2200      	movs	r2, #0
 800095a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800095e:	f3bf 8f4f 	dsb	sy
}
 8000962:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <main+0x158>)
 8000966:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800096a:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	0b5b      	lsrs	r3, r3, #13
 8000970:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000974:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	08db      	lsrs	r3, r3, #3
 800097a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800097e:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	015a      	lsls	r2, r3, #5
 8000984:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000988:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800098e:	4933      	ldr	r1, [pc, #204]	; (8000a5c <main+0x158>)
 8000990:	4313      	orrs	r3, r2
 8000992:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1e5a      	subs	r2, r3, #1
 800099a:	60ba      	str	r2, [r7, #8]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d000      	beq.n	80009ac <main+0xa8>
      do {
 80009aa:	e7e9      	b.n	8000980 <main+0x7c>
    } while(sets-- != 0U);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	60fa      	str	r2, [r7, #12]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	bf14      	ite	ne
 80009b6:	2301      	movne	r3, #1
 80009b8:	2300      	moveq	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d000      	beq.n	80009c2 <main+0xbe>
    do {
 80009c0:	e7d9      	b.n	8000976 <main+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 80009c2:	f3bf 8f4f 	dsb	sy
}
 80009c6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80009c8:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <main+0x158>)
 80009ca:	695b      	ldr	r3, [r3, #20]
 80009cc:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <main+0x158>)
 80009ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009d2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d4:	f3bf 8f4f 	dsb	sy
}
 80009d8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80009da:	f3bf 8f6f 	isb	sy
}
 80009de:	e000      	b.n	80009e2 <main+0xde>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80009e0:	bf00      	nop
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e2:	f000 f83d 	bl	8000a60 <_Z18SystemClock_Configv>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80009e6:	f000 f8d9 	bl	8000b9c <_Z24PeriphCommonClock_Configv>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	 HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80009ea:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <main+0x154>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <main+0x154>)
 80009f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b17      	ldr	r3, [pc, #92]	; (8000a58 <main+0x154>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fddb 	bl	80015c4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0, 0);
 8000a0e:	2100      	movs	r1, #0
 8000a10:	2000      	movs	r0, #0
 8000a12:	f000 fdf1 	bl	80015f8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1a:	617b      	str	r3, [r7, #20]
	while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8000a1c:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <main+0x154>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d106      	bne.n	8000a36 <main+0x132>
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	1e5a      	subs	r2, r3, #1
 8000a2c:	617a      	str	r2, [r7, #20]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	dd01      	ble.n	8000a36 <main+0x132>
 8000a32:	2301      	movs	r3, #1
 8000a34:	e000      	b.n	8000a38 <main+0x134>
 8000a36:	2300      	movs	r3, #0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d000      	beq.n	8000a3e <main+0x13a>
 8000a3c:	e7ee      	b.n	8000a1c <main+0x118>
		;
	if (timeout < 0) {
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	da01      	bge.n	8000a48 <main+0x144>
		Error_Handler();
 8000a44:	f000 f98e 	bl	8000d64 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a48:	f000 f93a 	bl	8000cc0 <_ZL12MX_GPIO_Initv>
	MX_USART1_UART_Init();
 8000a4c:	f000 f8d8 	bl	8000c00 <_ZL19MX_USART1_UART_Initv>
	// ===================== CORREGIDA
//	Practica1();
	// ===================== CORREGIDA
//	Practica2();
	// ===================== NO CORREGIDA
	Practica3();
 8000a50:	f7ff fe92 	bl	8000778 <_Z9Practica3v>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a54:	e7fe      	b.n	8000a54 <main+0x150>
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09c      	sub	sp, #112	; 0x70
 8000a64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	224c      	movs	r2, #76	; 0x4c
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 fa70 	bl	8004f54 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	2220      	movs	r2, #32
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f004 fa6a 	bl	8004f54 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a80:	2004      	movs	r0, #4
 8000a82:	f000 fdcd 	bl	8001620 <HAL_PWREx_ConfigSupply>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b41      	ldr	r3, [pc, #260]	; (8000b90 <_Z18SystemClock_Configv+0x130>)
 8000a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8e:	4a40      	ldr	r2, [pc, #256]	; (8000b90 <_Z18SystemClock_Configv+0x130>)
 8000a90:	f023 0301 	bic.w	r3, r3, #1
 8000a94:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a96:	4b3e      	ldr	r3, [pc, #248]	; (8000b90 <_Z18SystemClock_Configv+0x130>)
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	4b3c      	ldr	r3, [pc, #240]	; (8000b94 <_Z18SystemClock_Configv+0x134>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a3b      	ldr	r2, [pc, #236]	; (8000b94 <_Z18SystemClock_Configv+0x134>)
 8000aa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b39      	ldr	r3, [pc, #228]	; (8000b94 <_Z18SystemClock_Configv+0x134>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab4:	603b      	str	r3, [r7, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8000ab8:	4b36      	ldr	r3, [pc, #216]	; (8000b94 <_Z18SystemClock_Configv+0x134>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ac4:	bf14      	ite	ne
 8000ac6:	2301      	movne	r3, #1
 8000ac8:	2300      	moveq	r3, #0
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d000      	beq.n	8000ad2 <_Z18SystemClock_Configv+0x72>
 8000ad0:	e7f2      	b.n	8000ab8 <_Z18SystemClock_Configv+0x58>
	}
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <_Z18SystemClock_Configv+0x138>)
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	f023 0303 	bic.w	r3, r3, #3
 8000ada:	4a2f      	ldr	r2, [pc, #188]	; (8000b98 <_Z18SystemClock_Configv+0x138>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6293      	str	r3, [r2, #40]	; 0x28
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8000ae2:	230b      	movs	r3, #11
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000aec:	2301      	movs	r3, #1
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af0:	2340      	movs	r3, #64	; 0x40
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000af4:	2301      	movs	r3, #1
 8000af6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af8:	2302      	movs	r3, #2
 8000afa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000afc:	2302      	movs	r3, #2
 8000afe:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000b00:	2305      	movs	r3, #5
 8000b02:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 48;
 8000b04:	2330      	movs	r3, #48	; 0x30
 8000b06:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b0c:	2305      	movs	r3, #5
 8000b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b14:	2308      	movs	r3, #8
 8000b16:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 fdd5 	bl	80016d4 <HAL_RCC_OscConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	bf14      	ite	ne
 8000b30:	2301      	movne	r3, #1
 8000b32:	2300      	moveq	r3, #0
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <_Z18SystemClock_Configv+0xde>
		Error_Handler();
 8000b3a:	f000 f913 	bl	8000d64 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
 8000b3e:	233f      	movs	r3, #63	; 0x3f
 8000b40:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f001 f9e2 	bl	8001f2c <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	bf14      	ite	ne
 8000b6e:	2301      	movne	r3, #1
 8000b70:	2300      	moveq	r3, #0
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <_Z18SystemClock_Configv+0x11c>
		Error_Handler();
 8000b78:	f000 f8f4 	bl	8000d64 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b7c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b80:	2100      	movs	r1, #0
 8000b82:	2000      	movs	r0, #0
 8000b84:	f001 fb88 	bl	8002298 <HAL_RCC_MCOConfig>
}
 8000b88:	bf00      	nop
 8000b8a:	3770      	adds	r7, #112	; 0x70
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58000400 	.word	0x58000400
 8000b94:	58024800 	.word	0x58024800
 8000b98:	58024400 	.word	0x58024400

08000b9c <_Z24PeriphCommonClock_Configv>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0b0      	sub	sp, #192	; 0xc0
 8000ba0:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	22c0      	movs	r2, #192	; 0xc0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f004 f9d3 	bl	8004f54 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000bb2:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
	PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000bb8:	230c      	movs	r3, #12
 8000bba:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fd9b 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	bf14      	ite	ne
 8000be8:	2301      	movne	r3, #1
 8000bea:	2300      	moveq	r3, #0
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <_Z24PeriphCommonClock_Configv+0x5a>
		Error_Handler();
 8000bf2:	f000 f8b7 	bl	8000d64 <Error_Handler>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	37c0      	adds	r7, #192	; 0xc0
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <_ZL19MX_USART1_UART_Initv>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000c04:	4b2c      	ldr	r3, [pc, #176]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c06:	4a2d      	ldr	r2, [pc, #180]	; (8000cbc <_ZL19MX_USART1_UART_Initv+0xbc>)
 8000c08:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000c0a:	4b2b      	ldr	r3, [pc, #172]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c10:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c12:	4b29      	ldr	r3, [pc, #164]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000c1e:	4b26      	ldr	r3, [pc, #152]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000c24:	4b24      	ldr	r3, [pc, #144]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c26:	220c      	movs	r2, #12
 8000c28:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2a:	4b23      	ldr	r3, [pc, #140]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c36:	4b20      	ldr	r3, [pc, #128]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c3c:	4b1e      	ldr	r3, [pc, #120]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000c48:	481b      	ldr	r0, [pc, #108]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c4a:	f003 f8f7 	bl	8003e3c <HAL_UART_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	bf14      	ite	ne
 8000c54:	2301      	movne	r3, #1
 8000c56:	2300      	moveq	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <_ZL19MX_USART1_UART_Initv+0x62>
		Error_Handler();
 8000c5e:	f000 f881 	bl	8000d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000c62:	2100      	movs	r1, #0
 8000c64:	4814      	ldr	r0, [pc, #80]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c66:	f004 f887 	bl	8004d78 <HAL_UARTEx_SetTxFifoThreshold>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	bf14      	ite	ne
 8000c70:	2301      	movne	r3, #1
 8000c72:	2300      	moveq	r3, #0
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <_ZL19MX_USART1_UART_Initv+0x7e>
		Error_Handler();
 8000c7a:	f000 f873 	bl	8000d64 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 8000c7e:	2100      	movs	r1, #0
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c82:	f004 f8b7 	bl	8004df4 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	bf14      	ite	ne
 8000c8c:	2301      	movne	r3, #1
 8000c8e:	2300      	moveq	r3, #0
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <_ZL19MX_USART1_UART_Initv+0x9a>
		Error_Handler();
 8000c96:	f000 f865 	bl	8000d64 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8000c9a:	4807      	ldr	r0, [pc, #28]	; (8000cb8 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000c9c:	f004 f833 	bl	8004d06 <HAL_UARTEx_DisableFifoMode>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <_ZL19MX_USART1_UART_Initv+0xb4>
		Error_Handler();
 8000cb0:	f000 f858 	bl	8000d64 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2400002c 	.word	0x2400002c
 8000cbc:	40011000 	.word	0x40011000

08000cc0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cc6:	f107 030c 	add.w	r3, r7, #12
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
 8000cd4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000cde:	f043 0304 	orr.w	r3, r3, #4
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d04:	4b15      	ldr	r3, [pc, #84]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d18:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <_ZL12MX_GPIO_Initv+0x9c>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin : CEC_CK_MCO1_Pin */
	GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000d30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d34:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <_ZL12MX_GPIO_Initv+0xa0>)
 8000d4e:	f000 fa89 	bl	8001264 <HAL_GPIO_Init>

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	58024400 	.word	0x58024400
 8000d60:	58020000 	.word	0x58020000

08000d64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d68:	b672      	cpsid	i
}
 8000d6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d6c:	e7fe      	b.n	8000d6c <Error_Handler+0x8>
	...

08000d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_MspInit+0x30>)
 8000d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d7c:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x30>)
 8000d7e:	f043 0302 	orr.w	r3, r3, #2
 8000d82:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	58024400 	.word	0x58024400

08000da4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ba      	sub	sp, #232	; 0xe8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	22c0      	movs	r2, #192	; 0xc0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 f8c5 	bl	8004f54 <memset>
  if(huart->Instance==USART1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a25      	ldr	r2, [pc, #148]	; (8000e64 <HAL_UART_MspInit+0xc0>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d142      	bne.n	8000e5a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fc98 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ffb9 	bl	8000d64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000df4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e02:	4b19      	ldr	r3, [pc, #100]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e16:	4a14      	ldr	r2, [pc, #80]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_UART_MspInit+0xc4>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e48:	2307      	movs	r3, #7
 8000e4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4805      	ldr	r0, [pc, #20]	; (8000e6c <HAL_UART_MspInit+0xc8>)
 8000e56:	f000 fa05 	bl	8001264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e5a:	bf00      	nop
 8000e5c:	37e8      	adds	r7, #232	; 0xe8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40011000 	.word	0x40011000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020000 	.word	0x58020000

08000e70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <NMI_Handler+0x4>

08000e76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <HardFault_Handler+0x4>

08000e7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <MemManage_Handler+0x4>

08000e82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e86:	e7fe      	b.n	8000e86 <BusFault_Handler+0x4>

08000e88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <UsageFault_Handler+0x4>

08000e8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ebc:	f000 f89e 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000efc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ec8:	f7ff fb82 	bl	80005d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ece:	490d      	ldr	r1, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ed0:	4a0d      	ldr	r2, [pc, #52]	; (8000f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ee4:	4c0a      	ldr	r4, [pc, #40]	; (8000f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ef2:	f004 f80b 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef6:	f7ff fd05 	bl	8000904 <main>
  bx  lr
 8000efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f04:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f08:	08004fc4 	.word	0x08004fc4
  ldr r2, =_sbss
 8000f0c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000f10:	240000c0 	.word	0x240000c0

08000f14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f14:	e7fe      	b.n	8000f14 <ADC3_IRQHandler>
	...

08000f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1e:	2003      	movs	r0, #3
 8000f20:	f000 f96e 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f24:	f001 fa22 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_Init+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	f003 030f 	and.w	r3, r3, #15
 8000f34:	4913      	ldr	r1, [pc, #76]	; (8000f84 <HAL_Init+0x6c>)
 8000f36:	5ccb      	ldrb	r3, [r1, r3]
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_Init+0x68>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	f003 030f 	and.w	r3, r3, #15
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_Init+0x6c>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	f003 031f 	and.w	r3, r3, #31
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	fa22 f303 	lsr.w	r3, r2, r3
 8000f58:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_Init+0x70>)
 8000f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_Init+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2000      	movs	r0, #0
 8000f64:	f000 f814 	bl	8000f90 <HAL_InitTick>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e002      	b.n	8000f78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f72:	f7ff fefd 	bl	8000d70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	58024400 	.word	0x58024400
 8000f84:	08004f7c 	.word	0x08004f7c
 8000f88:	24000004 	.word	0x24000004
 8000f8c:	24000000 	.word	0x24000000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_InitTick+0x60>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e021      	b.n	8000fe8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fa4:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_InitTick+0x64>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_InitTick+0x60>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f945 	bl	800124a <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f91d 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	; (8000ff8 <HAL_InitTick+0x68>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2400000c 	.word	0x2400000c
 8000ff4:	24000000 	.word	0x24000000
 8000ff8:	24000008 	.word	0x24000008

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	; (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2400000c 	.word	0x2400000c
 8001020:	240000bc 	.word	0x240000bc

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	240000bc 	.word	0x240000bc

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2400000c 	.word	0x2400000c

08001084 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <HAL_GetREVID+0x14>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	0c1b      	lsrs	r3, r3, #16
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	5c001000 	.word	0x5c001000

0800109c <__NVIC_SetPriorityGrouping>:
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ca:	4a04      	ldr	r2, [pc, #16]	; (80010dc <__NVIC_SetPriorityGrouping+0x40>)
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	60d3      	str	r3, [r2, #12]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	05fa0000 	.word	0x05fa0000

080010e4 <__NVIC_GetPriorityGrouping>:
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	; (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_SetPriority>:
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	88fb      	ldrh	r3, [r7, #6]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff47 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001224:	f7ff ff5e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	6978      	ldr	r0, [r7, #20]
 8001230:	f7ff ff90 	bl	8001154 <NVIC_EncodePriority>
 8001234:	4602      	mov	r2, r0
 8001236:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800123a:	4611      	mov	r1, r2
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff5f 	bl	8001100 <__NVIC_SetPriority>
}
 8001242:	bf00      	nop
 8001244:	3718      	adds	r7, #24
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff ffb2 	bl	80011bc <SysTick_Config>
 8001258:	4603      	mov	r3, r0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001272:	4b89      	ldr	r3, [pc, #548]	; (8001498 <HAL_GPIO_Init+0x234>)
 8001274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001276:	e194      	b.n	80015a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	2101      	movs	r1, #1
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	fa01 f303 	lsl.w	r3, r1, r3
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8186 	beq.w	800159c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d005      	beq.n	80012a8 <HAL_GPIO_Init+0x44>
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d130      	bne.n	800130a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012de:	2201      	movs	r2, #1
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	091b      	lsrs	r3, r3, #4
 80012f4:	f003 0201 	and.w	r2, r3, #1
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	2b03      	cmp	r3, #3
 8001314:	d017      	beq.n	8001346 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	2203      	movs	r2, #3
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f003 0303 	and.w	r3, r3, #3
 800134e:	2b02      	cmp	r3, #2
 8001350:	d123      	bne.n	800139a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	08da      	lsrs	r2, r3, #3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	3208      	adds	r2, #8
 800135a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	220f      	movs	r2, #15
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691a      	ldr	r2, [r3, #16]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	08da      	lsrs	r2, r3, #3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	3208      	adds	r2, #8
 8001394:	69b9      	ldr	r1, [r7, #24]
 8001396:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 0203 	and.w	r2, r3, #3
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	69ba      	ldr	r2, [r7, #24]
 80013cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 80e0 	beq.w	800159c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <HAL_GPIO_Init+0x238>)
 80013de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013e2:	4a2e      	ldr	r2, [pc, #184]	; (800149c <HAL_GPIO_Init+0x238>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <HAL_GPIO_Init+0x238>)
 80013ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fa:	4a29      	ldr	r2, [pc, #164]	; (80014a0 <HAL_GPIO_Init+0x23c>)
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	220f      	movs	r2, #15
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_GPIO_Init+0x240>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d052      	beq.n	80014cc <HAL_GPIO_Init+0x268>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <HAL_GPIO_Init+0x244>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d031      	beq.n	8001492 <HAL_GPIO_Init+0x22e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_GPIO_Init+0x248>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d02b      	beq.n	800148e <HAL_GPIO_Init+0x22a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <HAL_GPIO_Init+0x24c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x226>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_GPIO_Init+0x250>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x222>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a1b      	ldr	r2, [pc, #108]	; (80014b8 <HAL_GPIO_Init+0x254>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x21e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a1a      	ldr	r2, [pc, #104]	; (80014bc <HAL_GPIO_Init+0x258>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x21a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a19      	ldr	r2, [pc, #100]	; (80014c0 <HAL_GPIO_Init+0x25c>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x216>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <HAL_GPIO_Init+0x260>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x212>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_GPIO_Init+0x264>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x20e>
 800146e:	2309      	movs	r3, #9
 8001470:	e02d      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001472:	230a      	movs	r3, #10
 8001474:	e02b      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001476:	2308      	movs	r3, #8
 8001478:	e029      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 800147a:	2307      	movs	r3, #7
 800147c:	e027      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 800147e:	2306      	movs	r3, #6
 8001480:	e025      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001482:	2305      	movs	r3, #5
 8001484:	e023      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001486:	2304      	movs	r3, #4
 8001488:	e021      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 800148a:	2303      	movs	r3, #3
 800148c:	e01f      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 800148e:	2302      	movs	r3, #2
 8001490:	e01d      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001492:	2301      	movs	r3, #1
 8001494:	e01b      	b.n	80014ce <HAL_GPIO_Init+0x26a>
 8001496:	bf00      	nop
 8001498:	58000080 	.word	0x58000080
 800149c:	58024400 	.word	0x58024400
 80014a0:	58000400 	.word	0x58000400
 80014a4:	58020000 	.word	0x58020000
 80014a8:	58020400 	.word	0x58020400
 80014ac:	58020800 	.word	0x58020800
 80014b0:	58020c00 	.word	0x58020c00
 80014b4:	58021000 	.word	0x58021000
 80014b8:	58021400 	.word	0x58021400
 80014bc:	58021800 	.word	0x58021800
 80014c0:	58021c00 	.word	0x58021c00
 80014c4:	58022000 	.word	0x58022000
 80014c8:	58022400 	.word	0x58022400
 80014cc:	2300      	movs	r3, #0
 80014ce:	69fa      	ldr	r2, [r7, #28]
 80014d0:	f002 0203 	and.w	r2, r2, #3
 80014d4:	0092      	lsls	r2, r2, #2
 80014d6:	4093      	lsls	r3, r2
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014de:	4938      	ldr	r1, [pc, #224]	; (80015c0 <HAL_GPIO_Init+0x35c>)
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3302      	adds	r3, #2
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	43db      	mvns	r3, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4013      	ands	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d003      	beq.n	8001512 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	4313      	orrs	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800151a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4313      	orrs	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	3301      	adds	r3, #1
 80015a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f47f ae63 	bne.w	8001278 <HAL_GPIO_Init+0x14>
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	3724      	adds	r7, #36	; 0x24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	58000400 	.word	0x58000400

080015c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_HSEM_FastTake+0x2c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3320      	adds	r3, #32
 80015d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <HAL_HSEM_FastTake+0x30>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d101      	bne.n	80015e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	58026400 	.word	0x58026400
 80015f4:	80000300 	.word	0x80000300

080015f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001602:	4906      	ldr	r1, [pc, #24]	; (800161c <HAL_HSEM_Release+0x24>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	58026400 	.word	0x58026400

08001620 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	2b06      	cmp	r3, #6
 8001632:	d00a      	beq.n	800164a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	429a      	cmp	r2, r3
 8001640:	d001      	beq.n	8001646 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e040      	b.n	80016c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001646:	2300      	movs	r3, #0
 8001648:	e03e      	b.n	80016c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001652:	491f      	ldr	r1, [pc, #124]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4313      	orrs	r3, r2
 8001658:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800165a:	f7ff fce3 	bl	8001024 <HAL_GetTick>
 800165e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001660:	e009      	b.n	8001676 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001662:	f7ff fcdf 	bl	8001024 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001670:	d901      	bls.n	8001676 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e028      	b.n	80016c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800167e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001682:	d1ee      	bne.n	8001662 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b1e      	cmp	r3, #30
 8001688:	d008      	beq.n	800169c <HAL_PWREx_ConfigSupply+0x7c>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2b2e      	cmp	r3, #46	; 0x2e
 800168e:	d005      	beq.n	800169c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b1d      	cmp	r3, #29
 8001694:	d002      	beq.n	800169c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b2d      	cmp	r3, #45	; 0x2d
 800169a:	d114      	bne.n	80016c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800169c:	f7ff fcc2 	bl	8001024 <HAL_GetTick>
 80016a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016a2:	e009      	b.n	80016b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80016a4:	f7ff fcbe 	bl	8001024 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016b2:	d901      	bls.n	80016b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e007      	b.n	80016c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d1ee      	bne.n	80016a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	58024800 	.word	0x58024800

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f000 bc1c 	b.w	8001f20 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8087 	beq.w	8001804 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016f6:	4b9e      	ldr	r3, [pc, #632]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001700:	4b9b      	ldr	r3, [pc, #620]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001708:	2b10      	cmp	r3, #16
 800170a:	d007      	beq.n	800171c <HAL_RCC_OscConfig+0x48>
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	2b18      	cmp	r3, #24
 8001710:	d110      	bne.n	8001734 <HAL_RCC_OscConfig+0x60>
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d10b      	bne.n	8001734 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	4b94      	ldr	r3, [pc, #592]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d06c      	beq.n	8001802 <HAL_RCC_OscConfig+0x12e>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d168      	bne.n	8001802 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e3f5      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d106      	bne.n	800174c <HAL_RCC_OscConfig+0x78>
 800173e:	4b8c      	ldr	r3, [pc, #560]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a8b      	ldr	r2, [pc, #556]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e02e      	b.n	80017aa <HAL_RCC_OscConfig+0xd6>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10c      	bne.n	800176e <HAL_RCC_OscConfig+0x9a>
 8001754:	4b86      	ldr	r3, [pc, #536]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a85      	ldr	r2, [pc, #532]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800175a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b83      	ldr	r3, [pc, #524]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a82      	ldr	r2, [pc, #520]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e01d      	b.n	80017aa <HAL_RCC_OscConfig+0xd6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0xbe>
 8001778:	4b7d      	ldr	r3, [pc, #500]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a7c      	ldr	r2, [pc, #496]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800177e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b7a      	ldr	r3, [pc, #488]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a79      	ldr	r2, [pc, #484]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800178a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0xd6>
 8001792:	4b77      	ldr	r3, [pc, #476]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a76      	ldr	r2, [pc, #472]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b74      	ldr	r3, [pc, #464]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80017a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d013      	beq.n	80017da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fc37 	bl	8001024 <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017ba:	f7ff fc33 	bl	8001024 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b64      	cmp	r3, #100	; 0x64
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e3a9      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017cc:	4b68      	ldr	r3, [pc, #416]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d0f0      	beq.n	80017ba <HAL_RCC_OscConfig+0xe6>
 80017d8:	e014      	b.n	8001804 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017da:	f7ff fc23 	bl	8001024 <HAL_GetTick>
 80017de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017e2:	f7ff fc1f 	bl	8001024 <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	; 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e395      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80017f4:	4b5e      	ldr	r3, [pc, #376]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f0      	bne.n	80017e2 <HAL_RCC_OscConfig+0x10e>
 8001800:	e000      	b.n	8001804 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001802:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 80ca 	beq.w	80019a6 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001812:	4b57      	ldr	r3, [pc, #348]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800181a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800181c:	4b54      	ldr	r3, [pc, #336]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800181e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001820:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x164>
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	2b18      	cmp	r3, #24
 800182c:	d156      	bne.n	80018dc <HAL_RCC_OscConfig+0x208>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d151      	bne.n	80018dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001838:	4b4d      	ldr	r3, [pc, #308]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_OscConfig+0x17c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d101      	bne.n	8001850 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e367      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001850:	4b47      	ldr	r3, [pc, #284]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f023 0219 	bic.w	r2, r3, #25
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	4944      	ldr	r1, [pc, #272]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800185e:	4313      	orrs	r3, r2
 8001860:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001862:	f7ff fbdf 	bl	8001024 <HAL_GetTick>
 8001866:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fbdb 	bl	8001024 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e351      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800187c:	4b3c      	ldr	r3, [pc, #240]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	f7ff fbfc 	bl	8001084 <HAL_GetREVID>
 800188c:	4603      	mov	r3, r0
 800188e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001892:	4293      	cmp	r3, r2
 8001894:	d817      	bhi.n	80018c6 <HAL_RCC_OscConfig+0x1f2>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b40      	cmp	r3, #64	; 0x40
 800189c:	d108      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1dc>
 800189e:	4b34      	ldr	r3, [pc, #208]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80018a6:	4a32      	ldr	r2, [pc, #200]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ae:	e07a      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b2f      	ldr	r3, [pc, #188]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	031b      	lsls	r3, r3, #12
 80018be:	492c      	ldr	r1, [pc, #176]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c4:	e06f      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	061b      	lsls	r3, r3, #24
 80018d4:	4926      	ldr	r1, [pc, #152]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018da:	e064      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d047      	beq.n	8001974 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 0219 	bic.w	r2, r3, #25
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	491f      	ldr	r1, [pc, #124]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f6:	f7ff fb95 	bl	8001024 <HAL_GetTick>
 80018fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fb91 	bl	8001024 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e307      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	f7ff fbb2 	bl	8001084 <HAL_GetREVID>
 8001920:	4603      	mov	r3, r0
 8001922:	f241 0203 	movw	r2, #4099	; 0x1003
 8001926:	4293      	cmp	r3, r2
 8001928:	d817      	bhi.n	800195a <HAL_RCC_OscConfig+0x286>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d108      	bne.n	8001944 <HAL_RCC_OscConfig+0x270>
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800193a:	4a0d      	ldr	r2, [pc, #52]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	6053      	str	r3, [r2, #4]
 8001942:	e030      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
 8001944:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	031b      	lsls	r3, r3, #12
 8001952:	4907      	ldr	r1, [pc, #28]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
 8001958:	e025      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	061b      	lsls	r3, r3, #24
 8001968:	4901      	ldr	r1, [pc, #4]	; (8001970 <HAL_RCC_OscConfig+0x29c>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
 800196e:	e01a      	b.n	80019a6 <HAL_RCC_OscConfig+0x2d2>
 8001970:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001974:	4b9e      	ldr	r3, [pc, #632]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a9d      	ldr	r2, [pc, #628]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fb50 	bl	8001024 <HAL_GetTick>
 8001984:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001986:	e008      	b.n	800199a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001988:	f7ff fb4c 	bl	8001024 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b02      	cmp	r3, #2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e2c2      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800199a:	4b95      	ldr	r3, [pc, #596]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1f0      	bne.n	8001988 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0310 	and.w	r3, r3, #16
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a9 	beq.w	8001b06 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019b4:	4b8e      	ldr	r3, [pc, #568]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80019be:	4b8c      	ldr	r3, [pc, #560]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	2b08      	cmp	r3, #8
 80019c8:	d007      	beq.n	80019da <HAL_RCC_OscConfig+0x306>
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b18      	cmp	r3, #24
 80019ce:	d13a      	bne.n	8001a46 <HAL_RCC_OscConfig+0x372>
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d135      	bne.n	8001a46 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_RCC_OscConfig+0x31e>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b80      	cmp	r3, #128	; 0x80
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e296      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019f2:	f7ff fb47 	bl	8001084 <HAL_GetREVID>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d817      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x35c>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d108      	bne.n	8001a1a <HAL_RCC_OscConfig+0x346>
 8001a08:	4b79      	ldr	r3, [pc, #484]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a10:	4a77      	ldr	r2, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a16:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a18:	e075      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a1a:	4b75      	ldr	r3, [pc, #468]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	4971      	ldr	r1, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a2e:	e06a      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a30:	4b6f      	ldr	r3, [pc, #444]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	496c      	ldr	r1, [pc, #432]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a44:	e05f      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d042      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001a4e:	4b68      	ldr	r3, [pc, #416]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a67      	ldr	r2, [pc, #412]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fae3 	bl	8001024 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a62:	f7ff fadf 	bl	8001024 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e255      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001a74:	4b5e      	ldr	r3, [pc, #376]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a80:	f7ff fb00 	bl	8001084 <HAL_GetREVID>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d817      	bhi.n	8001abe <HAL_RCC_OscConfig+0x3ea>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b20      	cmp	r3, #32
 8001a94:	d108      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x3d4>
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a9e:	4a54      	ldr	r2, [pc, #336]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001aa4:	6053      	str	r3, [r2, #4]
 8001aa6:	e02e      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
 8001aa8:	4b51      	ldr	r3, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	069b      	lsls	r3, r3, #26
 8001ab6:	494e      	ldr	r1, [pc, #312]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
 8001abc:	e023      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
 8001abe:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	061b      	lsls	r3, r3, #24
 8001acc:	4948      	ldr	r1, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60cb      	str	r3, [r1, #12]
 8001ad2:	e018      	b.n	8001b06 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ad4:	4b46      	ldr	r3, [pc, #280]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff faa0 	bl	8001024 <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fa9c 	bl	8001024 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e212      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d036      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d019      	beq.n	8001b4e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b35      	ldr	r3, [pc, #212]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b1e:	4a34      	ldr	r2, [pc, #208]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff fa7d 	bl	8001024 <HAL_GetTick>
 8001b2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff fa79 	bl	8001024 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e1ef      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x45a>
 8001b4c:	e018      	b.n	8001b80 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5a:	f7ff fa63 	bl	8001024 <HAL_GetTick>
 8001b5e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b62:	f7ff fa5f 	bl	8001024 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1d5      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0320 	and.w	r3, r3, #32
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d039      	beq.n	8001c00 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d019      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a15      	ldr	r2, [pc, #84]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fa40 	bl	8001024 <HAL_GetTick>
 8001ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ba8:	f7ff fa3c 	bl	8001024 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e1b2      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001bba:	4b0d      	ldr	r3, [pc, #52]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0f0      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x4d4>
 8001bc6:	e01b      	b.n	8001c00 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a08      	ldr	r2, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x51c>)
 8001bce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001bd4:	f7ff fa26 	bl	8001024 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001bdc:	f7ff fa22 	bl	8001024 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d904      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e198      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
 8001bee:	bf00      	nop
 8001bf0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001bf4:	4ba3      	ldr	r3, [pc, #652]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1ed      	bne.n	8001bdc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8081 	beq.w	8001d10 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c0e:	4b9e      	ldr	r3, [pc, #632]	; (8001e88 <HAL_RCC_OscConfig+0x7b4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a9d      	ldr	r2, [pc, #628]	; (8001e88 <HAL_RCC_OscConfig+0x7b4>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c1a:	f7ff fa03 	bl	8001024 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c22:	f7ff f9ff 	bl	8001024 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b64      	cmp	r3, #100	; 0x64
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e175      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c34:	4b94      	ldr	r3, [pc, #592]	; (8001e88 <HAL_RCC_OscConfig+0x7b4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x582>
 8001c48:	4b8e      	ldr	r3, [pc, #568]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	4a8d      	ldr	r2, [pc, #564]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	6713      	str	r3, [r2, #112]	; 0x70
 8001c54:	e02d      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5a4>
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a88      	ldr	r2, [pc, #544]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	4b86      	ldr	r3, [pc, #536]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a85      	ldr	r2, [pc, #532]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	e01c      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b05      	cmp	r3, #5
 8001c7e:	d10c      	bne.n	8001c9a <HAL_RCC_OscConfig+0x5c6>
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a7c      	ldr	r2, [pc, #496]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	e00b      	b.n	8001cb2 <HAL_RCC_OscConfig+0x5de>
 8001c9a:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9e:	4a79      	ldr	r2, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca6:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a76      	ldr	r2, [pc, #472]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d015      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7ff f9b3 	bl	8001024 <HAL_GetTick>
 8001cbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7ff f9af 	bl	8001024 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e123      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d0ee      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x5ee>
 8001ce4:	e014      	b.n	8001d10 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce6:	f7ff f99d 	bl	8001024 <HAL_GetTick>
 8001cea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001cec:	e00a      	b.n	8001d04 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7ff f999 	bl	8001024 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e10d      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d04:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1ee      	bne.n	8001cee <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8102 	beq.w	8001f1e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001d1a:	4b5a      	ldr	r3, [pc, #360]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	f000 80bd 	beq.w	8001ea2 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	f040 8095 	bne.w	8001e5c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d32:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff f971 	bl	8001024 <HAL_GetTick>
 8001d42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d46:	f7ff f96d 	bl	8001024 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e0e3      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d58:	4b4a      	ldr	r3, [pc, #296]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d64:	4b47      	ldr	r3, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d68:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <HAL_RCC_OscConfig+0x7b8>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	430a      	orrs	r2, r1
 8001d78:	4942      	ldr	r1, [pc, #264]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	628b      	str	r3, [r1, #40]	; 0x28
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	3b01      	subs	r3, #1
 8001d84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	3b01      	subs	r3, #1
 8001d8e:	025b      	lsls	r3, r3, #9
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001da0:	431a      	orrs	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	3b01      	subs	r3, #1
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001dae:	4935      	ldr	r1, [pc, #212]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001db0:	4313      	orrs	r3, r2
 8001db2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001dc0:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc4:	4b32      	ldr	r3, [pc, #200]	; (8001e90 <HAL_RCC_OscConfig+0x7bc>)
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dcc:	00d2      	lsls	r2, r2, #3
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f023 020c 	bic.w	r2, r3, #12
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4928      	ldr	r1, [pc, #160]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dea:	f023 0202 	bic.w	r2, r3, #2
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4924      	ldr	r1, [pc, #144]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001df8:	4b22      	ldr	r3, [pc, #136]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	4a21      	ldr	r2, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e08:	4a1e      	ldr	r2, [pc, #120]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	4a1b      	ldr	r2, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	4a18      	ldr	r2, [pc, #96]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e28:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff f8f6 	bl	8001024 <HAL_GetTick>
 8001e38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7ff f8f2 	bl	8001024 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e068      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x768>
 8001e5a:	e060      	b.n	8001f1e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a08      	ldr	r2, [pc, #32]	; (8001e84 <HAL_RCC_OscConfig+0x7b0>)
 8001e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e68:	f7ff f8dc 	bl	8001024 <HAL_GetTick>
 8001e6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e6e:	e011      	b.n	8001e94 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e70:	f7ff f8d8 	bl	8001024 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d90a      	bls.n	8001e94 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e04e      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
 8001e82:	bf00      	nop
 8001e84:	58024400 	.word	0x58024400
 8001e88:	58024800 	.word	0x58024800
 8001e8c:	fffffc0c 	.word	0xfffffc0c
 8001e90:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x854>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e7      	bne.n	8001e70 <HAL_RCC_OscConfig+0x79c>
 8001ea0:	e03d      	b.n	8001f1e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ea2:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x854>)
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <HAL_RCC_OscConfig+0x854>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d031      	beq.n	8001f1a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0203 	and.w	r2, r3, #3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d12a      	bne.n	8001f1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d122      	bne.n	8001f1a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d11a      	bne.n	8001f1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	0a5b      	lsrs	r3, r3, #9
 8001ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ef0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d111      	bne.n	8001f1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	0c1b      	lsrs	r3, r3, #16
 8001efa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f02:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d108      	bne.n	8001f1a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	0e1b      	lsrs	r3, r3, #24
 8001f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d001      	beq.n	8001f1e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3730      	adds	r7, #48	; 0x30
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	58024400 	.word	0x58024400

08001f2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e19c      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f40:	4b8a      	ldr	r3, [pc, #552]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 030f 	and.w	r3, r3, #15
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d910      	bls.n	8001f70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4e:	4b87      	ldr	r3, [pc, #540]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f023 020f 	bic.w	r2, r3, #15
 8001f56:	4985      	ldr	r1, [pc, #532]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5e:	4b83      	ldr	r3, [pc, #524]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d001      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e184      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0304 	and.w	r3, r3, #4
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d010      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691a      	ldr	r2, [r3, #16]
 8001f80:	4b7b      	ldr	r3, [pc, #492]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d908      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f8c:	4b78      	ldr	r3, [pc, #480]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	4975      	ldr	r1, [pc, #468]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d010      	beq.n	8001fcc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	4b70      	ldr	r3, [pc, #448]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d908      	bls.n	8001fcc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fba:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	496a      	ldr	r1, [pc, #424]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d010      	beq.n	8001ffa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	699a      	ldr	r2, [r3, #24]
 8001fdc:	4b64      	ldr	r3, [pc, #400]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d908      	bls.n	8001ffa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	495e      	ldr	r1, [pc, #376]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b00      	cmp	r3, #0
 8002004:	d010      	beq.n	8002028 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69da      	ldr	r2, [r3, #28]
 800200a:	4b59      	ldr	r3, [pc, #356]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 800200c:	6a1b      	ldr	r3, [r3, #32]
 800200e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002012:	429a      	cmp	r2, r3
 8002014:	d908      	bls.n	8002028 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002016:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4953      	ldr	r1, [pc, #332]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002024:	4313      	orrs	r3, r2
 8002026:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 030f 	and.w	r3, r3, #15
 8002040:	429a      	cmp	r2, r3
 8002042:	d908      	bls.n	8002056 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b4a      	ldr	r3, [pc, #296]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f023 020f 	bic.w	r2, r3, #15
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	4947      	ldr	r1, [pc, #284]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002052:	4313      	orrs	r3, r2
 8002054:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d055      	beq.n	800210e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	4940      	ldr	r1, [pc, #256]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002070:	4313      	orrs	r3, r2
 8002072:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d107      	bne.n	800208c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800207c:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d121      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0f6      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b03      	cmp	r3, #3
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002094:	4b36      	ldr	r3, [pc, #216]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d115      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0ea      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d109      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0de      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80020bc:	4b2c      	ldr	r3, [pc, #176]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d6      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020cc:	4b28      	ldr	r3, [pc, #160]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4925      	ldr	r1, [pc, #148]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020de:	f7fe ffa1 	bl	8001024 <HAL_GetTick>
 80020e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e4:	e00a      	b.n	80020fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e6:	f7fe ff9d 	bl	8001024 <HAL_GetTick>
 80020ea:	4602      	mov	r2, r0
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0be      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fc:	4b1c      	ldr	r3, [pc, #112]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	429a      	cmp	r2, r3
 800210c:	d1eb      	bne.n	80020e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d010      	beq.n	800213c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	4b14      	ldr	r3, [pc, #80]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f003 030f 	and.w	r3, r3, #15
 8002126:	429a      	cmp	r2, r3
 8002128:	d208      	bcs.n	800213c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	f023 020f 	bic.w	r2, r3, #15
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	490e      	ldr	r1, [pc, #56]	; (8002170 <HAL_RCC_ClockConfig+0x244>)
 8002138:	4313      	orrs	r3, r2
 800213a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800213c:	4b0b      	ldr	r3, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d214      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800214a:	4b08      	ldr	r3, [pc, #32]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 020f 	bic.w	r2, r3, #15
 8002152:	4906      	ldr	r1, [pc, #24]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	4313      	orrs	r3, r2
 8002158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <HAL_RCC_ClockConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d005      	beq.n	8002174 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e086      	b.n	800227a <HAL_RCC_ClockConfig+0x34e>
 800216c:	52002000 	.word	0x52002000
 8002170:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	691a      	ldr	r2, [r3, #16]
 8002184:	4b3f      	ldr	r3, [pc, #252]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800218c:	429a      	cmp	r2, r3
 800218e:	d208      	bcs.n	80021a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002190:	4b3c      	ldr	r3, [pc, #240]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	691b      	ldr	r3, [r3, #16]
 800219c:	4939      	ldr	r1, [pc, #228]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	695a      	ldr	r2, [r3, #20]
 80021b2:	4b34      	ldr	r3, [pc, #208]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021b4:	69db      	ldr	r3, [r3, #28]
 80021b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d208      	bcs.n	80021d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80021be:	4b31      	ldr	r3, [pc, #196]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	492e      	ldr	r1, [pc, #184]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d010      	beq.n	80021fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d208      	bcs.n	80021fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	4922      	ldr	r1, [pc, #136]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002216:	429a      	cmp	r2, r3
 8002218:	d208      	bcs.n	800222c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	4917      	ldr	r1, [pc, #92]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 8002228:	4313      	orrs	r3, r2
 800222a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800222c:	f000 f89e 	bl	800236c <HAL_RCC_GetSysClockFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	4912      	ldr	r1, [pc, #72]	; (8002288 <HAL_RCC_ClockConfig+0x35c>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <HAL_RCC_ClockConfig+0x358>)
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a0d      	ldr	r2, [pc, #52]	; (8002288 <HAL_RCC_ClockConfig+0x35c>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	f003 031f 	and.w	r3, r3, #31
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <HAL_RCC_ClockConfig+0x360>)
 8002262:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002264:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_RCC_ClockConfig+0x364>)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_RCC_ClockConfig+0x368>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fe8e 	bl	8000f90 <HAL_InitTick>
 8002274:	4603      	mov	r3, r0
 8002276:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	58024400 	.word	0x58024400
 8002288:	08004f7c 	.word	0x08004f7c
 800228c:	24000004 	.word	0x24000004
 8002290:	24000000 	.word	0x24000000
 8002294:	24000008 	.word	0x24000008

08002298 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08c      	sub	sp, #48	; 0x30
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12a      	bne.n	8002300 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 80022ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022b0:	4a2b      	ldr	r2, [pc, #172]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022ba:	4b29      	ldr	r3, [pc, #164]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 80022bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	61bb      	str	r3, [r7, #24]
 80022c6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80022c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ce:	2302      	movs	r3, #2
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d2:	2303      	movs	r3, #3
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80022da:	2300      	movs	r3, #0
 80022dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80022de:	f107 031c 	add.w	r3, r7, #28
 80022e2:	4619      	mov	r1, r3
 80022e4:	481f      	ldr	r0, [pc, #124]	; (8002364 <HAL_RCC_MCOConfig+0xcc>)
 80022e6:	f7fe ffbd 	bl	8001264 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80022ea:	4b1d      	ldr	r3, [pc, #116]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80022f2:	68b9      	ldr	r1, [r7, #8]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	430b      	orrs	r3, r1
 80022f8:	4919      	ldr	r1, [pc, #100]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80022fe:	e02a      	b.n	8002356 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002300:	4b17      	ldr	r3, [pc, #92]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0304 	and.w	r3, r3, #4
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800231e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002328:	2303      	movs	r3, #3
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	480b      	ldr	r0, [pc, #44]	; (8002368 <HAL_RCC_MCOConfig+0xd0>)
 800233c:	f7fe ff92 	bl	8001264 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002340:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	01d9      	lsls	r1, r3, #7
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	430b      	orrs	r3, r1
 8002350:	4903      	ldr	r1, [pc, #12]	; (8002360 <HAL_RCC_MCOConfig+0xc8>)
 8002352:	4313      	orrs	r3, r2
 8002354:	610b      	str	r3, [r1, #16]
}
 8002356:	bf00      	nop
 8002358:	3730      	adds	r7, #48	; 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	58024400 	.word	0x58024400
 8002364:	58020000 	.word	0x58020000
 8002368:	58020800 	.word	0x58020800

0800236c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002372:	4bb3      	ldr	r3, [pc, #716]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800237a:	2b18      	cmp	r3, #24
 800237c:	f200 8155 	bhi.w	800262a <HAL_RCC_GetSysClockFreq+0x2be>
 8002380:	a201      	add	r2, pc, #4	; (adr r2, 8002388 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002386:	bf00      	nop
 8002388:	080023ed 	.word	0x080023ed
 800238c:	0800262b 	.word	0x0800262b
 8002390:	0800262b 	.word	0x0800262b
 8002394:	0800262b 	.word	0x0800262b
 8002398:	0800262b 	.word	0x0800262b
 800239c:	0800262b 	.word	0x0800262b
 80023a0:	0800262b 	.word	0x0800262b
 80023a4:	0800262b 	.word	0x0800262b
 80023a8:	08002413 	.word	0x08002413
 80023ac:	0800262b 	.word	0x0800262b
 80023b0:	0800262b 	.word	0x0800262b
 80023b4:	0800262b 	.word	0x0800262b
 80023b8:	0800262b 	.word	0x0800262b
 80023bc:	0800262b 	.word	0x0800262b
 80023c0:	0800262b 	.word	0x0800262b
 80023c4:	0800262b 	.word	0x0800262b
 80023c8:	08002419 	.word	0x08002419
 80023cc:	0800262b 	.word	0x0800262b
 80023d0:	0800262b 	.word	0x0800262b
 80023d4:	0800262b 	.word	0x0800262b
 80023d8:	0800262b 	.word	0x0800262b
 80023dc:	0800262b 	.word	0x0800262b
 80023e0:	0800262b 	.word	0x0800262b
 80023e4:	0800262b 	.word	0x0800262b
 80023e8:	0800241f 	.word	0x0800241f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023ec:	4b94      	ldr	r3, [pc, #592]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80023f8:	4b91      	ldr	r3, [pc, #580]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	08db      	lsrs	r3, r3, #3
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	4a90      	ldr	r2, [pc, #576]	; (8002644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800240a:	e111      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800240c:	4b8d      	ldr	r3, [pc, #564]	; (8002644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800240e:	61bb      	str	r3, [r7, #24]
    break;
 8002410:	e10e      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002412:	4b8d      	ldr	r3, [pc, #564]	; (8002648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002414:	61bb      	str	r3, [r7, #24]
    break;
 8002416:	e10b      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002418:	4b8c      	ldr	r3, [pc, #560]	; (800264c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800241a:	61bb      	str	r3, [r7, #24]
    break;
 800241c:	e108      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800241e:	4b88      	ldr	r3, [pc, #544]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002428:	4b85      	ldr	r3, [pc, #532]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002432:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002434:	4b82      	ldr	r3, [pc, #520]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800243e:	4b80      	ldr	r3, [pc, #512]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002442:	08db      	lsrs	r3, r3, #3
 8002444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	ee07 3a90 	vmov	s15, r3
 8002452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002456:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 80e1 	beq.w	8002624 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b02      	cmp	r3, #2
 8002466:	f000 8083 	beq.w	8002570 <HAL_RCC_GetSysClockFreq+0x204>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b02      	cmp	r3, #2
 800246e:	f200 80a1 	bhi.w	80025b4 <HAL_RCC_GetSysClockFreq+0x248>
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <HAL_RCC_GetSysClockFreq+0x114>
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d056      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x1c0>
 800247e:	e099      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002480:	4b6f      	ldr	r3, [pc, #444]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0320 	and.w	r3, r3, #32
 8002488:	2b00      	cmp	r3, #0
 800248a:	d02d      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800248c:	4b6c      	ldr	r3, [pc, #432]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	08db      	lsrs	r3, r3, #3
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	4a6b      	ldr	r2, [pc, #428]	; (8002644 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	ee07 3a90 	vmov	s15, r3
 80024ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80024ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002650 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80024e6:	e087      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002654 <HAL_RCC_GetSysClockFreq+0x2e8>
 80024f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024fa:	4b51      	ldr	r3, [pc, #324]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800250a:	ed97 6a02 	vldr	s12, [r7, #8]
 800250e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002650 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800251a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800251e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800252a:	e065      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002658 <HAL_RCC_GetSysClockFreq+0x2ec>
 800253a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800254e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002552:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002650 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800255a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800255e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800256e:	e043      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	ee07 3a90 	vmov	s15, r3
 8002576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800265c <HAL_RCC_GetSysClockFreq+0x2f0>
 800257e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002582:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002592:	ed97 6a02 	vldr	s12, [r7, #8]
 8002596:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002650 <HAL_RCC_GetSysClockFreq+0x2e4>
 800259a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800259e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025b2:	e021      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002658 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c6:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ce:	ee07 3a90 	vmov	s15, r3
 80025d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002650 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80025f8:	4b11      	ldr	r3, [pc, #68]	; (8002640 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	0a5b      	lsrs	r3, r3, #9
 80025fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002602:	3301      	adds	r3, #1
 8002604:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	ee07 3a90 	vmov	s15, r3
 800260c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002610:	edd7 6a07 	vldr	s13, [r7, #28]
 8002614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800261c:	ee17 3a90 	vmov	r3, s15
 8002620:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002622:	e005      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	61bb      	str	r3, [r7, #24]
    break;
 8002628:	e002      	b.n	8002630 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800262a:	4b07      	ldr	r3, [pc, #28]	; (8002648 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800262c:	61bb      	str	r3, [r7, #24]
    break;
 800262e:	bf00      	nop
  }

  return sysclockfreq;
 8002630:	69bb      	ldr	r3, [r7, #24]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3724      	adds	r7, #36	; 0x24
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	58024400 	.word	0x58024400
 8002644:	03d09000 	.word	0x03d09000
 8002648:	003d0900 	.word	0x003d0900
 800264c:	017d7840 	.word	0x017d7840
 8002650:	46000000 	.word	0x46000000
 8002654:	4c742400 	.word	0x4c742400
 8002658:	4a742400 	.word	0x4a742400
 800265c:	4bbebc20 	.word	0x4bbebc20

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002666:	f7ff fe81 	bl	800236c <HAL_RCC_GetSysClockFreq>
 800266a:	4602      	mov	r2, r0
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	490f      	ldr	r1, [pc, #60]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002678:	5ccb      	ldrb	r3, [r1, r3]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	fa22 f303 	lsr.w	r3, r2, r3
 8002682:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002684:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 030f 	and.w	r3, r3, #15
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	f003 031f 	and.w	r3, r3, #31
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	fa22 f303 	lsr.w	r3, r2, r3
 800269a:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800269c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800269e:	4a07      	ldr	r2, [pc, #28]	; (80026bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	58024400 	.word	0x58024400
 80026b4:	08004f7c 	.word	0x08004f7c
 80026b8:	24000004 	.word	0x24000004
 80026bc:	24000000 	.word	0x24000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026c4:	f7ff ffcc 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4904      	ldr	r1, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	58024400 	.word	0x58024400
 80026e8:	08004f7c 	.word	0x08004f7c

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026f0:	f7ff ffb6 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f8:	69db      	ldr	r3, [r3, #28]
 80026fa:	0a1b      	lsrs	r3, r3, #8
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002702:	5ccb      	ldrb	r3, [r1, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	58024400 	.word	0x58024400
 8002714:	08004f7c 	.word	0x08004f7c

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002720:	2300      	movs	r3, #0
 8002722:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002724:	2300      	movs	r3, #0
 8002726:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03f      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002738:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800273c:	d02a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800273e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002742:	d824      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002744:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002748:	d018      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800274a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800274e:	d81e      	bhi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002750:	2b00      	cmp	r3, #0
 8002752:	d003      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002754:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002758:	d007      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800275a:	e018      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800275c:	4bab      	ldr	r3, [pc, #684]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	4aaa      	ldr	r2, [pc, #680]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002766:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002768:	e015      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3304      	adds	r3, #4
 800276e:	2102      	movs	r1, #2
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f9ff 	bl	8003b74 <RCCEx_PLL2_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800277a:	e00c      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3324      	adds	r3, #36	; 0x24
 8002780:	2102      	movs	r1, #2
 8002782:	4618      	mov	r0, r3
 8002784:	f001 faa8 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800278c:	e003      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	75fb      	strb	r3, [r7, #23]
      break;
 8002792:	e000      	b.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002794:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002796:	7dfb      	ldrb	r3, [r7, #23]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d109      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800279c:	4b9b      	ldr	r3, [pc, #620]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800279e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027a8:	4998      	ldr	r1, [pc, #608]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	650b      	str	r3, [r1, #80]	; 0x50
 80027ae:	e001      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	7dfb      	ldrb	r3, [r7, #23]
 80027b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03d      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d826      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e5 	.word	0x080027e5
 80027d4:	080027f3 	.word	0x080027f3
 80027d8:	08002805 	.word	0x08002805
 80027dc:	0800281d 	.word	0x0800281d
 80027e0:	0800281d 	.word	0x0800281d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027e4:	4b89      	ldr	r3, [pc, #548]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	4a88      	ldr	r2, [pc, #544]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80027ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80027f0:	e015      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2100      	movs	r1, #0
 80027f8:	4618      	mov	r0, r3
 80027fa:	f001 f9bb 	bl	8003b74 <RCCEx_PLL2_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002802:	e00c      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3324      	adds	r3, #36	; 0x24
 8002808:	2100      	movs	r1, #0
 800280a:	4618      	mov	r0, r3
 800280c:	f001 fa64 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002810:	4603      	mov	r3, r0
 8002812:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002814:	e003      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	75fb      	strb	r3, [r7, #23]
      break;
 800281a:	e000      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800281c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800281e:	7dfb      	ldrb	r3, [r7, #23]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002824:	4b79      	ldr	r3, [pc, #484]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002828:	f023 0207 	bic.w	r2, r3, #7
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	4976      	ldr	r1, [pc, #472]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	650b      	str	r3, [r1, #80]	; 0x50
 8002836:	e001      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002838:	7dfb      	ldrb	r3, [r7, #23]
 800283a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002844:	2b00      	cmp	r3, #0
 8002846:	d042      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002850:	d02b      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8002852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002856:	d825      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002858:	2bc0      	cmp	r3, #192	; 0xc0
 800285a:	d028      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800285c:	2bc0      	cmp	r3, #192	; 0xc0
 800285e:	d821      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d016      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002864:	2b80      	cmp	r3, #128	; 0x80
 8002866:	d81d      	bhi.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800286c:	2b40      	cmp	r3, #64	; 0x40
 800286e:	d007      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002870:	e018      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002872:	4b66      	ldr	r3, [pc, #408]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002876:	4a65      	ldr	r2, [pc, #404]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800287e:	e017      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	3304      	adds	r3, #4
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f001 f974 	bl	8003b74 <RCCEx_PLL2_Config>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002890:	e00e      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	3324      	adds	r3, #36	; 0x24
 8002896:	2100      	movs	r1, #0
 8002898:	4618      	mov	r0, r3
 800289a:	f001 fa1d 	bl	8003cd8 <RCCEx_PLL3_Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028a2:	e005      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	75fb      	strb	r3, [r7, #23]
      break;
 80028a8:	e002      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028aa:	bf00      	nop
 80028ac:	e000      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80028ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80028b6:	4b55      	ldr	r3, [pc, #340]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	4952      	ldr	r1, [pc, #328]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	650b      	str	r3, [r1, #80]	; 0x50
 80028c8:	e001      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d049      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80028e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028e4:	d030      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80028e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ea:	d82a      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028f0:	d02c      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80028f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80028f6:	d824      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80028f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028fc:	d018      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80028fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002902:	d81e      	bhi.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800290c:	d007      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800290e:	e018      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002910:	4b3e      	ldr	r3, [pc, #248]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4a3d      	ldr	r2, [pc, #244]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800291c:	e017      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3304      	adds	r3, #4
 8002922:	2100      	movs	r1, #0
 8002924:	4618      	mov	r0, r3
 8002926:	f001 f925 	bl	8003b74 <RCCEx_PLL2_Config>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800292e:	e00e      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3324      	adds	r3, #36	; 0x24
 8002934:	2100      	movs	r1, #0
 8002936:	4618      	mov	r0, r3
 8002938:	f001 f9ce 	bl	8003cd8 <RCCEx_PLL3_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002940:	e005      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	75fb      	strb	r3, [r7, #23]
      break;
 8002946:	e002      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800294c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002954:	4b2d      	ldr	r3, [pc, #180]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002962:	492a      	ldr	r1, [pc, #168]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	658b      	str	r3, [r1, #88]	; 0x58
 8002968:	e001      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800296a:	7dfb      	ldrb	r3, [r7, #23]
 800296c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002976:	2b00      	cmp	r3, #0
 8002978:	d04c      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002980:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002984:	d030      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8002986:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800298a:	d82a      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800298c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002990:	d02c      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8002992:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002996:	d824      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800299c:	d018      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800299e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029a2:	d81e      	bhi.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d003      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80029a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ac:	d007      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80029ae:	e018      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029b0:	4b16      	ldr	r3, [pc, #88]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029bc:	e017      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2100      	movs	r1, #0
 80029c4:	4618      	mov	r0, r3
 80029c6:	f001 f8d5 	bl	8003b74 <RCCEx_PLL2_Config>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80029ce:	e00e      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3324      	adds	r3, #36	; 0x24
 80029d4:	2100      	movs	r1, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f001 f97e 	bl	8003cd8 <RCCEx_PLL3_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029e0:	e005      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80029e8:	bf00      	nop
 80029ea:	e000      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80029ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80029f4:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80029f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a02:	4902      	ldr	r1, [pc, #8]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	658b      	str	r3, [r1, #88]	; 0x58
 8002a08:	e004      	b.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a10:	7dfb      	ldrb	r3, [r7, #23]
 8002a12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d032      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a24:	2b30      	cmp	r3, #48	; 0x30
 8002a26:	d01c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a28:	2b30      	cmp	r3, #48	; 0x30
 8002a2a:	d817      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002a2c:	2b20      	cmp	r3, #32
 8002a2e:	d00c      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8002a30:	2b20      	cmp	r3, #32
 8002a32:	d813      	bhi.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d016      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	d10f      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a3c:	4bb1      	ldr	r3, [pc, #708]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	4ab0      	ldr	r2, [pc, #704]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a48:	e00e      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	2102      	movs	r1, #2
 8002a50:	4618      	mov	r0, r3
 8002a52:	f001 f88f 	bl	8003b74 <RCCEx_PLL2_Config>
 8002a56:	4603      	mov	r3, r0
 8002a58:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002a5a:	e005      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a60:	e002      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002a62:	bf00      	nop
 8002a64:	e000      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8002a66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a68:	7dfb      	ldrb	r3, [r7, #23]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002a6e:	4ba5      	ldr	r3, [pc, #660]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7a:	49a2      	ldr	r1, [pc, #648]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a80:	e001      	b.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d047      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a9a:	d030      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8002a9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aa0:	d82a      	bhi.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002aa6:	d02c      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002aa8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002aac:	d824      	bhi.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002aae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab2:	d018      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8002ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ab8:	d81e      	bhi.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8002abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac2:	d007      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002ac4:	e018      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ac6:	4b8f      	ldr	r3, [pc, #572]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aca:	4a8e      	ldr	r2, [pc, #568]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ad2:	e017      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 f84a 	bl	8003b74 <RCCEx_PLL2_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002ae4:	e00e      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3324      	adds	r3, #36	; 0x24
 8002aea:	2100      	movs	r1, #0
 8002aec:	4618      	mov	r0, r3
 8002aee:	f001 f8f3 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002af6:	e005      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	75fb      	strb	r3, [r7, #23]
      break;
 8002afc:	e002      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8002b02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b04:	7dfb      	ldrb	r3, [r7, #23]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b0a:	4b7e      	ldr	r3, [pc, #504]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b16:	497b      	ldr	r1, [pc, #492]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	650b      	str	r3, [r1, #80]	; 0x50
 8002b1c:	e001      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b1e:	7dfb      	ldrb	r3, [r7, #23]
 8002b20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d049      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b36:	d02e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8002b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b3c:	d828      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b42:	d02a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8002b44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b48:	d822      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b4e:	d026      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8002b50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b54:	d81c      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b5a:	d010      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8002b5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b60:	d816      	bhi.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d01d      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8002b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b6a:	d111      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3304      	adds	r3, #4
 8002b70:	2101      	movs	r1, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fffe 	bl	8003b74 <RCCEx_PLL2_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b7c:	e012      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	3324      	adds	r3, #36	; 0x24
 8002b82:	2101      	movs	r1, #1
 8002b84:	4618      	mov	r0, r3
 8002b86:	f001 f8a7 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002b8e:	e009      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	75fb      	strb	r3, [r7, #23]
      break;
 8002b94:	e006      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b96:	bf00      	nop
 8002b98:	e004      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e002      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8002ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ba4:	7dfb      	ldrb	r3, [r7, #23]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002baa:	4b56      	ldr	r3, [pc, #344]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb6:	4953      	ldr	r1, [pc, #332]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	650b      	str	r3, [r1, #80]	; 0x50
 8002bbc:	e001      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bbe:	7dfb      	ldrb	r3, [r7, #23]
 8002bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d04b      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bd8:	d02e      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bde:	d828      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be4:	d02a      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bea:	d822      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf0:	d026      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8002bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002bf6:	d81c      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c02:	d816      	bhi.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d01d      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c0c:	d111      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	3304      	adds	r3, #4
 8002c12:	2101      	movs	r1, #1
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 ffad 	bl	8003b74 <RCCEx_PLL2_Config>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c1e:	e012      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3324      	adds	r3, #36	; 0x24
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 f856 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c30:	e009      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	75fb      	strb	r3, [r7, #23]
      break;
 8002c36:	e006      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e004      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8002c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c4c:	4b2d      	ldr	r3, [pc, #180]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c5a:	492a      	ldr	r1, [pc, #168]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	658b      	str	r3, [r1, #88]	; 0x58
 8002c60:	e001      	b.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d022      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    switch(PeriphClkInit->DsiClockSelection)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00e      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8002c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c7e:	d108      	bne.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    {

    case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	2101      	movs	r1, #1
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 ff74 	bl	8003b74 <RCCEx_PLL2_Config>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	75fb      	strb	r3, [r7, #23]

      /* DSI clock source configuration done later after clock selection check */
      break;
 8002c90:	e003      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      /* PHY is used as clock source for DSI*/
      /* DSI clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
      break;
 8002c96:	e000      	b.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x582>
      break;
 8002c98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c9a:	7dfb      	ldrb	r3, [r7, #23]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d109      	bne.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002ca0:	4b18      	ldr	r3, [pc, #96]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cac:	4915      	ldr	r1, [pc, #84]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002cb2:	e001      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d031      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x610>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ccc:	d00e      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cd2:	d814      	bhi.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x5e6>
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d017      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
 8002cd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 8002ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cea:	e00e      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 ff3e 	bl	8003b74 <RCCEx_PLL2_Config>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002cfc:	e005      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	75fb      	strb	r3, [r7, #23]
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
 8002d04:	58024400 	.word	0x58024400
      break;
 8002d08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d10:	4bbc      	ldr	r3, [pc, #752]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d14:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	49b9      	ldr	r1, [pc, #740]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	650b      	str	r3, [r1, #80]	; 0x50
 8002d22:	e001      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d032      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d81b      	bhi.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x65c>
 8002d3c:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <HAL_RCCEx_PeriphCLKConfig+0x62c>)
 8002d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d42:	bf00      	nop
 8002d44:	08002d7b 	.word	0x08002d7b
 8002d48:	08002d55 	.word	0x08002d55
 8002d4c:	08002d63 	.word	0x08002d63
 8002d50:	08002d7b 	.word	0x08002d7b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d54:	4bab      	ldr	r3, [pc, #684]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	4aaa      	ldr	r2, [pc, #680]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d5e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d60:	e00c      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x664>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2102      	movs	r1, #2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 ff03 	bl	8003b74 <RCCEx_PLL2_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	75fb      	strb	r3, [r7, #23]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      break;
 8002d7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d82:	4ba0      	ldr	r3, [pc, #640]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d86:	f023 0203 	bic.w	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	499d      	ldr	r1, [pc, #628]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002d94:	e001      	b.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x682>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
 8002d98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f000 8086 	beq.w	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da8:	4b97      	ldr	r3, [pc, #604]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a96      	ldr	r2, [pc, #600]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002dae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002db4:	f7fe f936 	bl	8001024 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dba:	e009      	b.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe f932 	bl	8001024 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d902      	bls.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
      {
        ret = HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	75fb      	strb	r3, [r7, #23]
        break;
 8002dce:	e005      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dd0:	4b8d      	ldr	r3, [pc, #564]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0ef      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      }
    }

    if(ret == HAL_OK)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d166      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002de2:	4b88      	ldr	r3, [pc, #544]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002de4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002dec:	4053      	eors	r3, r2
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x706>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002df6:	4b83      	ldr	r3, [pc, #524]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dfe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e00:	4b80      	ldr	r3, [pc, #512]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e04:	4a7f      	ldr	r2, [pc, #508]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e0c:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a7c      	ldr	r2, [pc, #496]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e18:	4a7a      	ldr	r2, [pc, #488]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e28:	d115      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e2a:	f7fe f8fb 	bl	8001024 <HAL_GetTick>
 8002e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e30:	e00b      	b.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x732>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e32:	f7fe f8f7 	bl	8001024 <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d902      	bls.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x732>
          {
            ret = HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	75fb      	strb	r3, [r7, #23]
            break;
 8002e48:	e005      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0ed      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x71a>
          }
        }
      }

      if(ret == HAL_OK)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d126      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x792>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x770>
 8002e6c:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e7a:	0919      	lsrs	r1, r3, #4
 8002e7c:	4b63      	ldr	r3, [pc, #396]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x8f4>)
 8002e7e:	400b      	ands	r3, r1
 8002e80:	4960      	ldr	r1, [pc, #384]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	610b      	str	r3, [r1, #16]
 8002e86:	e005      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8002e88:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4a5d      	ldr	r2, [pc, #372]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002e92:	6113      	str	r3, [r2, #16]
 8002e94:	4b5b      	ldr	r3, [pc, #364]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002e96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea2:	4958      	ldr	r1, [pc, #352]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	670b      	str	r3, [r1, #112]	; 0x70
 8002ea8:	e004      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eaa:	7dfb      	ldrb	r3, [r7, #23]
 8002eac:	75bb      	strb	r3, [r7, #22]
 8002eae:	e001      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb0:	7dfb      	ldrb	r3, [r7, #23]
 8002eb2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0301 	and.w	r3, r3, #1
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d07e      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ec4:	2b28      	cmp	r3, #40	; 0x28
 8002ec6:	d867      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x880>
 8002ec8:	a201      	add	r2, pc, #4	; (adr r2, 8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>)
 8002eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ece:	bf00      	nop
 8002ed0:	08002f9f 	.word	0x08002f9f
 8002ed4:	08002f99 	.word	0x08002f99
 8002ed8:	08002f99 	.word	0x08002f99
 8002edc:	08002f99 	.word	0x08002f99
 8002ee0:	08002f99 	.word	0x08002f99
 8002ee4:	08002f99 	.word	0x08002f99
 8002ee8:	08002f99 	.word	0x08002f99
 8002eec:	08002f99 	.word	0x08002f99
 8002ef0:	08002f75 	.word	0x08002f75
 8002ef4:	08002f99 	.word	0x08002f99
 8002ef8:	08002f99 	.word	0x08002f99
 8002efc:	08002f99 	.word	0x08002f99
 8002f00:	08002f99 	.word	0x08002f99
 8002f04:	08002f99 	.word	0x08002f99
 8002f08:	08002f99 	.word	0x08002f99
 8002f0c:	08002f99 	.word	0x08002f99
 8002f10:	08002f87 	.word	0x08002f87
 8002f14:	08002f99 	.word	0x08002f99
 8002f18:	08002f99 	.word	0x08002f99
 8002f1c:	08002f99 	.word	0x08002f99
 8002f20:	08002f99 	.word	0x08002f99
 8002f24:	08002f99 	.word	0x08002f99
 8002f28:	08002f99 	.word	0x08002f99
 8002f2c:	08002f99 	.word	0x08002f99
 8002f30:	08002f9f 	.word	0x08002f9f
 8002f34:	08002f99 	.word	0x08002f99
 8002f38:	08002f99 	.word	0x08002f99
 8002f3c:	08002f99 	.word	0x08002f99
 8002f40:	08002f99 	.word	0x08002f99
 8002f44:	08002f99 	.word	0x08002f99
 8002f48:	08002f99 	.word	0x08002f99
 8002f4c:	08002f99 	.word	0x08002f99
 8002f50:	08002f9f 	.word	0x08002f9f
 8002f54:	08002f99 	.word	0x08002f99
 8002f58:	08002f99 	.word	0x08002f99
 8002f5c:	08002f99 	.word	0x08002f99
 8002f60:	08002f99 	.word	0x08002f99
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	08002f99 	.word	0x08002f99
 8002f6c:	08002f99 	.word	0x08002f99
 8002f70:	08002f9f 	.word	0x08002f9f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	2101      	movs	r1, #1
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f000 fdfa 	bl	8003b74 <RCCEx_PLL2_Config>
 8002f80:	4603      	mov	r3, r0
 8002f82:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f84:	e00c      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x888>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3324      	adds	r3, #36	; 0x24
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fea3 	bl	8003cd8 <RCCEx_PLL3_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f96:	e003      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002f9c:	e000      	b.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x888>
      break;
 8002f9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x8a2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fa6:	4b17      	ldr	r3, [pc, #92]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002faa:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fb2:	4914      	ldr	r1, [pc, #80]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	654b      	str	r3, [r1, #84]	; 0x54
 8002fb8:	e001      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x8a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fba:	7dfb      	ldrb	r3, [r7, #23]
 8002fbc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03e      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fce:	2b05      	cmp	r3, #5
 8002fd0:	d827      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x90a>
 8002fd2:	a201      	add	r2, pc, #4	; (adr r2, 8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd8:	08003029 	.word	0x08003029
 8002fdc:	08002ff1 	.word	0x08002ff1
 8002fe0:	08003011 	.word	0x08003011
 8002fe4:	08003029 	.word	0x08003029
 8002fe8:	08003029 	.word	0x08003029
 8002fec:	08003029 	.word	0x08003029
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 fdbc 	bl	8003b74 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003000:	e013      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x912>
 8003002:	bf00      	nop
 8003004:	58024400 	.word	0x58024400
 8003008:	58024800 	.word	0x58024800
 800300c:	00ffffcf 	.word	0x00ffffcf

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	3324      	adds	r3, #36	; 0x24
 8003014:	2101      	movs	r1, #1
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fe5e 	bl	8003cd8 <RCCEx_PLL3_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003020:	e003      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x912>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	75fb      	strb	r3, [r7, #23]
      break;
 8003026:	e000      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x912>
      break;
 8003028:	bf00      	nop
    }

    if(ret == HAL_OK)
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003030:	4b9f      	ldr	r3, [pc, #636]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	f023 0207 	bic.w	r2, r3, #7
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800303c:	499c      	ldr	r1, [pc, #624]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800303e:	4313      	orrs	r3, r2
 8003040:	654b      	str	r3, [r1, #84]	; 0x54
 8003042:	e001      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d039      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305a:	2b05      	cmp	r3, #5
 800305c:	d820      	bhi.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_RCCEx_PeriphCLKConfig+0x94c>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	080030a7 	.word	0x080030a7
 8003068:	0800307d 	.word	0x0800307d
 800306c:	0800308f 	.word	0x0800308f
 8003070:	080030a7 	.word	0x080030a7
 8003074:	080030a7 	.word	0x080030a7
 8003078:	080030a7 	.word	0x080030a7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 fd76 	bl	8003b74 <RCCEx_PLL2_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800308c:	e00c      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x990>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3324      	adds	r3, #36	; 0x24
 8003092:	2101      	movs	r1, #1
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fe1f 	bl	8003cd8 <RCCEx_PLL3_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800309e:	e003      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	75fb      	strb	r3, [r7, #23]
      break;
 80030a4:	e000      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x990>
      break;
 80030a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030ae:	4b80      	ldr	r3, [pc, #512]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	f023 0207 	bic.w	r2, r3, #7
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030bc:	497c      	ldr	r1, [pc, #496]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	658b      	str	r3, [r1, #88]	; 0x58
 80030c2:	e001      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	7dfb      	ldrb	r3, [r7, #23]
 80030c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d04b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030de:	d02e      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80030e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030e4:	d828      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80030e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ea:	d02a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d822      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80030f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030f6:	d026      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xa2e>
 80030f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80030fc:	d81c      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 80030fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003102:	d010      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8003104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003108:	d816      	bhi.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa20>
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01d      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800310e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003112:	d111      	bne.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3304      	adds	r3, #4
 8003118:	2100      	movs	r1, #0
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fd2a 	bl	8003b74 <RCCEx_PLL2_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003124:	e012      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3324      	adds	r3, #36	; 0x24
 800312a:	2102      	movs	r1, #2
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fdd3 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003136:	e009      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
      break;
 800313c:	e006      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800313e:	bf00      	nop
 8003140:	e004      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa34>
      break;
 800314a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800314c:	7dfb      	ldrb	r3, [r7, #23]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10a      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003152:	4b57      	ldr	r3, [pc, #348]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003156:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	4953      	ldr	r1, [pc, #332]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003162:	4313      	orrs	r3, r2
 8003164:	654b      	str	r3, [r1, #84]	; 0x54
 8003166:	e001      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003174:	2b00      	cmp	r3, #0
 8003176:	d04b      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800317e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003182:	d02e      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xaca>
 8003184:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003188:	d828      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 800318a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800318e:	d02a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xace>
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003194:	d822      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 8003196:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800319a:	d026      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
 800319c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031a0:	d81c      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80031a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031a6:	d010      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xab2>
 80031a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ac:	d816      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xac4>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d01d      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
 80031b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b6:	d111      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xac4>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	2100      	movs	r1, #0
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fcd8 	bl	8003b74 <RCCEx_PLL2_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031c8:	e012      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3324      	adds	r3, #36	; 0x24
 80031ce:	2102      	movs	r1, #2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 fd81 	bl	8003cd8 <RCCEx_PLL3_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031da:	e009      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	75fb      	strb	r3, [r7, #23]
      break;
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80031e2:	bf00      	nop
 80031e4:	e004      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80031e6:	bf00      	nop
 80031e8:	e002      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80031ea:	bf00      	nop
 80031ec:	e000      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
      break;
 80031ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031f6:	4b2e      	ldr	r3, [pc, #184]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003204:	492a      	ldr	r1, [pc, #168]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 8003206:	4313      	orrs	r3, r2
 8003208:	658b      	str	r3, [r1, #88]	; 0x58
 800320a:	e001      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0xaf8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003218:	2b00      	cmp	r3, #0
 800321a:	d04d      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003222:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003226:	d02e      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
 8003228:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800322c:	d828      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800322e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003232:	d02a      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8003234:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003238:	d822      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 800323a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800323e:	d026      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xb76>
 8003240:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003244:	d81c      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800324a:	d010      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb56>
 800324c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003250:	d816      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8003252:	2b00      	cmp	r3, #0
 8003254:	d01d      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0xb7a>
 8003256:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325a:	d111      	bne.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0xb68>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3304      	adds	r3, #4
 8003260:	2100      	movs	r1, #0
 8003262:	4618      	mov	r0, r3
 8003264:	f000 fc86 	bl	8003b74 <RCCEx_PLL2_Config>
 8003268:	4603      	mov	r3, r0
 800326a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800326c:	e012      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3324      	adds	r3, #36	; 0x24
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fd2f 	bl	8003cd8 <RCCEx_PLL3_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800327e:	e009      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
      break;
 8003284:	e006      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003286:	bf00      	nop
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
      break;
 8003292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003294:	7dfb      	ldrb	r3, [r7, #23]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10c      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 800329c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80032a8:	4901      	ldr	r1, [pc, #4]	; (80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb98>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	658b      	str	r3, [r1, #88]	; 0x58
 80032ae:	e003      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80032b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032b4:	7dfb      	ldrb	r3, [r7, #23]
 80032b6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0308 	and.w	r3, r3, #8
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xbe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	d10a      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	2102      	movs	r1, #2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fcfe 	bl	8003cd8 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        {
          status = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032e6:	4b8c      	ldr	r3, [pc, #560]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f4:	4988      	ldr	r1, [pc, #544]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0310 	and.w	r3, r3, #16
 8003302:	2b00      	cmp	r3, #0
 8003304:	d01a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xc24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003310:	d10a      	bne.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3324      	adds	r3, #36	; 0x24
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fcdd 	bl	8003cd8 <RCCEx_PLL3_Config>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc10>
      {
        status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003328:	4b7b      	ldr	r3, [pc, #492]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800332a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003336:	4978      	ldr	r1, [pc, #480]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003338:	4313      	orrs	r3, r2
 800333a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d034      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800334e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003352:	d01d      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003354:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003358:	d817      	bhi.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003362:	d009      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0xc60>
 8003364:	e011      	b.n	800338a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3304      	adds	r3, #4
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f000 fc01 	bl	8003b74 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003376:	e00c      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3324      	adds	r3, #36	; 0x24
 800337c:	2102      	movs	r1, #2
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fcaa 	bl	8003cd8 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003388:	e003      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
      break;
 800338e:	e000      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
      break;
 8003390:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003392:	7dfb      	ldrb	r3, [r7, #23]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003398:	4b5f      	ldr	r3, [pc, #380]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80033a6:	495c      	ldr	r1, [pc, #368]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	658b      	str	r3, [r1, #88]	; 0x58
 80033ac:	e001      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ae:	7dfb      	ldrb	r3, [r7, #23]
 80033b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d033      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033c8:	d01c      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80033ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ce:	d816      	bhi.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xce6>
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033d4:	d003      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80033d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033da:	d007      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xcd4>
 80033dc:	e00f      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xce6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033de:	4b4e      	ldr	r3, [pc, #312]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	4a4d      	ldr	r2, [pc, #308]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80033ea:	e00c      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xcee>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3324      	adds	r3, #36	; 0x24
 80033f0:	2101      	movs	r1, #1
 80033f2:	4618      	mov	r0, r3
 80033f4:	f000 fc70 	bl	8003cd8 <RCCEx_PLL3_Config>
 80033f8:	4603      	mov	r3, r0
 80033fa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80033fc:	e003      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	75fb      	strb	r3, [r7, #23]
      break;
 8003402:	e000      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0xcee>
      break;
 8003404:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003406:	7dfb      	ldrb	r3, [r7, #23]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d10a      	bne.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800340c:	4b42      	ldr	r3, [pc, #264]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	493f      	ldr	r1, [pc, #252]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800341c:	4313      	orrs	r3, r2
 800341e:	654b      	str	r3, [r1, #84]	; 0x54
 8003420:	e001      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003422:	7dfb      	ldrb	r3, [r7, #23]
 8003424:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d029      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0xd2a>
 800343a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800343e:	d007      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xd38>
 8003440:	e00f      	b.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003442:	4b35      	ldr	r3, [pc, #212]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800344c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800344e:	e00b      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	2102      	movs	r1, #2
 8003456:	4618      	mov	r0, r3
 8003458:	f000 fb8c 	bl	8003b74 <RCCEx_PLL2_Config>
 800345c:	4603      	mov	r3, r0
 800345e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003460:	e002      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd50>

    default:
      ret = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
      break;
 8003466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0xd6a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	4927      	ldr	r1, [pc, #156]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 800347c:	4313      	orrs	r3, r2
 800347e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003480:	e001      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003482:	7dfb      	ldrb	r3, [r7, #23]
 8003484:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3324      	adds	r3, #36	; 0x24
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f000 fc1d 	bl	8003cd8 <RCCEx_PLL3_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
    {
      status=HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d035      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xe08>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034be:	d017      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>
 80034c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034c4:	d811      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034ca:	d013      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xddc>
 80034cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d0:	d80b      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d010      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xde0>
 80034d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034da:	d106      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034dc:	4b0e      	ldr	r3, [pc, #56]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	4a0d      	ldr	r2, [pc, #52]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034e8:	e007      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
      break;
 80034ee:	e004      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80034f0:	bf00      	nop
 80034f2:	e002      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80034f4:	bf00      	nop
 80034f6:	e000      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
      break;
 80034f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034fa:	7dfb      	ldrb	r3, [r7, #23]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10d      	bne.n	800351c <HAL_RCCEx_PeriphCLKConfig+0xe04>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003500:	4b05      	ldr	r3, [pc, #20]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800350e:	4902      	ldr	r1, [pc, #8]	; (8003518 <HAL_RCCEx_PeriphCLKConfig+0xe00>)
 8003510:	4313      	orrs	r3, r2
 8003512:	654b      	str	r3, [r1, #84]	; 0x54
 8003514:	e004      	b.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8003516:	bf00      	nop
 8003518:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800351c:	7dfb      	ldrb	r3, [r7, #23]
 800351e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xe26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800352c:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003538:	492e      	ldr	r1, [pc, #184]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800353a:	4313      	orrs	r3, r2
 800353c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d009      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0xe46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800354a:	4b2a      	ldr	r3, [pc, #168]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003558:	4926      	ldr	r1, [pc, #152]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800355a:	4313      	orrs	r3, r2
 800355c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d008      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800356a:	4b22      	ldr	r3, [pc, #136]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800356c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003576:	491f      	ldr	r1, [pc, #124]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003578:	4313      	orrs	r3, r2
 800357a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00d      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	4a19      	ldr	r2, [pc, #100]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 800358e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003592:	6113      	str	r3, [r2, #16]
 8003594:	4b17      	ldr	r3, [pc, #92]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800359e:	4915      	ldr	r1, [pc, #84]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	da08      	bge.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xea6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035ac:	4b11      	ldr	r3, [pc, #68]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80035ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b8:	490e      	ldr	r1, [pc, #56]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0xec6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035ca:	4b0a      	ldr	r3, [pc, #40]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d8:	4906      	ldr	r1, [pc, #24]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0xedc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035de:	7dbb      	ldrb	r3, [r7, #22]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0xed0>
  {
    return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e000      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0xed2>
  }
  return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	3718      	adds	r7, #24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	58024400 	.word	0x58024400

080035f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80035fc:	f7ff f830 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b06      	ldr	r3, [pc, #24]	; (800361c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4904      	ldr	r1, [pc, #16]	; (8003620 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	f003 031f 	and.w	r3, r3, #31
 8003614:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003618:	4618      	mov	r0, r3
 800361a:	bd80      	pop	{r7, pc}
 800361c:	58024400 	.word	0x58024400
 8003620:	08004f7c 	.word	0x08004f7c

08003624 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800362c:	4ba1      	ldr	r3, [pc, #644]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800362e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003630:	f003 0303 	and.w	r3, r3, #3
 8003634:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003636:	4b9f      	ldr	r3, [pc, #636]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	0b1b      	lsrs	r3, r3, #12
 800363c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003640:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003642:	4b9c      	ldr	r3, [pc, #624]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003646:	091b      	lsrs	r3, r3, #4
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800364e:	4b99      	ldr	r3, [pc, #612]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003652:	08db      	lsrs	r3, r3, #3
 8003654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	ee07 3a90 	vmov	s15, r3
 8003662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003666:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8111 	beq.w	8003894 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b02      	cmp	r3, #2
 8003676:	f000 8083 	beq.w	8003780 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2b02      	cmp	r3, #2
 800367e:	f200 80a1 	bhi.w	80037c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d056      	beq.n	800373c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800368e:	e099      	b.n	80037c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003690:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0320 	and.w	r3, r3, #32
 8003698:	2b00      	cmp	r3, #0
 800369a:	d02d      	beq.n	80036f8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800369c:	4b85      	ldr	r3, [pc, #532]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	08db      	lsrs	r3, r3, #3
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	4a84      	ldr	r2, [pc, #528]	; (80038b8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
 80036ac:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	ee07 3a90 	vmov	s15, r3
 80036b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	ee07 3a90 	vmov	s15, r3
 80036be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036c6:	4b7b      	ldr	r3, [pc, #492]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80036da:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036f2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80036f6:	e087      	b.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	ee07 3a90 	vmov	s15, r3
 80036fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003702:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038c0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800370a:	4b6a      	ldr	r3, [pc, #424]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003712:	ee07 3a90 	vmov	s15, r3
 8003716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800371a:	ed97 6a03 	vldr	s12, [r7, #12]
 800371e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800373a:	e065      	b.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	ee07 3a90 	vmov	s15, r3
 8003742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003746:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800374a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800374e:	4b59      	ldr	r3, [pc, #356]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003756:	ee07 3a90 	vmov	s15, r3
 800375a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800375e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003762:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800376a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800376e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800377a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800377e:	e043      	b.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	ee07 3a90 	vmov	s15, r3
 8003786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800378a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800378e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003792:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800379a:	ee07 3a90 	vmov	s15, r3
 800379e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80037a6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037c2:	e021      	b.n	8003808 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037ce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037d6:	4b37      	ldr	r3, [pc, #220]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037de:	ee07 3a90 	vmov	s15, r3
 80037e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ea:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038bc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003806:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	0a5b      	lsrs	r3, r3, #9
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003812:	ee07 3a90 	vmov	s15, r3
 8003816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800381a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800381e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003822:	edd7 6a07 	vldr	s13, [r7, #28]
 8003826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800382e:	ee17 2a90 	vmov	r2, s15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003836:	4b1f      	ldr	r3, [pc, #124]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003840:	ee07 3a90 	vmov	s15, r3
 8003844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800384c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003850:	edd7 6a07 	vldr	s13, [r7, #28]
 8003854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385c:	ee17 2a90 	vmov	r2, s15
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003864:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	0e1b      	lsrs	r3, r3, #24
 800386a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800386e:	ee07 3a90 	vmov	s15, r3
 8003872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003876:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800387a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800388a:	ee17 2a90 	vmov	r2, s15
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003892:	e008      	b.n	80038a6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
}
 80038a6:	bf00      	nop
 80038a8:	3724      	adds	r7, #36	; 0x24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	58024400 	.word	0x58024400
 80038b8:	03d09000 	.word	0x03d09000
 80038bc:	46000000 	.word	0x46000000
 80038c0:	4c742400 	.word	0x4c742400
 80038c4:	4a742400 	.word	0x4a742400
 80038c8:	4bbebc20 	.word	0x4bbebc20

080038cc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b089      	sub	sp, #36	; 0x24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038d4:	4ba1      	ldr	r3, [pc, #644]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038de:	4b9f      	ldr	r3, [pc, #636]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	0d1b      	lsrs	r3, r3, #20
 80038e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80038ea:	4b9c      	ldr	r3, [pc, #624]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	0a1b      	lsrs	r3, r3, #8
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80038f6:	4b99      	ldr	r3, [pc, #612]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	08db      	lsrs	r3, r3, #3
 80038fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 8111 	beq.w	8003b3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	2b02      	cmp	r3, #2
 800391e:	f000 8083 	beq.w	8003a28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2b02      	cmp	r3, #2
 8003926:	f200 80a1 	bhi.w	8003a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d056      	beq.n	80039e4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003936:	e099      	b.n	8003a6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003938:	4b88      	ldr	r3, [pc, #544]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0320 	and.w	r3, r3, #32
 8003940:	2b00      	cmp	r3, #0
 8003942:	d02d      	beq.n	80039a0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003944:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	08db      	lsrs	r3, r3, #3
 800394a:	f003 0303 	and.w	r3, r3, #3
 800394e:	4a84      	ldr	r2, [pc, #528]	; (8003b60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
 8003954:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	ee07 3a90 	vmov	s15, r3
 800395c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800396a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396e:	4b7b      	ldr	r3, [pc, #492]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003982:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800398a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800399a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800399e:	e087      	b.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039aa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039b2:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039e2:	e065      	b.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	ee07 3a90 	vmov	s15, r3
 80039ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80039f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f6:	4b59      	ldr	r3, [pc, #356]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fe:	ee07 3a90 	vmov	s15, r3
 8003a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a26:	e043      	b.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	ee07 3a90 	vmov	s15, r3
 8003a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3a:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a42:	ee07 3a90 	vmov	s15, r3
 8003a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a6a:	e021      	b.n	8003ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	ee07 3a90 	vmov	s15, r3
 8003a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a92:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003aae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ab0:	4b2a      	ldr	r3, [pc, #168]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	0a5b      	lsrs	r3, r3, #9
 8003ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aba:	ee07 3a90 	vmov	s15, r3
 8003abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ace:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad6:	ee17 2a90 	vmov	r2, s15
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	0c1b      	lsrs	r3, r3, #16
 8003ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae8:	ee07 3a90 	vmov	s15, r3
 8003aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b04:	ee17 2a90 	vmov	r2, s15
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b0c:	4b13      	ldr	r3, [pc, #76]	; (8003b5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b10:	0e1b      	lsrs	r3, r3, #24
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	ee07 3a90 	vmov	s15, r3
 8003b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b32:	ee17 2a90 	vmov	r2, s15
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b3a:	e008      	b.n	8003b4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	03d09000 	.word	0x03d09000
 8003b64:	46000000 	.word	0x46000000
 8003b68:	4c742400 	.word	0x4c742400
 8003b6c:	4a742400 	.word	0x4a742400
 8003b70:	4bbebc20 	.word	0x4bbebc20

08003b74 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b82:	4b53      	ldr	r3, [pc, #332]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0303 	and.w	r3, r3, #3
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d101      	bne.n	8003b92 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e099      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003b92:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a4e      	ldr	r2, [pc, #312]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003b98:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b9e:	f7fd fa41 	bl	8001024 <HAL_GetTick>
 8003ba2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ba6:	f7fd fa3d 	bl	8001024 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e086      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb8:	4b45      	ldr	r3, [pc, #276]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d1f0      	bne.n	8003ba6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	031b      	lsls	r3, r3, #12
 8003bd2:	493f      	ldr	r1, [pc, #252]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	628b      	str	r3, [r1, #40]	; 0x28
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	3b01      	subs	r3, #1
 8003be8:	025b      	lsls	r3, r3, #9
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	041b      	lsls	r3, r3, #16
 8003bf6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	3b01      	subs	r3, #1
 8003c02:	061b      	lsls	r3, r3, #24
 8003c04:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c08:	4931      	ldr	r1, [pc, #196]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c0e:	4b30      	ldr	r3, [pc, #192]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	492d      	ldr	r1, [pc, #180]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c20:	4b2b      	ldr	r3, [pc, #172]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	f023 0220 	bic.w	r2, r3, #32
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	4928      	ldr	r1, [pc, #160]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c32:	4b27      	ldr	r3, [pc, #156]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c3e:	4b24      	ldr	r3, [pc, #144]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c42:	4b24      	ldr	r3, [pc, #144]	; (8003cd4 <RCCEx_PLL2_Config+0x160>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	69d2      	ldr	r2, [r2, #28]
 8003c4a:	00d2      	lsls	r2, r2, #3
 8003c4c:	4920      	ldr	r1, [pc, #128]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c52:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c58:	f043 0310 	orr.w	r3, r3, #16
 8003c5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d106      	bne.n	8003c72 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c64:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c68:	4a19      	ldr	r2, [pc, #100]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c70:	e00f      	b.n	8003c92 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d106      	bne.n	8003c86 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c78:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a14      	ldr	r2, [pc, #80]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c84:	e005      	b.n	8003c92 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c86:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003c90:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003c98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c9c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c9e:	f7fd f9c1 	bl	8001024 <HAL_GetTick>
 8003ca2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ca4:	e008      	b.n	8003cb8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003ca6:	f7fd f9bd 	bl	8001024 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d901      	bls.n	8003cb8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e006      	b.n	8003cc6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <RCCEx_PLL2_Config+0x15c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0f0      	beq.n	8003ca6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	58024400 	.word	0x58024400
 8003cd4:	ffff0007 	.word	0xffff0007

08003cd8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ce6:	4b53      	ldr	r3, [pc, #332]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	2b03      	cmp	r3, #3
 8003cf0:	d101      	bne.n	8003cf6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e099      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003cf6:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a4e      	ldr	r2, [pc, #312]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d02:	f7fd f98f 	bl	8001024 <HAL_GetTick>
 8003d06:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d08:	e008      	b.n	8003d1c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d0a:	f7fd f98b 	bl	8001024 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e086      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d1c:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1f0      	bne.n	8003d0a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d28:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	051b      	lsls	r3, r3, #20
 8003d36:	493f      	ldr	r1, [pc, #252]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	628b      	str	r3, [r1, #40]	; 0x28
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	025b      	lsls	r3, r3, #9
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	061b      	lsls	r3, r3, #24
 8003d68:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d6c:	4931      	ldr	r1, [pc, #196]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	492d      	ldr	r1, [pc, #180]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d84:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	4928      	ldr	r1, [pc, #160]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003d96:	4b27      	ldr	r3, [pc, #156]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9a:	4a26      	ldr	r2, [pc, #152]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003da0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003da2:	4b24      	ldr	r3, [pc, #144]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da6:	4b24      	ldr	r3, [pc, #144]	; (8003e38 <RCCEx_PLL3_Config+0x160>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	69d2      	ldr	r2, [r2, #28]
 8003dae:	00d2      	lsls	r2, r2, #3
 8003db0:	4920      	ldr	r1, [pc, #128]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dba:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d106      	bne.n	8003dd6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dd4:	e00f      	b.n	8003df6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a14      	ldr	r2, [pc, #80]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003de2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de8:	e005      	b.n	8003df6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dea:	4b12      	ldr	r3, [pc, #72]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	4a11      	ldr	r2, [pc, #68]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003df0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003df4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003df6:	4b0f      	ldr	r3, [pc, #60]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e02:	f7fd f90f 	bl	8001024 <HAL_GetTick>
 8003e06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e08:	e008      	b.n	8003e1c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e0a:	f7fd f90b 	bl	8001024 <HAL_GetTick>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e006      	b.n	8003e2a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e1c:	4b05      	ldr	r3, [pc, #20]	; (8003e34 <RCCEx_PLL3_Config+0x15c>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0f0      	beq.n	8003e0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	ffff0007 	.word	0xffff0007

08003e3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e042      	b.n	8003ed4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d106      	bne.n	8003e66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f7fc ff9f 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f82c 	bl	8003edc <UART_SetConfig>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e022      	b.n	8003ed4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d002      	beq.n	8003e9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fd80 	bl	800499c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003eaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fe07 	bl	8004ae0 <UART_CheckIdleState>
 8003ed2:	4603      	mov	r3, r0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003edc:	b5b0      	push	{r4, r5, r7, lr}
 8003ede:	b08e      	sub	sp, #56	; 0x38
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4bbf      	ldr	r3, [pc, #764]	; (8004208 <UART_SetConfig+0x32c>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f12:	430b      	orrs	r3, r1
 8003f14:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4ab5      	ldr	r2, [pc, #724]	; (800420c <UART_SetConfig+0x330>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f42:	4313      	orrs	r3, r2
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4bb0      	ldr	r3, [pc, #704]	; (8004210 <UART_SetConfig+0x334>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003f56:	430b      	orrs	r3, r1
 8003f58:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f023 010f 	bic.w	r1, r3, #15
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4aa7      	ldr	r2, [pc, #668]	; (8004214 <UART_SetConfig+0x338>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d176      	bne.n	8004068 <UART_SetConfig+0x18c>
 8003f7a:	4ba7      	ldr	r3, [pc, #668]	; (8004218 <UART_SetConfig+0x33c>)
 8003f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f82:	2b28      	cmp	r3, #40	; 0x28
 8003f84:	d86c      	bhi.n	8004060 <UART_SetConfig+0x184>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0xb0>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08004031 	.word	0x08004031
 8003f90:	08004061 	.word	0x08004061
 8003f94:	08004061 	.word	0x08004061
 8003f98:	08004061 	.word	0x08004061
 8003f9c:	08004061 	.word	0x08004061
 8003fa0:	08004061 	.word	0x08004061
 8003fa4:	08004061 	.word	0x08004061
 8003fa8:	08004061 	.word	0x08004061
 8003fac:	08004039 	.word	0x08004039
 8003fb0:	08004061 	.word	0x08004061
 8003fb4:	08004061 	.word	0x08004061
 8003fb8:	08004061 	.word	0x08004061
 8003fbc:	08004061 	.word	0x08004061
 8003fc0:	08004061 	.word	0x08004061
 8003fc4:	08004061 	.word	0x08004061
 8003fc8:	08004061 	.word	0x08004061
 8003fcc:	08004041 	.word	0x08004041
 8003fd0:	08004061 	.word	0x08004061
 8003fd4:	08004061 	.word	0x08004061
 8003fd8:	08004061 	.word	0x08004061
 8003fdc:	08004061 	.word	0x08004061
 8003fe0:	08004061 	.word	0x08004061
 8003fe4:	08004061 	.word	0x08004061
 8003fe8:	08004061 	.word	0x08004061
 8003fec:	08004049 	.word	0x08004049
 8003ff0:	08004061 	.word	0x08004061
 8003ff4:	08004061 	.word	0x08004061
 8003ff8:	08004061 	.word	0x08004061
 8003ffc:	08004061 	.word	0x08004061
 8004000:	08004061 	.word	0x08004061
 8004004:	08004061 	.word	0x08004061
 8004008:	08004061 	.word	0x08004061
 800400c:	08004051 	.word	0x08004051
 8004010:	08004061 	.word	0x08004061
 8004014:	08004061 	.word	0x08004061
 8004018:	08004061 	.word	0x08004061
 800401c:	08004061 	.word	0x08004061
 8004020:	08004061 	.word	0x08004061
 8004024:	08004061 	.word	0x08004061
 8004028:	08004061 	.word	0x08004061
 800402c:	08004059 	.word	0x08004059
 8004030:	2301      	movs	r3, #1
 8004032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004036:	e222      	b.n	800447e <UART_SetConfig+0x5a2>
 8004038:	2304      	movs	r3, #4
 800403a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800403e:	e21e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004040:	2308      	movs	r3, #8
 8004042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004046:	e21a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004048:	2310      	movs	r3, #16
 800404a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800404e:	e216      	b.n	800447e <UART_SetConfig+0x5a2>
 8004050:	2320      	movs	r3, #32
 8004052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004056:	e212      	b.n	800447e <UART_SetConfig+0x5a2>
 8004058:	2340      	movs	r3, #64	; 0x40
 800405a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800405e:	e20e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004060:	2380      	movs	r3, #128	; 0x80
 8004062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004066:	e20a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a6b      	ldr	r2, [pc, #428]	; (800421c <UART_SetConfig+0x340>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d130      	bne.n	80040d4 <UART_SetConfig+0x1f8>
 8004072:	4b69      	ldr	r3, [pc, #420]	; (8004218 <UART_SetConfig+0x33c>)
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	2b05      	cmp	r3, #5
 800407c:	d826      	bhi.n	80040cc <UART_SetConfig+0x1f0>
 800407e:	a201      	add	r2, pc, #4	; (adr r2, 8004084 <UART_SetConfig+0x1a8>)
 8004080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004084:	0800409d 	.word	0x0800409d
 8004088:	080040a5 	.word	0x080040a5
 800408c:	080040ad 	.word	0x080040ad
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040bd 	.word	0x080040bd
 8004098:	080040c5 	.word	0x080040c5
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040a2:	e1ec      	b.n	800447e <UART_SetConfig+0x5a2>
 80040a4:	2304      	movs	r3, #4
 80040a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040aa:	e1e8      	b.n	800447e <UART_SetConfig+0x5a2>
 80040ac:	2308      	movs	r3, #8
 80040ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040b2:	e1e4      	b.n	800447e <UART_SetConfig+0x5a2>
 80040b4:	2310      	movs	r3, #16
 80040b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ba:	e1e0      	b.n	800447e <UART_SetConfig+0x5a2>
 80040bc:	2320      	movs	r3, #32
 80040be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040c2:	e1dc      	b.n	800447e <UART_SetConfig+0x5a2>
 80040c4:	2340      	movs	r3, #64	; 0x40
 80040c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040ca:	e1d8      	b.n	800447e <UART_SetConfig+0x5a2>
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80040d2:	e1d4      	b.n	800447e <UART_SetConfig+0x5a2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a51      	ldr	r2, [pc, #324]	; (8004220 <UART_SetConfig+0x344>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d130      	bne.n	8004140 <UART_SetConfig+0x264>
 80040de:	4b4e      	ldr	r3, [pc, #312]	; (8004218 <UART_SetConfig+0x33c>)
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f003 0307 	and.w	r3, r3, #7
 80040e6:	2b05      	cmp	r3, #5
 80040e8:	d826      	bhi.n	8004138 <UART_SetConfig+0x25c>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0x214>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004109 	.word	0x08004109
 80040f4:	08004111 	.word	0x08004111
 80040f8:	08004119 	.word	0x08004119
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004129 	.word	0x08004129
 8004104:	08004131 	.word	0x08004131
 8004108:	2300      	movs	r3, #0
 800410a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800410e:	e1b6      	b.n	800447e <UART_SetConfig+0x5a2>
 8004110:	2304      	movs	r3, #4
 8004112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004116:	e1b2      	b.n	800447e <UART_SetConfig+0x5a2>
 8004118:	2308      	movs	r3, #8
 800411a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800411e:	e1ae      	b.n	800447e <UART_SetConfig+0x5a2>
 8004120:	2310      	movs	r3, #16
 8004122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004126:	e1aa      	b.n	800447e <UART_SetConfig+0x5a2>
 8004128:	2320      	movs	r3, #32
 800412a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800412e:	e1a6      	b.n	800447e <UART_SetConfig+0x5a2>
 8004130:	2340      	movs	r3, #64	; 0x40
 8004132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004136:	e1a2      	b.n	800447e <UART_SetConfig+0x5a2>
 8004138:	2380      	movs	r3, #128	; 0x80
 800413a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800413e:	e19e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a37      	ldr	r2, [pc, #220]	; (8004224 <UART_SetConfig+0x348>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d130      	bne.n	80041ac <UART_SetConfig+0x2d0>
 800414a:	4b33      	ldr	r3, [pc, #204]	; (8004218 <UART_SetConfig+0x33c>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	2b05      	cmp	r3, #5
 8004154:	d826      	bhi.n	80041a4 <UART_SetConfig+0x2c8>
 8004156:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0x280>)
 8004158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415c:	08004175 	.word	0x08004175
 8004160:	0800417d 	.word	0x0800417d
 8004164:	08004185 	.word	0x08004185
 8004168:	0800418d 	.word	0x0800418d
 800416c:	08004195 	.word	0x08004195
 8004170:	0800419d 	.word	0x0800419d
 8004174:	2300      	movs	r3, #0
 8004176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800417a:	e180      	b.n	800447e <UART_SetConfig+0x5a2>
 800417c:	2304      	movs	r3, #4
 800417e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004182:	e17c      	b.n	800447e <UART_SetConfig+0x5a2>
 8004184:	2308      	movs	r3, #8
 8004186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800418a:	e178      	b.n	800447e <UART_SetConfig+0x5a2>
 800418c:	2310      	movs	r3, #16
 800418e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004192:	e174      	b.n	800447e <UART_SetConfig+0x5a2>
 8004194:	2320      	movs	r3, #32
 8004196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800419a:	e170      	b.n	800447e <UART_SetConfig+0x5a2>
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041a2:	e16c      	b.n	800447e <UART_SetConfig+0x5a2>
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041aa:	e168      	b.n	800447e <UART_SetConfig+0x5a2>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <UART_SetConfig+0x34c>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d142      	bne.n	800423c <UART_SetConfig+0x360>
 80041b6:	4b18      	ldr	r3, [pc, #96]	; (8004218 <UART_SetConfig+0x33c>)
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	2b05      	cmp	r3, #5
 80041c0:	d838      	bhi.n	8004234 <UART_SetConfig+0x358>
 80041c2:	a201      	add	r2, pc, #4	; (adr r2, 80041c8 <UART_SetConfig+0x2ec>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041e1 	.word	0x080041e1
 80041cc:	080041e9 	.word	0x080041e9
 80041d0:	080041f1 	.word	0x080041f1
 80041d4:	080041f9 	.word	0x080041f9
 80041d8:	08004201 	.word	0x08004201
 80041dc:	0800422d 	.word	0x0800422d
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041e6:	e14a      	b.n	800447e <UART_SetConfig+0x5a2>
 80041e8:	2304      	movs	r3, #4
 80041ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041ee:	e146      	b.n	800447e <UART_SetConfig+0x5a2>
 80041f0:	2308      	movs	r3, #8
 80041f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041f6:	e142      	b.n	800447e <UART_SetConfig+0x5a2>
 80041f8:	2310      	movs	r3, #16
 80041fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80041fe:	e13e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004200:	2320      	movs	r3, #32
 8004202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004206:	e13a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004208:	cfff69f3 	.word	0xcfff69f3
 800420c:	58000c00 	.word	0x58000c00
 8004210:	11fff4ff 	.word	0x11fff4ff
 8004214:	40011000 	.word	0x40011000
 8004218:	58024400 	.word	0x58024400
 800421c:	40004400 	.word	0x40004400
 8004220:	40004800 	.word	0x40004800
 8004224:	40004c00 	.word	0x40004c00
 8004228:	40005000 	.word	0x40005000
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004232:	e124      	b.n	800447e <UART_SetConfig+0x5a2>
 8004234:	2380      	movs	r3, #128	; 0x80
 8004236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800423a:	e120      	b.n	800447e <UART_SetConfig+0x5a2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4acc      	ldr	r2, [pc, #816]	; (8004574 <UART_SetConfig+0x698>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d176      	bne.n	8004334 <UART_SetConfig+0x458>
 8004246:	4bcc      	ldr	r3, [pc, #816]	; (8004578 <UART_SetConfig+0x69c>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424e:	2b28      	cmp	r3, #40	; 0x28
 8004250:	d86c      	bhi.n	800432c <UART_SetConfig+0x450>
 8004252:	a201      	add	r2, pc, #4	; (adr r2, 8004258 <UART_SetConfig+0x37c>)
 8004254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004258:	080042fd 	.word	0x080042fd
 800425c:	0800432d 	.word	0x0800432d
 8004260:	0800432d 	.word	0x0800432d
 8004264:	0800432d 	.word	0x0800432d
 8004268:	0800432d 	.word	0x0800432d
 800426c:	0800432d 	.word	0x0800432d
 8004270:	0800432d 	.word	0x0800432d
 8004274:	0800432d 	.word	0x0800432d
 8004278:	08004305 	.word	0x08004305
 800427c:	0800432d 	.word	0x0800432d
 8004280:	0800432d 	.word	0x0800432d
 8004284:	0800432d 	.word	0x0800432d
 8004288:	0800432d 	.word	0x0800432d
 800428c:	0800432d 	.word	0x0800432d
 8004290:	0800432d 	.word	0x0800432d
 8004294:	0800432d 	.word	0x0800432d
 8004298:	0800430d 	.word	0x0800430d
 800429c:	0800432d 	.word	0x0800432d
 80042a0:	0800432d 	.word	0x0800432d
 80042a4:	0800432d 	.word	0x0800432d
 80042a8:	0800432d 	.word	0x0800432d
 80042ac:	0800432d 	.word	0x0800432d
 80042b0:	0800432d 	.word	0x0800432d
 80042b4:	0800432d 	.word	0x0800432d
 80042b8:	08004315 	.word	0x08004315
 80042bc:	0800432d 	.word	0x0800432d
 80042c0:	0800432d 	.word	0x0800432d
 80042c4:	0800432d 	.word	0x0800432d
 80042c8:	0800432d 	.word	0x0800432d
 80042cc:	0800432d 	.word	0x0800432d
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	0800432d 	.word	0x0800432d
 80042d8:	0800431d 	.word	0x0800431d
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	0800432d 	.word	0x0800432d
 80042e4:	0800432d 	.word	0x0800432d
 80042e8:	0800432d 	.word	0x0800432d
 80042ec:	0800432d 	.word	0x0800432d
 80042f0:	0800432d 	.word	0x0800432d
 80042f4:	0800432d 	.word	0x0800432d
 80042f8:	08004325 	.word	0x08004325
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004302:	e0bc      	b.n	800447e <UART_SetConfig+0x5a2>
 8004304:	2304      	movs	r3, #4
 8004306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800430a:	e0b8      	b.n	800447e <UART_SetConfig+0x5a2>
 800430c:	2308      	movs	r3, #8
 800430e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004312:	e0b4      	b.n	800447e <UART_SetConfig+0x5a2>
 8004314:	2310      	movs	r3, #16
 8004316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800431a:	e0b0      	b.n	800447e <UART_SetConfig+0x5a2>
 800431c:	2320      	movs	r3, #32
 800431e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004322:	e0ac      	b.n	800447e <UART_SetConfig+0x5a2>
 8004324:	2340      	movs	r3, #64	; 0x40
 8004326:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800432a:	e0a8      	b.n	800447e <UART_SetConfig+0x5a2>
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004332:	e0a4      	b.n	800447e <UART_SetConfig+0x5a2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a90      	ldr	r2, [pc, #576]	; (800457c <UART_SetConfig+0x6a0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d130      	bne.n	80043a0 <UART_SetConfig+0x4c4>
 800433e:	4b8e      	ldr	r3, [pc, #568]	; (8004578 <UART_SetConfig+0x69c>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	2b05      	cmp	r3, #5
 8004348:	d826      	bhi.n	8004398 <UART_SetConfig+0x4bc>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <UART_SetConfig+0x474>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	08004369 	.word	0x08004369
 8004354:	08004371 	.word	0x08004371
 8004358:	08004379 	.word	0x08004379
 800435c:	08004381 	.word	0x08004381
 8004360:	08004389 	.word	0x08004389
 8004364:	08004391 	.word	0x08004391
 8004368:	2300      	movs	r3, #0
 800436a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800436e:	e086      	b.n	800447e <UART_SetConfig+0x5a2>
 8004370:	2304      	movs	r3, #4
 8004372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004376:	e082      	b.n	800447e <UART_SetConfig+0x5a2>
 8004378:	2308      	movs	r3, #8
 800437a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800437e:	e07e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004380:	2310      	movs	r3, #16
 8004382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004386:	e07a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004388:	2320      	movs	r3, #32
 800438a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800438e:	e076      	b.n	800447e <UART_SetConfig+0x5a2>
 8004390:	2340      	movs	r3, #64	; 0x40
 8004392:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004396:	e072      	b.n	800447e <UART_SetConfig+0x5a2>
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800439e:	e06e      	b.n	800447e <UART_SetConfig+0x5a2>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a76      	ldr	r2, [pc, #472]	; (8004580 <UART_SetConfig+0x6a4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d130      	bne.n	800440c <UART_SetConfig+0x530>
 80043aa:	4b73      	ldr	r3, [pc, #460]	; (8004578 <UART_SetConfig+0x69c>)
 80043ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	2b05      	cmp	r3, #5
 80043b4:	d826      	bhi.n	8004404 <UART_SetConfig+0x528>
 80043b6:	a201      	add	r2, pc, #4	; (adr r2, 80043bc <UART_SetConfig+0x4e0>)
 80043b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043bc:	080043d5 	.word	0x080043d5
 80043c0:	080043dd 	.word	0x080043dd
 80043c4:	080043e5 	.word	0x080043e5
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	2300      	movs	r3, #0
 80043d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043da:	e050      	b.n	800447e <UART_SetConfig+0x5a2>
 80043dc:	2304      	movs	r3, #4
 80043de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043e2:	e04c      	b.n	800447e <UART_SetConfig+0x5a2>
 80043e4:	2308      	movs	r3, #8
 80043e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043ea:	e048      	b.n	800447e <UART_SetConfig+0x5a2>
 80043ec:	2310      	movs	r3, #16
 80043ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043f2:	e044      	b.n	800447e <UART_SetConfig+0x5a2>
 80043f4:	2320      	movs	r3, #32
 80043f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80043fa:	e040      	b.n	800447e <UART_SetConfig+0x5a2>
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004402:	e03c      	b.n	800447e <UART_SetConfig+0x5a2>
 8004404:	2380      	movs	r3, #128	; 0x80
 8004406:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800440a:	e038      	b.n	800447e <UART_SetConfig+0x5a2>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a5c      	ldr	r2, [pc, #368]	; (8004584 <UART_SetConfig+0x6a8>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d130      	bne.n	8004478 <UART_SetConfig+0x59c>
 8004416:	4b58      	ldr	r3, [pc, #352]	; (8004578 <UART_SetConfig+0x69c>)
 8004418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441a:	f003 0307 	and.w	r3, r3, #7
 800441e:	2b05      	cmp	r3, #5
 8004420:	d826      	bhi.n	8004470 <UART_SetConfig+0x594>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x54c>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004441 	.word	0x08004441
 800442c:	08004449 	.word	0x08004449
 8004430:	08004451 	.word	0x08004451
 8004434:	08004459 	.word	0x08004459
 8004438:	08004461 	.word	0x08004461
 800443c:	08004469 	.word	0x08004469
 8004440:	2302      	movs	r3, #2
 8004442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004446:	e01a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004448:	2304      	movs	r3, #4
 800444a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800444e:	e016      	b.n	800447e <UART_SetConfig+0x5a2>
 8004450:	2308      	movs	r3, #8
 8004452:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004456:	e012      	b.n	800447e <UART_SetConfig+0x5a2>
 8004458:	2310      	movs	r3, #16
 800445a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800445e:	e00e      	b.n	800447e <UART_SetConfig+0x5a2>
 8004460:	2320      	movs	r3, #32
 8004462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004466:	e00a      	b.n	800447e <UART_SetConfig+0x5a2>
 8004468:	2340      	movs	r3, #64	; 0x40
 800446a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800446e:	e006      	b.n	800447e <UART_SetConfig+0x5a2>
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004476:	e002      	b.n	800447e <UART_SetConfig+0x5a2>
 8004478:	2380      	movs	r3, #128	; 0x80
 800447a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a40      	ldr	r2, [pc, #256]	; (8004584 <UART_SetConfig+0x6a8>)
 8004484:	4293      	cmp	r3, r2
 8004486:	f040 80ef 	bne.w	8004668 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800448a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800448e:	2b20      	cmp	r3, #32
 8004490:	dc46      	bgt.n	8004520 <UART_SetConfig+0x644>
 8004492:	2b02      	cmp	r3, #2
 8004494:	f2c0 8081 	blt.w	800459a <UART_SetConfig+0x6be>
 8004498:	3b02      	subs	r3, #2
 800449a:	2b1e      	cmp	r3, #30
 800449c:	d87d      	bhi.n	800459a <UART_SetConfig+0x6be>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x5c8>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	08004527 	.word	0x08004527
 80044a8:	0800459b 	.word	0x0800459b
 80044ac:	0800452f 	.word	0x0800452f
 80044b0:	0800459b 	.word	0x0800459b
 80044b4:	0800459b 	.word	0x0800459b
 80044b8:	0800459b 	.word	0x0800459b
 80044bc:	0800453f 	.word	0x0800453f
 80044c0:	0800459b 	.word	0x0800459b
 80044c4:	0800459b 	.word	0x0800459b
 80044c8:	0800459b 	.word	0x0800459b
 80044cc:	0800459b 	.word	0x0800459b
 80044d0:	0800459b 	.word	0x0800459b
 80044d4:	0800459b 	.word	0x0800459b
 80044d8:	0800459b 	.word	0x0800459b
 80044dc:	0800454f 	.word	0x0800454f
 80044e0:	0800459b 	.word	0x0800459b
 80044e4:	0800459b 	.word	0x0800459b
 80044e8:	0800459b 	.word	0x0800459b
 80044ec:	0800459b 	.word	0x0800459b
 80044f0:	0800459b 	.word	0x0800459b
 80044f4:	0800459b 	.word	0x0800459b
 80044f8:	0800459b 	.word	0x0800459b
 80044fc:	0800459b 	.word	0x0800459b
 8004500:	0800459b 	.word	0x0800459b
 8004504:	0800459b 	.word	0x0800459b
 8004508:	0800459b 	.word	0x0800459b
 800450c:	0800459b 	.word	0x0800459b
 8004510:	0800459b 	.word	0x0800459b
 8004514:	0800459b 	.word	0x0800459b
 8004518:	0800459b 	.word	0x0800459b
 800451c:	0800458d 	.word	0x0800458d
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d036      	beq.n	8004592 <UART_SetConfig+0x6b6>
 8004524:	e039      	b.n	800459a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004526:	f7ff f867 	bl	80035f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800452a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800452c:	e03b      	b.n	80045a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f876 	bl	8003624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800453c:	e033      	b.n	80045a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800453e:	f107 0308 	add.w	r3, r7, #8
 8004542:	4618      	mov	r0, r3
 8004544:	f7ff f9c2 	bl	80038cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800454c:	e02b      	b.n	80045a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800454e:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <UART_SetConfig+0x69c>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b00      	cmp	r3, #0
 8004558:	d009      	beq.n	800456e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800455a:	4b07      	ldr	r3, [pc, #28]	; (8004578 <UART_SetConfig+0x69c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	08db      	lsrs	r3, r3, #3
 8004560:	f003 0303 	and.w	r3, r3, #3
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <UART_SetConfig+0x6ac>)
 8004566:	fa22 f303 	lsr.w	r3, r2, r3
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800456c:	e01b      	b.n	80045a6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <UART_SetConfig+0x6ac>)
 8004570:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004572:	e018      	b.n	80045a6 <UART_SetConfig+0x6ca>
 8004574:	40011400 	.word	0x40011400
 8004578:	58024400 	.word	0x58024400
 800457c:	40007800 	.word	0x40007800
 8004580:	40007c00 	.word	0x40007c00
 8004584:	58000c00 	.word	0x58000c00
 8004588:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800458c:	4bc4      	ldr	r3, [pc, #784]	; (80048a0 <UART_SetConfig+0x9c4>)
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004590:	e009      	b.n	80045a6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004592:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004596:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004598:	e005      	b.n	80045a6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800459a:	2300      	movs	r3, #0
 800459c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80045a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 81da 	beq.w	8004962 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	4abc      	ldr	r2, [pc, #752]	; (80048a4 <UART_SetConfig+0x9c8>)
 80045b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80045c0:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	4613      	mov	r3, r2
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	4413      	add	r3, r2
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d305      	bcc.n	80045de <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045d8:	6a3a      	ldr	r2, [r7, #32]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80045e4:	e1bd      	b.n	8004962 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	4618      	mov	r0, r3
 80045ea:	f04f 0100 	mov.w	r1, #0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	4aac      	ldr	r2, [pc, #688]	; (80048a4 <UART_SetConfig+0x9c8>)
 80045f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	f7fb fe6b 	bl	80002d8 <__aeabi_uldivmod>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	020b      	lsls	r3, r1, #8
 8004614:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004618:	0202      	lsls	r2, r0, #8
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	6849      	ldr	r1, [r1, #4]
 800461e:	0849      	lsrs	r1, r1, #1
 8004620:	4608      	mov	r0, r1
 8004622:	f04f 0100 	mov.w	r1, #0
 8004626:	1814      	adds	r4, r2, r0
 8004628:	eb43 0501 	adc.w	r5, r3, r1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	4620      	mov	r0, r4
 8004638:	4629      	mov	r1, r5
 800463a:	f7fb fe4d 	bl	80002d8 <__aeabi_uldivmod>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4613      	mov	r3, r2
 8004644:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800464c:	d308      	bcc.n	8004660 <UART_SetConfig+0x784>
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004654:	d204      	bcs.n	8004660 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	e180      	b.n	8004962 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004666:	e17c      	b.n	8004962 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004670:	f040 80be 	bne.w	80047f0 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 8004674:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004678:	2b20      	cmp	r3, #32
 800467a:	dc49      	bgt.n	8004710 <UART_SetConfig+0x834>
 800467c:	2b00      	cmp	r3, #0
 800467e:	db7c      	blt.n	800477a <UART_SetConfig+0x89e>
 8004680:	2b20      	cmp	r3, #32
 8004682:	d87a      	bhi.n	800477a <UART_SetConfig+0x89e>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x7b0>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	08004717 	.word	0x08004717
 8004690:	0800471f 	.word	0x0800471f
 8004694:	0800477b 	.word	0x0800477b
 8004698:	0800477b 	.word	0x0800477b
 800469c:	08004727 	.word	0x08004727
 80046a0:	0800477b 	.word	0x0800477b
 80046a4:	0800477b 	.word	0x0800477b
 80046a8:	0800477b 	.word	0x0800477b
 80046ac:	08004737 	.word	0x08004737
 80046b0:	0800477b 	.word	0x0800477b
 80046b4:	0800477b 	.word	0x0800477b
 80046b8:	0800477b 	.word	0x0800477b
 80046bc:	0800477b 	.word	0x0800477b
 80046c0:	0800477b 	.word	0x0800477b
 80046c4:	0800477b 	.word	0x0800477b
 80046c8:	0800477b 	.word	0x0800477b
 80046cc:	08004747 	.word	0x08004747
 80046d0:	0800477b 	.word	0x0800477b
 80046d4:	0800477b 	.word	0x0800477b
 80046d8:	0800477b 	.word	0x0800477b
 80046dc:	0800477b 	.word	0x0800477b
 80046e0:	0800477b 	.word	0x0800477b
 80046e4:	0800477b 	.word	0x0800477b
 80046e8:	0800477b 	.word	0x0800477b
 80046ec:	0800477b 	.word	0x0800477b
 80046f0:	0800477b 	.word	0x0800477b
 80046f4:	0800477b 	.word	0x0800477b
 80046f8:	0800477b 	.word	0x0800477b
 80046fc:	0800477b 	.word	0x0800477b
 8004700:	0800477b 	.word	0x0800477b
 8004704:	0800477b 	.word	0x0800477b
 8004708:	0800477b 	.word	0x0800477b
 800470c:	0800476d 	.word	0x0800476d
 8004710:	2b40      	cmp	r3, #64	; 0x40
 8004712:	d02e      	beq.n	8004772 <UART_SetConfig+0x896>
 8004714:	e031      	b.n	800477a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004716:	f7fd ffd3 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 800471a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800471c:	e033      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800471e:	f7fd ffe5 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8004722:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004724:	e02f      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4618      	mov	r0, r3
 800472c:	f7fe ff7a 	bl	8003624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004734:	e027      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004736:	f107 0308 	add.w	r3, r7, #8
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff f8c6 	bl	80038cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004744:	e01f      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004746:	4b58      	ldr	r3, [pc, #352]	; (80048a8 <UART_SetConfig+0x9cc>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d009      	beq.n	8004766 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004752:	4b55      	ldr	r3, [pc, #340]	; (80048a8 <UART_SetConfig+0x9cc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	08db      	lsrs	r3, r3, #3
 8004758:	f003 0303 	and.w	r3, r3, #3
 800475c:	4a53      	ldr	r2, [pc, #332]	; (80048ac <UART_SetConfig+0x9d0>)
 800475e:	fa22 f303 	lsr.w	r3, r2, r3
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004764:	e00f      	b.n	8004786 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8004766:	4b51      	ldr	r3, [pc, #324]	; (80048ac <UART_SetConfig+0x9d0>)
 8004768:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800476a:	e00c      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800476c:	4b4c      	ldr	r3, [pc, #304]	; (80048a0 <UART_SetConfig+0x9c4>)
 800476e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004770:	e009      	b.n	8004786 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004776:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004778:	e005      	b.n	8004786 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800477a:	2300      	movs	r3, #0
 800477c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80ea 	beq.w	8004962 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4a44      	ldr	r2, [pc, #272]	; (80048a4 <UART_SetConfig+0x9c8>)
 8004794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004798:	461a      	mov	r2, r3
 800479a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479c:	fbb3 f3f2 	udiv	r3, r3, r2
 80047a0:	005a      	lsls	r2, r3, #1
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	441a      	add	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b6:	2b0f      	cmp	r3, #15
 80047b8:	d916      	bls.n	80047e8 <UART_SetConfig+0x90c>
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047c0:	d212      	bcs.n	80047e8 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	f023 030f 	bic.w	r3, r3, #15
 80047ca:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80047da:	4313      	orrs	r3, r2
 80047dc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80047e4:	60da      	str	r2, [r3, #12]
 80047e6:	e0bc      	b.n	8004962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80047ee:	e0b8      	b.n	8004962 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	dc4b      	bgt.n	8004890 <UART_SetConfig+0x9b4>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f2c0 8087 	blt.w	800490c <UART_SetConfig+0xa30>
 80047fe:	2b20      	cmp	r3, #32
 8004800:	f200 8084 	bhi.w	800490c <UART_SetConfig+0xa30>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <UART_SetConfig+0x930>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	08004897 	.word	0x08004897
 8004810:	080048b1 	.word	0x080048b1
 8004814:	0800490d 	.word	0x0800490d
 8004818:	0800490d 	.word	0x0800490d
 800481c:	080048b9 	.word	0x080048b9
 8004820:	0800490d 	.word	0x0800490d
 8004824:	0800490d 	.word	0x0800490d
 8004828:	0800490d 	.word	0x0800490d
 800482c:	080048c9 	.word	0x080048c9
 8004830:	0800490d 	.word	0x0800490d
 8004834:	0800490d 	.word	0x0800490d
 8004838:	0800490d 	.word	0x0800490d
 800483c:	0800490d 	.word	0x0800490d
 8004840:	0800490d 	.word	0x0800490d
 8004844:	0800490d 	.word	0x0800490d
 8004848:	0800490d 	.word	0x0800490d
 800484c:	080048d9 	.word	0x080048d9
 8004850:	0800490d 	.word	0x0800490d
 8004854:	0800490d 	.word	0x0800490d
 8004858:	0800490d 	.word	0x0800490d
 800485c:	0800490d 	.word	0x0800490d
 8004860:	0800490d 	.word	0x0800490d
 8004864:	0800490d 	.word	0x0800490d
 8004868:	0800490d 	.word	0x0800490d
 800486c:	0800490d 	.word	0x0800490d
 8004870:	0800490d 	.word	0x0800490d
 8004874:	0800490d 	.word	0x0800490d
 8004878:	0800490d 	.word	0x0800490d
 800487c:	0800490d 	.word	0x0800490d
 8004880:	0800490d 	.word	0x0800490d
 8004884:	0800490d 	.word	0x0800490d
 8004888:	0800490d 	.word	0x0800490d
 800488c:	080048ff 	.word	0x080048ff
 8004890:	2b40      	cmp	r3, #64	; 0x40
 8004892:	d037      	beq.n	8004904 <UART_SetConfig+0xa28>
 8004894:	e03a      	b.n	800490c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004896:	f7fd ff13 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 800489a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800489c:	e03c      	b.n	8004918 <UART_SetConfig+0xa3c>
 800489e:	bf00      	nop
 80048a0:	003d0900 	.word	0x003d0900
 80048a4:	08004f8c 	.word	0x08004f8c
 80048a8:	58024400 	.word	0x58024400
 80048ac:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b0:	f7fd ff1c 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 80048b4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80048b6:	e02f      	b.n	8004918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048b8:	f107 0314 	add.w	r3, r7, #20
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fe feb1 	bl	8003624 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048c6:	e027      	b.n	8004918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048c8:	f107 0308 	add.w	r3, r7, #8
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fe fffd 	bl	80038cc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048d6:	e01f      	b.n	8004918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d8:	4b2c      	ldr	r3, [pc, #176]	; (800498c <UART_SetConfig+0xab0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <UART_SetConfig+0xab0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	08db      	lsrs	r3, r3, #3
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	4a28      	ldr	r2, [pc, #160]	; (8004990 <UART_SetConfig+0xab4>)
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
 80048f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048f6:	e00f      	b.n	8004918 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <UART_SetConfig+0xab4>)
 80048fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80048fc:	e00c      	b.n	8004918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80048fe:	4b25      	ldr	r3, [pc, #148]	; (8004994 <UART_SetConfig+0xab8>)
 8004900:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004902:	e009      	b.n	8004918 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004904:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004908:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800490a:	e005      	b.n	8004918 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004916:	bf00      	nop
    }

    if (pclk != 0U)
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d021      	beq.n	8004962 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004922:	4a1d      	ldr	r2, [pc, #116]	; (8004998 <UART_SetConfig+0xabc>)
 8004924:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004928:	461a      	mov	r2, r3
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	085b      	lsrs	r3, r3, #1
 8004936:	441a      	add	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d909      	bls.n	800495c <UART_SetConfig+0xa80>
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800494e:	d205      	bcs.n	800495c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	b29a      	uxth	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60da      	str	r2, [r3, #12]
 800495a:	e002      	b.n	8004962 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800497e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8004982:	4618      	mov	r0, r3
 8004984:	3738      	adds	r7, #56	; 0x38
 8004986:	46bd      	mov	sp, r7
 8004988:	bdb0      	pop	{r4, r5, r7, pc}
 800498a:	bf00      	nop
 800498c:	58024400 	.word	0x58024400
 8004990:	03d09000 	.word	0x03d09000
 8004994:	003d0900 	.word	0x003d0900
 8004998:	08004f8c 	.word	0x08004f8c

0800499c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00a      	beq.n	8004a2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d00a      	beq.n	8004a4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d00a      	beq.n	8004a70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01a      	beq.n	8004ab2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a9a:	d10a      	bne.n	8004ab2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00a      	beq.n	8004ad4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	605a      	str	r2, [r3, #4]
  }
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af02      	add	r7, sp, #8
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af0:	f7fc fa98 	bl	8001024 <HAL_GetTick>
 8004af4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d10e      	bne.n	8004b22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b08:	9300      	str	r3, [sp, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f82f 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e025      	b.n	8004b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0304 	and.w	r3, r3, #4
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d10e      	bne.n	8004b4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b34:	9300      	str	r3, [sp, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f819 	bl	8004b76 <UART_WaitOnFlagUntilTimeout>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e00f      	b.n	8004b6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2220      	movs	r2, #32
 8004b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b09c      	sub	sp, #112	; 0x70
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	60f8      	str	r0, [r7, #12]
 8004b7e:	60b9      	str	r1, [r7, #8]
 8004b80:	603b      	str	r3, [r7, #0]
 8004b82:	4613      	mov	r3, r2
 8004b84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b86:	e0a9      	b.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	f000 80a5 	beq.w	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fc fa47 	bl	8001024 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ba2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d140      	bne.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bb0:	e853 3f00 	ldrex	r3, [r3]
 8004bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004bbc:	667b      	str	r3, [r7, #100]	; 0x64
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bcc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bce:	e841 2300 	strex	r3, r2, [r1]
 8004bd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1e6      	bne.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	f023 0301 	bic.w	r3, r3, #1
 8004bf0:	663b      	str	r3, [r7, #96]	; 0x60
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8004bfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e069      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d051      	beq.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c46:	d149      	bne.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
 8004c72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e6      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	e853 3f00 	ldrex	r3, [r3]
 8004c92:	613b      	str	r3, [r7, #16]
   return(result);
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3308      	adds	r3, #8
 8004ca2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004ca4:	623a      	str	r2, [r7, #32]
 8004ca6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca8:	69f9      	ldr	r1, [r7, #28]
 8004caa:	6a3a      	ldr	r2, [r7, #32]
 8004cac:	e841 2300 	strex	r3, r2, [r1]
 8004cb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1e5      	bne.n	8004c84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e010      	b.n	8004cfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	f43f af46 	beq.w	8004b88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3770      	adds	r7, #112	; 0x70
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d101      	bne.n	8004d1c <HAL_UARTEx_DisableFifoMode+0x16>
 8004d18:	2302      	movs	r3, #2
 8004d1a:	e027      	b.n	8004d6c <HAL_UARTEx_DisableFifoMode+0x66>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2224      	movs	r2, #36	; 0x24
 8004d28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e02d      	b.n	8004dec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2224      	movs	r2, #36	; 0x24
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	683a      	ldr	r2, [r7, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f84f 	bl	8004e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e02d      	b.n	8004e68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2224      	movs	r2, #36	; 0x24
 8004e18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f811 	bl	8004e70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d108      	bne.n	8004e92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004e90:	e031      	b.n	8004ef6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004e92:	2310      	movs	r3, #16
 8004e94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004e96:	2310      	movs	r3, #16
 8004e98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	0e5b      	lsrs	r3, r3, #25
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	0f5b      	lsrs	r3, r3, #29
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004eba:	7bbb      	ldrb	r3, [r7, #14]
 8004ebc:	7b3a      	ldrb	r2, [r7, #12]
 8004ebe:	4911      	ldr	r1, [pc, #68]	; (8004f04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ec0:	5c8a      	ldrb	r2, [r1, r2]
 8004ec2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004ec6:	7b3a      	ldrb	r2, [r7, #12]
 8004ec8:	490f      	ldr	r1, [pc, #60]	; (8004f08 <UARTEx_SetNbDataToProcess+0x98>)
 8004eca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ecc:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	7b7a      	ldrb	r2, [r7, #13]
 8004edc:	4909      	ldr	r1, [pc, #36]	; (8004f04 <UARTEx_SetNbDataToProcess+0x94>)
 8004ede:	5c8a      	ldrb	r2, [r1, r2]
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004ee4:	7b7a      	ldrb	r2, [r7, #13]
 8004ee6:	4908      	ldr	r1, [pc, #32]	; (8004f08 <UARTEx_SetNbDataToProcess+0x98>)
 8004ee8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004eea:	fb93 f3f2 	sdiv	r3, r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr
 8004f02:	bf00      	nop
 8004f04:	08004fa4 	.word	0x08004fa4
 8004f08:	08004fac 	.word	0x08004fac

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	4d0d      	ldr	r5, [pc, #52]	; (8004f44 <__libc_init_array+0x38>)
 8004f10:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f12:	1b64      	subs	r4, r4, r5
 8004f14:	10a4      	asrs	r4, r4, #2
 8004f16:	2600      	movs	r6, #0
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	4d0b      	ldr	r5, [pc, #44]	; (8004f4c <__libc_init_array+0x40>)
 8004f1e:	4c0c      	ldr	r4, [pc, #48]	; (8004f50 <__libc_init_array+0x44>)
 8004f20:	f000 f820 	bl	8004f64 <_init>
 8004f24:	1b64      	subs	r4, r4, r5
 8004f26:	10a4      	asrs	r4, r4, #2
 8004f28:	2600      	movs	r6, #0
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08004fbc 	.word	0x08004fbc
 8004f48:	08004fbc 	.word	0x08004fbc
 8004f4c:	08004fbc 	.word	0x08004fbc
 8004f50:	08004fc0 	.word	0x08004fc0

08004f54 <memset>:
 8004f54:	4402      	add	r2, r0
 8004f56:	4603      	mov	r3, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
